/* Generated by Cython 0.29 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "include_dirs": [
            "C:\\Users\\user\\source\\repos\\openfst\\OpenFst\\src\\include",
            "C:\\Users\\user\\source\\repos\\vcpkg\\installed\\x64-windows\\include",
            "C:\\Users\\user\\source\\repos\\vcpkg\\installed\\x64-windows\\include\\mman"
        ],
        "language": "c++",
        "libraries": [
            "openfst_lib",
            "mman",
            "dl"
        ],
        "library_dirs": [
            "C:\\Users\\user\\CMakeBuilds\\69f0e0de-6c8a-6e30-937d-53780dcfc6ff\\build\\x64-Release\\projects\\openfst",
            "C:\\Users\\user\\source\\repos\\vcpkg\\installed\\x64-windows\\lib"
        ],
        "name": "openpyfst",
        "sources": [
            "C:\\Users\\user\\source\\repos\\openfst\\OpenFst\\src\\python\\openpyfst.pyx"
        ]
    },
    "module_name": "openpyfst"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29"
#define CYTHON_HEX_VERSION 0x001D00F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_USE_DICT_VERSIONS
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
        static PY_UINT64_T __pyx_dict_version = 0;\
        static PyObject *__pyx_dict_cached_value = NULL;\
        if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
            (VAR) = __pyx_dict_cached_value;\
        } else {\
            (VAR) = __pyx_dict_cached_value = (LOOKUP);\
            __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
        }\
    }
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0; // PyThread_create_key reports success always
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif // TSS (Thread Specific Storage) API
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__openpyfst
#define __PYX_HAVE_API__openpyfst
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <string.h>
#include <string>
#include <utility>
#include <stdint.h>
#include <iostream>
#include <fst/symbol-table.h>
#include <fst/fstlib.h>
#include <limits.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "openpyfst.pyx",
  "stringsource",
};

/*--- Type declarations ---*/
struct __pyx_obj_9openpyfst_SymbolTable;
struct __pyx_obj_9openpyfst__Fst;
struct __pyx_obj_9openpyfst_TropicalWeight;
struct __pyx_obj_9openpyfst_StdArc;
struct __pyx_obj_9openpyfst_StdState;
struct __pyx_obj_9openpyfst_StdVectorFst;
struct __pyx_obj_9openpyfst___pyx_scope_struct__items;
struct __pyx_obj_9openpyfst___pyx_scope_struct_1___iter__;
struct __pyx_obj_9openpyfst___pyx_scope_struct_2_num_arcs;
struct __pyx_obj_9openpyfst___pyx_scope_struct_3_genexpr;
struct __pyx_obj_9openpyfst___pyx_scope_struct_4___iter__;
struct __pyx_obj_9openpyfst___pyx_scope_struct_5__visit;

/* "openpyfst.pyx":68
 * 
 * 
 * cdef class SymbolTable:             # <<<<<<<<<<<<<<
 *     cdef sym.SymbolTable* table
 * 
 */
struct __pyx_obj_9openpyfst_SymbolTable {
  PyObject_HEAD
  fst::SymbolTable *table;
};


/* "openpyfst.pyx":169
 * 
 * 
 * cdef class _Fst:             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         raise NotImplementedError('use StdVectorFst or LogVectorFst to create a transducer')
 */
struct __pyx_obj_9openpyfst__Fst {
  PyObject_HEAD
};


/* "openpyfst.pyx":186
 * 
 * 
 * cdef class TropicalWeight:             # <<<<<<<<<<<<<<
 *     cdef openfst.TropicalWeight* weight
 * 
 */
struct __pyx_obj_9openpyfst_TropicalWeight {
  PyObject_HEAD
  fst::TropicalWeight *weight;
};


/* "openpyfst.pyx":243
 * 
 * 
 * cdef class StdArc:             # <<<<<<<<<<<<<<
 *     cdef openfst.StdArc* arc
 *     SEMIRING = TropicalWeight
 */
struct __pyx_obj_9openpyfst_StdArc {
  PyObject_HEAD
  fst::StdArc *arc;
};


/* "openpyfst.pyx":286
 *             self.ilabel, self.olabel, self.weight)
 * 
 * cdef class StdState:             # <<<<<<<<<<<<<<
 *     cdef public int stateid
 *     cdef openfst.StdVectorFst* fst
 */
struct __pyx_obj_9openpyfst_StdState {
  PyObject_HEAD
  int stateid;
  fst::StdVectorFst *fst;
};


/* "openpyfst.pyx":340
 *         return '<StdState #{0} with {1} arcs>'.format(self.stateid, len(self))
 * 
 * cdef class StdVectorFst(_Fst):             # <<<<<<<<<<<<<<
 *     cdef openfst.StdVectorFst* fst
 *     cdef public SymbolTable isyms, osyms
 */
struct __pyx_obj_9openpyfst_StdVectorFst {
  struct __pyx_obj_9openpyfst__Fst __pyx_base;
  fst::StdVectorFst *fst;
  struct __pyx_obj_9openpyfst_SymbolTable *isyms;
  struct __pyx_obj_9openpyfst_SymbolTable *osyms;
};


/* "openpyfst.pyx":119
 *         return self.table.NumSymbols()
 * 
 *     def items(self):             # <<<<<<<<<<<<<<
 *         """table.items() -> iterator over (symbol, value) pairs"""
 *         cdef sym.SymbolTableIterator* it = new sym.SymbolTableIterator(self.table[0])
 */
struct __pyx_obj_9openpyfst___pyx_scope_struct__items {
  PyObject_HEAD
  fst::SymbolTableIterator *__pyx_v_it;
  struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self;
};


/* "openpyfst.pyx":298
 *         return self.fst.NumArcs(self.stateid)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef openfst.ArcIterator[openfst.StdVectorFst]* it
 *         it = new openfst.ArcIterator[openfst.StdVectorFst](self.fst[0], self.stateid)
 */
struct __pyx_obj_9openpyfst___pyx_scope_struct_1___iter__ {
  PyObject_HEAD
  struct __pyx_obj_9openpyfst_StdArc *__pyx_v_arc;
  fst::ArcIterator<fst::StdVectorFst>  *__pyx_v_it;
  struct __pyx_obj_9openpyfst_StdState *__pyx_v_self;
};


/* "openpyfst.pyx":382
 *         return self.fst.NumStates()
 * 
 *     def num_arcs(self):             # <<<<<<<<<<<<<<
 *         """fst.num_arcs() -> total number of arcs in the transducer"""
 *         return sum(len(state) for state in self)
 */
struct __pyx_obj_9openpyfst___pyx_scope_struct_2_num_arcs {
  PyObject_HEAD
  struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self;
};


/* "openpyfst.pyx":384
 *     def num_arcs(self):
 *         """fst.num_arcs() -> total number of arcs in the transducer"""
 *         return sum(len(state) for state in self)             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
struct __pyx_obj_9openpyfst___pyx_scope_struct_3_genexpr {
  PyObject_HEAD
  struct __pyx_obj_9openpyfst___pyx_scope_struct_2_num_arcs *__pyx_outer_scope;
  PyObject *__pyx_v_state;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "openpyfst.pyx":408
 *         return state
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         for i in range(len(self)):
 *             yield self[i]
 */
struct __pyx_obj_9openpyfst___pyx_scope_struct_4___iter__ {
  PyObject_HEAD
  Py_ssize_t __pyx_v_i;
  struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self;
  Py_ssize_t __pyx_t_0;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
};


/* "openpyfst.pyx":795
 *         return result
 * 
 *     def _visit(self, int stateid, prefix=()):             # <<<<<<<<<<<<<<
 *         """fst._visit(stateid, prefix): depth-first search"""
 *         if self[stateid].final:
 */
struct __pyx_obj_9openpyfst___pyx_scope_struct_5__visit {
  PyObject_HEAD
  PyObject *__pyx_v_arc;
  PyObject *__pyx_v_path;
  PyObject *__pyx_v_prefix;
  struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self;
  int __pyx_v_stateid;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
  PyObject *__pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = PyFrame_Type.tp_basicsize - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* IncludeCppStringH.proto */
#include <string>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_cpp_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_cpp_string(
         std::string cppstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        cppstring.data(), cppstring.size(), start, stop, encoding, errors, decode_func);
}

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* pyobject_as_double.proto */
static double __Pyx__PyObject_AsDouble(PyObject* obj);
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj)\
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) :\
 likely(PyInt_CheckExact(obj)) ?\
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj)\
((likely(PyFloat_CheckExact(obj))) ?\
 PyFloat_AS_DOUBLE(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

/* PyIntFromDouble.proto */
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE PyObject* __Pyx_PyInt_FromDouble(double value);
#else
#define __Pyx_PyInt_FromDouble(value) PyLong_FromDouble(value)
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__fst_3a__3a_ReweightType(enum fst::ReweightType value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum fst::ReweightType __Pyx_PyInt_As_enum__fst_3a__3a_ReweightType(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'util' */

/* Module declarations from 'sym' */

/* Module declarations from 'openfst' */

/* Module declarations from 'libc.limits' */

/* Module declarations from 'openpyfst' */
static PyTypeObject *__pyx_ptype_9openpyfst_SymbolTable = 0;
static PyTypeObject *__pyx_ptype_9openpyfst__Fst = 0;
static PyTypeObject *__pyx_ptype_9openpyfst_TropicalWeight = 0;
static PyTypeObject *__pyx_ptype_9openpyfst_StdArc = 0;
static PyTypeObject *__pyx_ptype_9openpyfst_StdState = 0;
static PyTypeObject *__pyx_ptype_9openpyfst_StdVectorFst = 0;
static PyTypeObject *__pyx_ptype_9openpyfst___pyx_scope_struct__items = 0;
static PyTypeObject *__pyx_ptype_9openpyfst___pyx_scope_struct_1___iter__ = 0;
static PyTypeObject *__pyx_ptype_9openpyfst___pyx_scope_struct_2_num_arcs = 0;
static PyTypeObject *__pyx_ptype_9openpyfst___pyx_scope_struct_3_genexpr = 0;
static PyTypeObject *__pyx_ptype_9openpyfst___pyx_scope_struct_4___iter__ = 0;
static PyTypeObject *__pyx_ptype_9openpyfst___pyx_scope_struct_5__visit = 0;
static PyObject *__pyx_f_9openpyfst_as_str(PyObject *); /*proto*/
static PyObject *__pyx_f_9openpyfst___pyx_unpickle__Fst__set_state(struct __pyx_obj_9openpyfst__Fst *, PyObject *); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
#define __Pyx_MODULE_NAME "openpyfst"
extern int __pyx_module_is_main_openpyfst;
int __pyx_module_is_main_openpyfst = 0;

/* Implementation of 'openpyfst' */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_OSError;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_n[] = "n";
static const char __pyx_k__3[] = "";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_io[] = "io";
static const char __pyx_k_re[] = "re";
static const char __pyx_k_Fst[] = "_Fst";
static const char __pyx_k_ONE[] = "ONE";
static const char __pyx_k__32[] = "\316\265";
static const char __pyx_k_dot[] = "dot";
static const char __pyx_k_fst[] = "fst";
static const char __pyx_k_log[] = "log";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_PIPE[] = "PIPE";
static const char __pyx_k_ROOT[] = "__ROOT__";
static const char __pyx_k_Tsvg[] = "-Tsvg";
static const char __pyx_k_ZERO[] = "ZERO";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_dest[] = "dest";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_draw[] = "draw";
static const char __pyx_k_find[] = "find";
static const char __pyx_k_imap[] = "imap";
static const char __pyx_k_iter[] = "__iter__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_omap[] = "omap";
static const char __pyx_k_plus[] = "plus";
static const char __pyx_k_push[] = "push";
static const char __pyx_k_read[] = "read";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_utf8[] = "utf8";
static const char __pyx_k_Popen[] = "Popen";
static const char __pyx_k_ascii[] = "ascii";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_final[] = "final";
static const char __pyx_k_isyms[] = "isyms";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_label[] = "label";
static const char __pyx_k_merge[] = "merge";
static const char __pyx_k_osyms[] = "osyms";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_stdin[] = "stdin";
static const char __pyx_k_syms1[] = "syms1";
static const char __pyx_k_syms2[] = "syms2";
static const char __pyx_k_table[] = "table";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_tosym[] = "_tosym";
static const char __pyx_k_union[] = "union";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_visit[] = "_visit";
static const char __pyx_k_StdArc[] = "StdArc";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_header[] = "header";
static const char __pyx_k_ilabel[] = "ilabel";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_invert[] = "invert";
static const char __pyx_k_labels[] = "labels";
static const char __pyx_k_merged[] = "merged";
static const char __pyx_k_n_path[] = "n_path";
static const char __pyx_k_olabel[] = "olabel";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_prefix[] = "prefix";
static const char __pyx_k_random[] = "random";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_source[] = "source";
static const char __pyx_k_stderr[] = "stderr";
static const char __pyx_k_stdout[] = "stdout";
static const char __pyx_k_stream[] = "stream";
static const char __pyx_k_symbol[] = "symbol";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_weight[] = "weight";
static const char __pyx_k_EPSILON[] = "EPSILON";
static const char __pyx_k_OSError[] = "OSError";
static const char __pyx_k_compose[] = "compose";
static const char __pyx_k_epsilon[] = "epsilon";
static const char __pyx_k_fstream[] = "fstream";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_max_len[] = "max_len";
static const char __pyx_k_randint[] = "randint";
static const char __pyx_k_reverse[] = "reverse";
static const char __pyx_k_stateid[] = "stateid";
static const char __pyx_k_uniform[] = "uniform";
static const char __pyx_k_weights[] = "weights";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_SEMIRING[] = "SEMIRING";
static const char __pyx_k_StdState[] = "StdState";
static const char __pyx_k_acceptor[] = "acceptor";
static const char __pyx_k_arc_type[] = "arc_type";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_read_std[] = "read_std";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_standard[] = "standard";
static const char __pyx_k_weighted[] = "weighted";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_intersect[] = "intersect";
static const char __pyx_k_nextstate[] = "nextstate";
static const char __pyx_k_openpyfst[] = "openpyfst";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_set_union[] = "set_union";
static const char __pyx_k_EPSILON_ID[] = "EPSILON_ID";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_difference[] = "difference";
static const char __pyx_k_keep_isyms[] = "keep_isyms";
static const char __pyx_k_keep_osyms[] = "keep_osyms";
static const char __pyx_k_potentials[] = "potentials";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_subprocess[] = "subprocess";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_SymbolTable[] = "SymbolTable";
static const char __pyx_k_communicate[] = "communicate";
static const char __pyx_k_concatenate[] = "concatenate";
static const char __pyx_k_init_tables[] = "_init_tables";
static const char __pyx_k_other_value[] = "other_value";
static const char __pyx_k_set_closure[] = "set_closure";
static const char __pyx_k_StdVectorFst[] = "StdVectorFst";
static const char __pyx_k_merge_tables[] = "_merge_tables";
static const char __pyx_k_other_symbol[] = "other_symbol";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_read_symbols[] = "read_symbols";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_SymbolTable_0[] = "SymbolTable<{0}>";
static const char __pyx_k_concatenation[] = "concatenation";
static const char __pyx_k_label_fst_map[] = "label_fst_map";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_StdArc_0_1_2_3[] = "<StdArc -> {0} | {1}:{2}/{3}>";
static const char __pyx_k_TropicalWeight[] = "TropicalWeight";
static const char __pyx_k_StdState___iter[] = "StdState.__iter__";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_TropicalWeight_0[] = "TropicalWeight({0})";
static const char __pyx_k_logprob_generate[] = "logprob_generate";
static const char __pyx_k_uniform_generate[] = "uniform_generate";
static const char __pyx_k_SymbolTable_items[] = "SymbolTable.items";
static const char __pyx_k_pyx_unpickle__Fst[] = "__pyx_unpickle__Fst";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_StdVectorFst___iter[] = "StdVectorFst.__iter__";
static const char __pyx_k_StdVectorFst__visit[] = "StdVectorFst._visit";
static const char __pyx_k_input_deterministic[] = "input_deterministic";
static const char __pyx_k_SymbolTable_of_size_0[] = "<SymbolTable of size {0}>";
static const char __pyx_k_StdState_0_with_1_arcs[] = "<StdState #{0} with {1} arcs>";
static const char __pyx_k_num_arcs_locals_genexpr[] = "num_arcs.<locals>.genexpr";
static const char __pyx_k_state_index_out_of_range[] = "state index out of range";
static const char __pyx_k_StdVectorFst_with_0_states[] = "<StdVectorFst with {0} states>";
static const char __pyx_k_cannot_find_the_dot_binary[] = "cannot find the dot binary";
static const char __pyx_k_incompatible_symbol_tables[] = "incompatible symbol tables";
static const char __pyx_k_invalid_source_state_id_0_1[] = "invalid source state id ({0} > {1})";
static const char __pyx_k_cannot_create_independent_arc[] = "cannot create independent arc";
static const char __pyx_k_Cannot_convert_0_to_bytestring[] = "Cannot convert {0} to bytestring";
static const char __pyx_k_cannot_create_independent_state[] = "cannot create independent state";
static const char __pyx_k_invalid_desination_state_id_0_1[] = "invalid desination state id ({0} > {1})";
static const char __pyx_k_self_arc_cannot_be_converted_to[] = "self.arc cannot be converted to a Python object for pickling";
static const char __pyx_k_self_fst_cannot_be_converted_to[] = "self.fst cannot be converted to a Python object for pickling";
static const char __pyx_k_self_weight_cannot_be_converted[] = "self.weight cannot be converted to a Python object for pickling";
static const char __pyx_k_C_Users_user_source_repos_openfs[] = "C:\\Users\\user\\source\\repos\\openfst\\OpenFst\\src\\python\\openpyfst.pyx";
static const char __pyx_k_Cannot_convert_label_0_to_symbol[] = "Cannot convert label \"{0}\" to symbol";
static const char __pyx_k_Incompatible_checksums_s_vs_0xd4[] = "Incompatible checksums (%s vs 0xd41d8cd = ())";
static const char __pyx_k_Weight_needs_to_have_the_path_pr[] = "Weight needs to have the path property and be right distributive";
static const char __pyx_k_both_transducers_need_to_be_acce[] = "both transducers need to be acceptors for intersection";
static const char __pyx_k_cannot_read_transducer_with_arcs[] = "cannot read transducer with arcs of type {0}";
static const char __pyx_k_comparison_not_implemented_for_S[] = "comparison not implemented for SymbolTable";
static const char __pyx_k_comparison_not_implemented_for_T[] = "comparison not implemented for TropicalWeight";
static const char __pyx_k_log_machines_currently_not_suppo[] = "log machines currently not supported";
static const char __pyx_k_potential_list_of_invalid_length[] = "potential list of invalid length";
static const char __pyx_k_self_table_cannot_be_converted_t[] = "self.table cannot be converted to a Python object for pickling";
static const char __pyx_k_transducer_is_not_input_determin[] = "transducer is not input deterministic";
static const char __pyx_k_transducer_symbol_tables_are_not[] = "transducer symbol tables are not compatible for composition";
static const char __pyx_k_transducers_must_use_shared_inpu[] = "transducers must use shared input symbol table";
static const char __pyx_k_transducers_must_use_shared_outp[] = "transducers must use shared output symbol table";
static const char __pyx_k_use_StdVectorFst_or_LogVectorFst[] = "use StdVectorFst or LogVectorFst to create a transducer";
static const char __pyx_k_comparison_not_implemented_for_S_2[] = "comparison not implemented for StdVectorFst";
static PyObject *__pyx_kp_s_C_Users_user_source_repos_openfs;
static PyObject *__pyx_kp_u_Cannot_convert_0_to_bytestring;
static PyObject *__pyx_kp_u_Cannot_convert_label_0_to_symbol;
static PyObject *__pyx_n_s_EPSILON;
static PyObject *__pyx_n_s_EPSILON_ID;
static PyObject *__pyx_n_s_Fst;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xd4;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_s_ONE;
static PyObject *__pyx_n_s_OSError;
static PyObject *__pyx_n_s_PIPE;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_Popen;
static PyObject *__pyx_n_u_ROOT;
static PyObject *__pyx_n_s_SEMIRING;
static PyObject *__pyx_n_s_StdArc;
static PyObject *__pyx_kp_u_StdArc_0_1_2_3;
static PyObject *__pyx_n_s_StdState;
static PyObject *__pyx_kp_u_StdState_0_with_1_arcs;
static PyObject *__pyx_n_s_StdState___iter;
static PyObject *__pyx_n_s_StdVectorFst;
static PyObject *__pyx_n_s_StdVectorFst___iter;
static PyObject *__pyx_n_s_StdVectorFst__visit;
static PyObject *__pyx_kp_u_StdVectorFst_with_0_states;
static PyObject *__pyx_n_s_SymbolTable;
static PyObject *__pyx_kp_u_SymbolTable_0;
static PyObject *__pyx_n_s_SymbolTable_items;
static PyObject *__pyx_kp_u_SymbolTable_of_size_0;
static PyObject *__pyx_n_s_TropicalWeight;
static PyObject *__pyx_kp_u_TropicalWeight_0;
static PyObject *__pyx_kp_u_Tsvg;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_u_Weight_needs_to_have_the_path_pr;
static PyObject *__pyx_n_s_ZERO;
static PyObject *__pyx_kp_u__3;
static PyObject *__pyx_n_u__32;
static PyObject *__pyx_n_s_acceptor;
static PyObject *__pyx_n_s_arc_type;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_u_ascii;
static PyObject *__pyx_kp_u_both_transducers_need_to_be_acce;
static PyObject *__pyx_kp_u_cannot_create_independent_arc;
static PyObject *__pyx_kp_u_cannot_create_independent_state;
static PyObject *__pyx_kp_u_cannot_find_the_dot_binary;
static PyObject *__pyx_kp_u_cannot_read_transducer_with_arcs;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_communicate;
static PyObject *__pyx_kp_u_comparison_not_implemented_for_S;
static PyObject *__pyx_kp_u_comparison_not_implemented_for_S_2;
static PyObject *__pyx_kp_u_comparison_not_implemented_for_T;
static PyObject *__pyx_n_s_compose;
static PyObject *__pyx_n_s_concatenate;
static PyObject *__pyx_n_s_concatenation;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_dest;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_difference;
static PyObject *__pyx_n_u_dot;
static PyObject *__pyx_n_s_draw;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_epsilon;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_final;
static PyObject *__pyx_n_s_find;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fst;
static PyObject *__pyx_n_s_fstream;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_header;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_ilabel;
static PyObject *__pyx_n_s_imap;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_kp_u_incompatible_symbol_tables;
static PyObject *__pyx_n_s_init_tables;
static PyObject *__pyx_n_s_input_deterministic;
static PyObject *__pyx_n_s_intersect;
static PyObject *__pyx_kp_u_invalid_desination_state_id_0_1;
static PyObject *__pyx_kp_u_invalid_source_state_id_0_1;
static PyObject *__pyx_n_s_invert;
static PyObject *__pyx_n_s_io;
static PyObject *__pyx_n_s_isyms;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_iter;
static PyObject *__pyx_n_s_keep_isyms;
static PyObject *__pyx_n_s_keep_osyms;
static PyObject *__pyx_n_s_label;
static PyObject *__pyx_n_s_label_fst_map;
static PyObject *__pyx_n_s_labels;
static PyObject *__pyx_n_b_log;
static PyObject *__pyx_kp_u_log_machines_currently_not_suppo;
static PyObject *__pyx_n_s_logprob_generate;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_len;
static PyObject *__pyx_n_s_merge;
static PyObject *__pyx_n_s_merge_tables;
static PyObject *__pyx_n_s_merged;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_n_path;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_nextstate;
static PyObject *__pyx_n_s_num_arcs_locals_genexpr;
static PyObject *__pyx_n_s_olabel;
static PyObject *__pyx_n_s_omap;
static PyObject *__pyx_n_s_openpyfst;
static PyObject *__pyx_n_s_osyms;
static PyObject *__pyx_n_s_other_symbol;
static PyObject *__pyx_n_s_other_value;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_plus;
static PyObject *__pyx_kp_u_potential_list_of_invalid_length;
static PyObject *__pyx_n_s_potentials;
static PyObject *__pyx_n_s_prefix;
static PyObject *__pyx_n_s_push;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle__Fst;
static PyObject *__pyx_n_s_randint;
static PyObject *__pyx_n_s_random;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_re;
static PyObject *__pyx_n_s_read;
static PyObject *__pyx_n_s_read_std;
static PyObject *__pyx_n_s_read_symbols;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_reverse;
static PyObject *__pyx_kp_s_self_arc_cannot_be_converted_to;
static PyObject *__pyx_kp_s_self_fst_cannot_be_converted_to;
static PyObject *__pyx_kp_s_self_table_cannot_be_converted_t;
static PyObject *__pyx_kp_s_self_weight_cannot_be_converted;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_set_closure;
static PyObject *__pyx_n_s_set_union;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_source;
static PyObject *__pyx_n_b_standard;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_kp_u_state_index_out_of_range;
static PyObject *__pyx_n_s_stateid;
static PyObject *__pyx_n_s_stderr;
static PyObject *__pyx_n_s_stdin;
static PyObject *__pyx_n_s_stdout;
static PyObject *__pyx_n_s_stream;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_subprocess;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_symbol;
static PyObject *__pyx_n_s_syms1;
static PyObject *__pyx_n_s_syms2;
static PyObject *__pyx_n_s_table;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_tosym;
static PyObject *__pyx_kp_u_transducer_is_not_input_determin;
static PyObject *__pyx_kp_u_transducer_symbol_tables_are_not;
static PyObject *__pyx_kp_u_transducers_must_use_shared_inpu;
static PyObject *__pyx_kp_u_transducers_must_use_shared_outp;
static PyObject *__pyx_n_s_uniform;
static PyObject *__pyx_n_s_uniform_generate;
static PyObject *__pyx_n_s_union;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_kp_u_use_StdVectorFst_or_LogVectorFst;
static PyObject *__pyx_n_u_utf8;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_visit;
static PyObject *__pyx_n_s_weight;
static PyObject *__pyx_n_s_weighted;
static PyObject *__pyx_n_s_weights;
static PyObject *__pyx_pf_9openpyfst_read(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_9openpyfst_2read_std(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_9openpyfst_4read_symbols(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename); /* proto */
static int __pyx_pf_9openpyfst_11SymbolTable___init__(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self, PyObject *__pyx_v_epsilon); /* proto */
static void __pyx_pf_9openpyfst_11SymbolTable_2__dealloc__(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_11SymbolTable_4copy(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_11SymbolTable_6__getitem__(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self, PyObject *__pyx_v_sym); /* proto */
static int __pyx_pf_9openpyfst_11SymbolTable_8__setitem__(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self, PyObject *__pyx_v_sym, long __pyx_v_key); /* proto */
static PyObject *__pyx_pf_9openpyfst_11SymbolTable_10write(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_9openpyfst_11SymbolTable_12find(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static int __pyx_pf_9openpyfst_11SymbolTable_14__contains__(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static Py_ssize_t __pyx_pf_9openpyfst_11SymbolTable_16__len__(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_11SymbolTable_18items(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_11SymbolTable_21__richcmp__(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_x, struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_y, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_9openpyfst_11SymbolTable_23__repr__(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_11SymbolTable_25merge(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_9openpyfst_11SymbolTable_27__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_11SymbolTable_29__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9openpyfst_6_merge_tables(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_syms1, struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_syms2, struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_merged); /* proto */
static int __pyx_pf_9openpyfst_4_Fst___init__(CYTHON_UNUSED struct __pyx_obj_9openpyfst__Fst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_4_Fst_2_repr_svg_(struct __pyx_obj_9openpyfst__Fst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_4_Fst_4__reduce_cython__(struct __pyx_obj_9openpyfst__Fst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_4_Fst_6__setstate_cython__(struct __pyx_obj_9openpyfst__Fst *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9openpyfst_14TropicalWeight___init__(struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static void __pyx_pf_9openpyfst_14TropicalWeight_2__dealloc__(struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_14TropicalWeight_4__float__(struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_14TropicalWeight_6__int__(struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_self); /* proto */
static int __pyx_pf_9openpyfst_14TropicalWeight_8__bool__(struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_14TropicalWeight_10__richcmp__(struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_x, struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_y, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_9openpyfst_14TropicalWeight_12approx_equal(struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_self, struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_9openpyfst_14TropicalWeight_14__add__(struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_x, struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_y); /* proto */
static PyObject *__pyx_pf_9openpyfst_14TropicalWeight_16__mul__(struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_x, struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_y); /* proto */
#if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
static PyObject *__pyx_pf_9openpyfst_14TropicalWeight_18__div__(struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_x, struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_y); /* proto */
#endif
static PyObject *__pyx_pf_9openpyfst_14TropicalWeight_20__repr__(struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_14TropicalWeight_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_14TropicalWeight_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9openpyfst_6StdArc___init__(CYTHON_UNUSED struct __pyx_obj_9openpyfst_StdArc *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_6StdArc_6ilabel___get__(struct __pyx_obj_9openpyfst_StdArc *__pyx_v_self); /* proto */
static int __pyx_pf_9openpyfst_6StdArc_6ilabel_2__set__(struct __pyx_obj_9openpyfst_StdArc *__pyx_v_self, int __pyx_v_ilabel); /* proto */
static PyObject *__pyx_pf_9openpyfst_6StdArc_6olabel___get__(struct __pyx_obj_9openpyfst_StdArc *__pyx_v_self); /* proto */
static int __pyx_pf_9openpyfst_6StdArc_6olabel_2__set__(struct __pyx_obj_9openpyfst_StdArc *__pyx_v_self, int __pyx_v_olabel); /* proto */
static PyObject *__pyx_pf_9openpyfst_6StdArc_9nextstate___get__(struct __pyx_obj_9openpyfst_StdArc *__pyx_v_self); /* proto */
static int __pyx_pf_9openpyfst_6StdArc_9nextstate_2__set__(struct __pyx_obj_9openpyfst_StdArc *__pyx_v_self, int __pyx_v_nextstate); /* proto */
static PyObject *__pyx_pf_9openpyfst_6StdArc_6weight___get__(struct __pyx_obj_9openpyfst_StdArc *__pyx_v_self); /* proto */
static int __pyx_pf_9openpyfst_6StdArc_6weight_2__set__(struct __pyx_obj_9openpyfst_StdArc *__pyx_v_self, struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_weight); /* proto */
static PyObject *__pyx_pf_9openpyfst_6StdArc_2__repr__(struct __pyx_obj_9openpyfst_StdArc *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_6StdArc_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9openpyfst_StdArc *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_6StdArc_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9openpyfst_StdArc *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9openpyfst_8StdState___init__(CYTHON_UNUSED struct __pyx_obj_9openpyfst_StdState *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_9openpyfst_8StdState_2__len__(struct __pyx_obj_9openpyfst_StdState *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_8StdState_4__iter__(struct __pyx_obj_9openpyfst_StdState *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_8StdState_4arcs___get__(struct __pyx_obj_9openpyfst_StdState *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_8StdState_5final___get__(struct __pyx_obj_9openpyfst_StdState *__pyx_v_self); /* proto */
static int __pyx_pf_9openpyfst_8StdState_5final_2__set__(struct __pyx_obj_9openpyfst_StdState *__pyx_v_self, PyObject *__pyx_v_weight); /* proto */
static PyObject *__pyx_pf_9openpyfst_8StdState_7initial___get__(struct __pyx_obj_9openpyfst_StdState *__pyx_v_self); /* proto */
static int __pyx_pf_9openpyfst_8StdState_7initial_2__set__(struct __pyx_obj_9openpyfst_StdState *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_9openpyfst_8StdState_7__repr__(struct __pyx_obj_9openpyfst_StdState *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_8StdState_7stateid___get__(struct __pyx_obj_9openpyfst_StdState *__pyx_v_self); /* proto */
static int __pyx_pf_9openpyfst_8StdState_7stateid_2__set__(struct __pyx_obj_9openpyfst_StdState *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9openpyfst_8StdState_9__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9openpyfst_StdState *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_8StdState_11__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9openpyfst_StdState *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9openpyfst_12StdVectorFst___init__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_source, PyObject *__pyx_v_isyms, PyObject *__pyx_v_osyms); /* proto */
static void __pyx_pf_9openpyfst_12StdVectorFst_2__dealloc__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_4_init_tables(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_9openpyfst_12StdVectorFst_6__len__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_8num_arcs_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_8num_arcs(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_10__repr__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_12copy(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_14__getitem__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, int __pyx_v_stateid); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_16__iter__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_6states___get__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_5start___get__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static int __pyx_pf_9openpyfst_12StdVectorFst_5start_2__set__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, int __pyx_v_start); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_19add_arc(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, int __pyx_v_source, int __pyx_v_dest, int __pyx_v_ilabel, int __pyx_v_olabel, PyObject *__pyx_v_weight); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_21add_state(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_23__richcmp__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_x, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_y, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_25write(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_keep_isyms, PyObject *__pyx_v_keep_osyms); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_19input_deterministic___get__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_20output_deterministic___get__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_8acceptor___get__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_27determinize(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_29compose(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_31__rshift__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_x, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_y); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_33intersect(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_35__and__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_x, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_y); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_37set_union(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_39union(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_41__or__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_x, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_y); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_43concatenate(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_45concatenation(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_47__add__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_x, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_y); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_49difference(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_51__sub__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_x, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_y); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_53set_closure(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_plus); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_55closure(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_57closure_plus(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_59invert(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_61inverse(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_63reverse(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_65shortest_distance(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, int __pyx_v_reverse); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_67shortest_path(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, unsigned int __pyx_v_n); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_69push(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_final, PyObject *__pyx_v_weights, PyObject *__pyx_v_labels); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_71push_weights(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_final); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_73push_labels(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_final); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_75reweight(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_potentials, PyObject *__pyx_v_final); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_77minimize(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_79arc_sort_input(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_81arc_sort_output(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_83top_sort(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_85project_input(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_87project_output(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_89remove_epsilon(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_91_tosym(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_label, PyObject *__pyx_v_io); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_93relabel(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_imap, PyObject *__pyx_v_omap); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_95prune(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_threshold); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_97connect(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_99plus_map(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_101times_map(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_103remove_weights(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_105invert_weights(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_107replace(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_label_fst_map, PyObject *__pyx_v_epsilon); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_109random_generate(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_n_path, PyObject *__pyx_v_max_len, PyObject *__pyx_v_uniform, PyObject *__pyx_v_weighted); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_111logprob_generate(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_n_path, PyObject *__pyx_v_max_len, PyObject *__pyx_v_weighted); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_113uniform_generate(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_n_path, PyObject *__pyx_v_max_len, PyObject *__pyx_v_weighted); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_115_visit(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, int __pyx_v_stateid, PyObject *__pyx_v_prefix); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_118paths(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_5isyms___get__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static int __pyx_pf_9openpyfst_12StdVectorFst_5isyms_2__set__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9openpyfst_12StdVectorFst_5isyms_4__del__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_5osyms___get__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static int __pyx_pf_9openpyfst_12StdVectorFst_5osyms_2__set__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_9openpyfst_12StdVectorFst_5osyms_4__del__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_120__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_122__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9openpyfst_8__pyx_unpickle__Fst(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_9openpyfst_SymbolTable(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9openpyfst__Fst(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9openpyfst_TropicalWeight(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9openpyfst_StdArc(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9openpyfst_StdState(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9openpyfst_StdVectorFst(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9openpyfst___pyx_scope_struct__items(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9openpyfst___pyx_scope_struct_1___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9openpyfst___pyx_scope_struct_2_num_arcs(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9openpyfst___pyx_scope_struct_3_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9openpyfst___pyx_scope_struct_4___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9openpyfst___pyx_scope_struct_5__visit(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_222419149;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_k__2;
static PyObject *__pyx_k__28;
static PyObject *__pyx_k__29;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_codeobj__34;
static PyObject *__pyx_codeobj__36;
static PyObject *__pyx_codeobj__38;
static PyObject *__pyx_codeobj__40;
static PyObject *__pyx_codeobj__44;
/* Late includes */

/* "openpyfst.pyx":21
 * EPSILON = u'\u03b5'
 * 
 * cdef bytes as_str(data):             # <<<<<<<<<<<<<<
 *     if isinstance(data, bytes):
 *         return data
 */

static PyObject *__pyx_f_9openpyfst_as_str(PyObject *__pyx_v_data) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("as_str", 0);

  /* "openpyfst.pyx":22
 * 
 * cdef bytes as_str(data):
 *     if isinstance(data, bytes):             # <<<<<<<<<<<<<<
 *         return data
 *     elif isinstance(data, unicode):
 */
  __pyx_t_1 = PyBytes_Check(__pyx_v_data); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "openpyfst.pyx":23
 * cdef bytes as_str(data):
 *     if isinstance(data, bytes):
 *         return data             # <<<<<<<<<<<<<<
 *     elif isinstance(data, unicode):
 *         return data.encode('utf8')
 */
    __Pyx_XDECREF(__pyx_r);
    if (!(likely(PyBytes_CheckExact(__pyx_v_data))||((__pyx_v_data) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_data)->tp_name), 0))) __PYX_ERR(0, 23, __pyx_L1_error)
    __Pyx_INCREF(__pyx_v_data);
    __pyx_r = ((PyObject*)__pyx_v_data);
    goto __pyx_L0;

    /* "openpyfst.pyx":22
 * 
 * cdef bytes as_str(data):
 *     if isinstance(data, bytes):             # <<<<<<<<<<<<<<
 *         return data
 *     elif isinstance(data, unicode):
 */
  }

  /* "openpyfst.pyx":24
 *     if isinstance(data, bytes):
 *         return data
 *     elif isinstance(data, unicode):             # <<<<<<<<<<<<<<
 *         return data.encode('utf8')
 *     raise TypeError('Cannot convert {0} to bytestring'.format(type(data)))
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_data); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "openpyfst.pyx":25
 *         return data
 *     elif isinstance(data, unicode):
 *         return data.encode('utf8')             # <<<<<<<<<<<<<<
 *     raise TypeError('Cannot convert {0} to bytestring'.format(type(data)))
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_data, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 25, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_n_u_utf8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_n_u_utf8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 25, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 25, __pyx_L1_error)
    __pyx_r = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "openpyfst.pyx":24
 *     if isinstance(data, bytes):
 *         return data
 *     elif isinstance(data, unicode):             # <<<<<<<<<<<<<<
 *         return data.encode('utf8')
 *     raise TypeError('Cannot convert {0} to bytestring'.format(type(data)))
 */
  }

  /* "openpyfst.pyx":26
 *     elif isinstance(data, unicode):
 *         return data.encode('utf8')
 *     raise TypeError('Cannot convert {0} to bytestring'.format(type(data)))             # <<<<<<<<<<<<<<
 * 
 * def read(filename):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Cannot_convert_0_to_bytestring, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, ((PyObject *)Py_TYPE(__pyx_v_data))) : __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)Py_TYPE(__pyx_v_data)));
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(0, 26, __pyx_L1_error)

  /* "openpyfst.pyx":21
 * EPSILON = u'\u03b5'
 * 
 * cdef bytes as_str(data):             # <<<<<<<<<<<<<<
 *     if isinstance(data, bytes):
 *         return data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("openpyfst.as_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":28
 *     raise TypeError('Cannot convert {0} to bytestring'.format(type(data)))
 * 
 * def read(filename):             # <<<<<<<<<<<<<<
 *     """read(filename) -> transducer read from the binary file
 *     Detect arc type (LogArc or TropicalArc) and produce specific transducer."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_1read(PyObject *__pyx_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_9openpyfst_read[] = "read(filename) -> transducer read from the binary file\n    Detect arc type (LogArc or TropicalArc) and produce specific transducer.";
static PyMethodDef __pyx_mdef_9openpyfst_1read = {"read", (PyCFunction)__pyx_pw_9openpyfst_1read, METH_O, __pyx_doc_9openpyfst_read};
static PyObject *__pyx_pw_9openpyfst_1read(PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_read(__pyx_self, ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_read(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  std::ifstream *__pyx_v_stream;
  fst::FstHeader __pyx_v_header;
  PyObject *__pyx_v_arc_type = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  std::string __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("read", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "openpyfst.pyx":31
 *     """read(filename) -> transducer read from the binary file
 *     Detect arc type (LogArc or TropicalArc) and produce specific transducer."""
 *     filename = as_str(filename)             # <<<<<<<<<<<<<<
 *     cdef ifstream* stream = new ifstream(filename)
 *     cdef openfst.FstHeader header
 */
  __pyx_t_1 = __pyx_f_9openpyfst_as_str(__pyx_v_filename); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "openpyfst.pyx":32
 *     Detect arc type (LogArc or TropicalArc) and produce specific transducer."""
 *     filename = as_str(filename)
 *     cdef ifstream* stream = new ifstream(filename)             # <<<<<<<<<<<<<<
 *     cdef openfst.FstHeader header
 *     header.Read(stream[0], filename)
 */
  __pyx_t_2 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 32, __pyx_L1_error)
  __pyx_v_stream = new std::ifstream(__pyx_t_2);

  /* "openpyfst.pyx":34
 *     cdef ifstream* stream = new ifstream(filename)
 *     cdef openfst.FstHeader header
 *     header.Read(stream[0], filename)             # <<<<<<<<<<<<<<
 *     cdef bytes arc_type = header.ArcType()
 *     del stream
 */
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_v_filename); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 34, __pyx_L1_error)
  __pyx_v_header.Read((__pyx_v_stream[0]), __pyx_t_3);

  /* "openpyfst.pyx":35
 *     cdef openfst.FstHeader header
 *     header.Read(stream[0], filename)
 *     cdef bytes arc_type = header.ArcType()             # <<<<<<<<<<<<<<
 *     del stream
 *     if arc_type == b'standard':
 */
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_header.ArcType()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_arc_type = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "openpyfst.pyx":36
 *     header.Read(stream[0], filename)
 *     cdef bytes arc_type = header.ArcType()
 *     del stream             # <<<<<<<<<<<<<<
 *     if arc_type == b'standard':
 *         return read_std(filename)
 */
  delete __pyx_v_stream;

  /* "openpyfst.pyx":37
 *     cdef bytes arc_type = header.ArcType()
 *     del stream
 *     if arc_type == b'standard':             # <<<<<<<<<<<<<<
 *         return read_std(filename)
 *     elif arc_type == b'log':
 */
  __pyx_t_4 = (__Pyx_PyBytes_Equals(__pyx_v_arc_type, __pyx_n_b_standard, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 37, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "openpyfst.pyx":38
 *     del stream
 *     if arc_type == b'standard':
 *         return read_std(filename)             # <<<<<<<<<<<<<<
 *     elif arc_type == b'log':
 *         # return read_log(filename)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_read_std); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_filename) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_filename);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "openpyfst.pyx":37
 *     cdef bytes arc_type = header.ArcType()
 *     del stream
 *     if arc_type == b'standard':             # <<<<<<<<<<<<<<
 *         return read_std(filename)
 *     elif arc_type == b'log':
 */
  }

  /* "openpyfst.pyx":39
 *     if arc_type == b'standard':
 *         return read_std(filename)
 *     elif arc_type == b'log':             # <<<<<<<<<<<<<<
 *         # return read_log(filename)
 *         raise TypeError('log machines currently not supported')
 */
  __pyx_t_5 = (__Pyx_PyBytes_Equals(__pyx_v_arc_type, __pyx_n_b_log, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 39, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (unlikely(__pyx_t_4)) {

    /* "openpyfst.pyx":41
 *     elif arc_type == b'log':
 *         # return read_log(filename)
 *         raise TypeError('log machines currently not supported')             # <<<<<<<<<<<<<<
 *     raise TypeError('cannot read transducer with arcs of type {0}'.format(arc_type))
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 41, __pyx_L1_error)

    /* "openpyfst.pyx":39
 *     if arc_type == b'standard':
 *         return read_std(filename)
 *     elif arc_type == b'log':             # <<<<<<<<<<<<<<
 *         # return read_log(filename)
 *         raise TypeError('log machines currently not supported')
 */
  }

  /* "openpyfst.pyx":42
 *         # return read_log(filename)
 *         raise TypeError('log machines currently not supported')
 *     raise TypeError('cannot read transducer with arcs of type {0}'.format(arc_type))             # <<<<<<<<<<<<<<
 * 
 * def read_std(filename):
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_cannot_read_transducer_with_arcs, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_arc_type) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_arc_type);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_6, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __PYX_ERR(0, 42, __pyx_L1_error)

  /* "openpyfst.pyx":28
 *     raise TypeError('Cannot convert {0} to bytestring'.format(type(data)))
 * 
 * def read(filename):             # <<<<<<<<<<<<<<
 *     """read(filename) -> transducer read from the binary file
 *     Detect arc type (LogArc or TropicalArc) and produce specific transducer."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("openpyfst.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_arc_type);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":44
 *     raise TypeError('cannot read transducer with arcs of type {0}'.format(arc_type))
 * 
 * def read_std(filename):             # <<<<<<<<<<<<<<
 *     """read_std(filename) -> StdVectorFst read from the binary file"""
 *     cdef StdVectorFst fst = StdVectorFst.__new__(StdVectorFst)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_3read_std(PyObject *__pyx_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_9openpyfst_2read_std[] = "read_std(filename) -> StdVectorFst read from the binary file";
static PyMethodDef __pyx_mdef_9openpyfst_3read_std = {"read_std", (PyCFunction)__pyx_pw_9openpyfst_3read_std, METH_O, __pyx_doc_9openpyfst_2read_std};
static PyObject *__pyx_pw_9openpyfst_3read_std(PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_std (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_2read_std(__pyx_self, ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_2read_std(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_fst = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("read_std", 0);

  /* "openpyfst.pyx":46
 * def read_std(filename):
 *     """read_std(filename) -> StdVectorFst read from the binary file"""
 *     cdef StdVectorFst fst = StdVectorFst.__new__(StdVectorFst)             # <<<<<<<<<<<<<<
 *     fst.fst = openfst.StdVectorFstRead(as_str(filename))
 *     fst._init_tables()
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_9openpyfst_StdVectorFst(((PyTypeObject *)__pyx_ptype_9openpyfst_StdVectorFst), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_fst = ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "openpyfst.pyx":47
 *     """read_std(filename) -> StdVectorFst read from the binary file"""
 *     cdef StdVectorFst fst = StdVectorFst.__new__(StdVectorFst)
 *     fst.fst = openfst.StdVectorFstRead(as_str(filename))             # <<<<<<<<<<<<<<
 *     fst._init_tables()
 *     return fst
 */
  __pyx_t_1 = __pyx_f_9openpyfst_as_str(__pyx_v_filename); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_fst->fst = fst::StdVectorFst::Read(__pyx_t_2);

  /* "openpyfst.pyx":48
 *     cdef StdVectorFst fst = StdVectorFst.__new__(StdVectorFst)
 *     fst.fst = openfst.StdVectorFstRead(as_str(filename))
 *     fst._init_tables()             # <<<<<<<<<<<<<<
 *     return fst
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_fst), __pyx_n_s_init_tables); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openpyfst.pyx":49
 *     fst.fst = openfst.StdVectorFstRead(as_str(filename))
 *     fst._init_tables()
 *     return fst             # <<<<<<<<<<<<<<
 * 
 * #def read_log(filename):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_fst));
  __pyx_r = ((PyObject *)__pyx_v_fst);
  goto __pyx_L0;

  /* "openpyfst.pyx":44
 *     raise TypeError('cannot read transducer with arcs of type {0}'.format(arc_type))
 * 
 * def read_std(filename):             # <<<<<<<<<<<<<<
 *     """read_std(filename) -> StdVectorFst read from the binary file"""
 *     cdef StdVectorFst fst = StdVectorFst.__new__(StdVectorFst)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("openpyfst.read_std", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_fst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":58
 * #    return fst
 * 
 * def read_symbols(filename):             # <<<<<<<<<<<<<<
 *     """read_symbols(filename) -> SymbolTable read from the binary file"""
 *     filename = as_str(filename)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_5read_symbols(PyObject *__pyx_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_9openpyfst_4read_symbols[] = "read_symbols(filename) -> SymbolTable read from the binary file";
static PyMethodDef __pyx_mdef_9openpyfst_5read_symbols = {"read_symbols", (PyCFunction)__pyx_pw_9openpyfst_5read_symbols, METH_O, __pyx_doc_9openpyfst_4read_symbols};
static PyObject *__pyx_pw_9openpyfst_5read_symbols(PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_symbols (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_4read_symbols(__pyx_self, ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_4read_symbols(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  std::ifstream *__pyx_v_fstream;
  struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_table = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  std::string __pyx_t_3;
  __Pyx_RefNannySetupContext("read_symbols", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "openpyfst.pyx":60
 * def read_symbols(filename):
 *     """read_symbols(filename) -> SymbolTable read from the binary file"""
 *     filename = as_str(filename)             # <<<<<<<<<<<<<<
 *     cdef ifstream* fstream = new ifstream(filename)
 *     cdef SymbolTable table = SymbolTable.__new__(SymbolTable)
 */
  __pyx_t_1 = __pyx_f_9openpyfst_as_str(__pyx_v_filename); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "openpyfst.pyx":61
 *     """read_symbols(filename) -> SymbolTable read from the binary file"""
 *     filename = as_str(filename)
 *     cdef ifstream* fstream = new ifstream(filename)             # <<<<<<<<<<<<<<
 *     cdef SymbolTable table = SymbolTable.__new__(SymbolTable)
 *     table.table = sym.SymbolTableRead(fstream[0], filename)
 */
  __pyx_t_2 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 61, __pyx_L1_error)
  __pyx_v_fstream = new std::ifstream(__pyx_t_2);

  /* "openpyfst.pyx":62
 *     filename = as_str(filename)
 *     cdef ifstream* fstream = new ifstream(filename)
 *     cdef SymbolTable table = SymbolTable.__new__(SymbolTable)             # <<<<<<<<<<<<<<
 *     table.table = sym.SymbolTableRead(fstream[0], filename)
 *     del fstream
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_9openpyfst_SymbolTable(((PyTypeObject *)__pyx_ptype_9openpyfst_SymbolTable), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_table = ((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "openpyfst.pyx":63
 *     cdef ifstream* fstream = new ifstream(filename)
 *     cdef SymbolTable table = SymbolTable.__new__(SymbolTable)
 *     table.table = sym.SymbolTableRead(fstream[0], filename)             # <<<<<<<<<<<<<<
 *     del fstream
 *     return table
 */
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_v_filename); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 63, __pyx_L1_error)
  __pyx_v_table->table = fst::SymbolTable::Read((__pyx_v_fstream[0]), __pyx_t_3);

  /* "openpyfst.pyx":64
 *     cdef SymbolTable table = SymbolTable.__new__(SymbolTable)
 *     table.table = sym.SymbolTableRead(fstream[0], filename)
 *     del fstream             # <<<<<<<<<<<<<<
 *     return table
 * 
 */
  delete __pyx_v_fstream;

  /* "openpyfst.pyx":65
 *     table.table = sym.SymbolTableRead(fstream[0], filename)
 *     del fstream
 *     return table             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_table));
  __pyx_r = ((PyObject *)__pyx_v_table);
  goto __pyx_L0;

  /* "openpyfst.pyx":58
 * #    return fst
 * 
 * def read_symbols(filename):             # <<<<<<<<<<<<<<
 *     """read_symbols(filename) -> SymbolTable read from the binary file"""
 *     filename = as_str(filename)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.read_symbols", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_table);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":71
 *     cdef sym.SymbolTable* table
 * 
 *     def __init__(self, epsilon=EPSILON):             # <<<<<<<<<<<<<<
 *         """SymbolTable() -> new symbol table with \u03b5 <-> 0
 *         SymbolTable(epsilon) -> new symbol table with epsilon <-> 0"""
 */

/* Python wrapper */
static int __pyx_pw_9openpyfst_11SymbolTable_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openpyfst_11SymbolTable___init__[] = "SymbolTable() -> new symbol table with \316\265 <-> 0\n        SymbolTable(epsilon) -> new symbol table with epsilon <-> 0";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_9openpyfst_11SymbolTable___init__;
#endif
static int __pyx_pw_9openpyfst_11SymbolTable_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_epsilon = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_epsilon,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k__2;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_epsilon);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 71, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_epsilon = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 71, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.SymbolTable.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_11SymbolTable___init__(((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_v_self), __pyx_v_epsilon);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9openpyfst_11SymbolTable___init__(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self, PyObject *__pyx_v_epsilon) {
  PyObject *__pyx_v_name = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "openpyfst.pyx":74
 *         """SymbolTable() -> new symbol table with \u03b5 <-> 0
 *         SymbolTable(epsilon) -> new symbol table with epsilon <-> 0"""
 *         cdef bytes name = 'SymbolTable<{0}>'.format(id(self)).encode('ascii')             # <<<<<<<<<<<<<<
 *         self.table = new sym.SymbolTable(<string> name)
 *         assert (self[epsilon] == EPSILON_ID)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_SymbolTable_0, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_n_u_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_n_u_ascii);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 74, __pyx_L1_error)
  __pyx_v_name = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "openpyfst.pyx":75
 *         SymbolTable(epsilon) -> new symbol table with epsilon <-> 0"""
 *         cdef bytes name = 'SymbolTable<{0}>'.format(id(self)).encode('ascii')
 *         self.table = new sym.SymbolTable(<string> name)             # <<<<<<<<<<<<<<
 *         assert (self[epsilon] == EPSILON_ID)
 * 
 */
  __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 75, __pyx_L1_error)
  __pyx_v_self->table = new fst::SymbolTable(((std::string)__pyx_t_6));

  /* "openpyfst.pyx":76
 *         cdef bytes name = 'SymbolTable<{0}>'.format(id(self)).encode('ascii')
 *         self.table = new sym.SymbolTable(<string> name)
 *         assert (self[epsilon] == EPSILON_ID)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_epsilon); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_EPSILON_ID); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 76, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 76, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_7)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 76, __pyx_L1_error)
    }
  }
  #endif

  /* "openpyfst.pyx":71
 *     cdef sym.SymbolTable* table
 * 
 *     def __init__(self, epsilon=EPSILON):             # <<<<<<<<<<<<<<
 *         """SymbolTable() -> new symbol table with \u03b5 <-> 0
 *         SymbolTable(epsilon) -> new symbol table with epsilon <-> 0"""
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("openpyfst.SymbolTable.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":78
 *         assert (self[epsilon] == EPSILON_ID)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.table
 * 
 */

/* Python wrapper */
static void __pyx_pw_9openpyfst_11SymbolTable_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9openpyfst_11SymbolTable_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_9openpyfst_11SymbolTable_2__dealloc__(((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9openpyfst_11SymbolTable_2__dealloc__(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "openpyfst.pyx":79
 * 
 *     def __dealloc__(self):
 *         del self.table             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  delete __pyx_v_self->table;

  /* "openpyfst.pyx":78
 *         assert (self[epsilon] == EPSILON_ID)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.table
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "openpyfst.pyx":81
 *         del self.table
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """table.copy() -> copy of the symbol table"""
 *         cdef SymbolTable result = SymbolTable.__new__(SymbolTable)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_11SymbolTable_5copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9openpyfst_11SymbolTable_4copy[] = "table.copy() -> copy of the symbol table";
static PyObject *__pyx_pw_9openpyfst_11SymbolTable_5copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_11SymbolTable_4copy(((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_11SymbolTable_4copy(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self) {
  struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "openpyfst.pyx":83
 *     def copy(self):
 *         """table.copy() -> copy of the symbol table"""
 *         cdef SymbolTable result = SymbolTable.__new__(SymbolTable)             # <<<<<<<<<<<<<<
 *         result.table = new sym.SymbolTable(self.table[0])
 *         return result
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_9openpyfst_SymbolTable(((PyTypeObject *)__pyx_ptype_9openpyfst_SymbolTable), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_result = ((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "openpyfst.pyx":84
 *         """table.copy() -> copy of the symbol table"""
 *         cdef SymbolTable result = SymbolTable.__new__(SymbolTable)
 *         result.table = new sym.SymbolTable(self.table[0])             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_v_result->table = new fst::SymbolTable((__pyx_v_self->table[0]));

  /* "openpyfst.pyx":85
 *         cdef SymbolTable result = SymbolTable.__new__(SymbolTable)
 *         result.table = new sym.SymbolTable(self.table[0])
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, sym):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "openpyfst.pyx":81
 *         del self.table
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """table.copy() -> copy of the symbol table"""
 *         cdef SymbolTable result = SymbolTable.__new__(SymbolTable)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.SymbolTable.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":87
 *         return result
 * 
 *     def __getitem__(self, sym):             # <<<<<<<<<<<<<<
 *         return self.table.AddSymbol(as_str(sym))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_11SymbolTable_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_sym); /*proto*/
static PyObject *__pyx_pw_9openpyfst_11SymbolTable_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_sym) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_11SymbolTable_6__getitem__(((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_v_self), ((PyObject *)__pyx_v_sym));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_11SymbolTable_6__getitem__(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self, PyObject *__pyx_v_sym) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "openpyfst.pyx":88
 * 
 *     def __getitem__(self, sym):
 *         return self.table.AddSymbol(as_str(sym))             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, sym, long key):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9openpyfst_as_str(__pyx_v_sym); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->table->AddSymbol(__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":87
 *         return result
 * 
 *     def __getitem__(self, sym):             # <<<<<<<<<<<<<<
 *         return self.table.AddSymbol(as_str(sym))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.SymbolTable.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":90
 *         return self.table.AddSymbol(as_str(sym))
 * 
 *     def __setitem__(self, sym, long key):             # <<<<<<<<<<<<<<
 *         self.table.AddSymbol(as_str(sym), key)
 * 
 */

/* Python wrapper */
static int __pyx_pw_9openpyfst_11SymbolTable_9__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_sym, PyObject *__pyx_arg_key); /*proto*/
static int __pyx_pw_9openpyfst_11SymbolTable_9__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_sym, PyObject *__pyx_arg_key) {
  long __pyx_v_key;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  assert(__pyx_arg_key); {
    __pyx_v_key = __Pyx_PyInt_As_long(__pyx_arg_key); if (unlikely((__pyx_v_key == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 90, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.SymbolTable.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_11SymbolTable_8__setitem__(((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_v_self), ((PyObject *)__pyx_v_sym), ((long)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9openpyfst_11SymbolTable_8__setitem__(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self, PyObject *__pyx_v_sym, long __pyx_v_key) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "openpyfst.pyx":91
 * 
 *     def __setitem__(self, sym, long key):
 *         self.table.AddSymbol(as_str(sym), key)             # <<<<<<<<<<<<<<
 * 
 *     def write(self, filename):
 */
  __pyx_t_1 = __pyx_f_9openpyfst_as_str(__pyx_v_sym); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (void)(__pyx_v_self->table->AddSymbol(__pyx_t_2, __pyx_v_key));

  /* "openpyfst.pyx":90
 *         return self.table.AddSymbol(as_str(sym))
 * 
 *     def __setitem__(self, sym, long key):             # <<<<<<<<<<<<<<
 *         self.table.AddSymbol(as_str(sym), key)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.SymbolTable.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":93
 *         self.table.AddSymbol(as_str(sym), key)
 * 
 *     def write(self, filename):             # <<<<<<<<<<<<<<
 *         """table.write(filename): save the symbol table to filename"""
 *         self.table.Write(as_str(filename))
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_11SymbolTable_11write(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_9openpyfst_11SymbolTable_10write[] = "table.write(filename): save the symbol table to filename";
static PyObject *__pyx_pw_9openpyfst_11SymbolTable_11write(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_11SymbolTable_10write(((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_11SymbolTable_10write(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  __Pyx_RefNannySetupContext("write", 0);

  /* "openpyfst.pyx":95
 *     def write(self, filename):
 *         """table.write(filename): save the symbol table to filename"""
 *         self.table.Write(as_str(filename))             # <<<<<<<<<<<<<<
 * 
 *     def find(self, key):
 */
  __pyx_t_1 = __pyx_f_9openpyfst_as_str(__pyx_v_filename); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (void)(__pyx_v_self->table->Write(__pyx_t_2));

  /* "openpyfst.pyx":93
 *         self.table.AddSymbol(as_str(sym), key)
 * 
 *     def write(self, filename):             # <<<<<<<<<<<<<<
 *         """table.write(filename): save the symbol table to filename"""
 *         self.table.Write(as_str(filename))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.SymbolTable.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":97
 *         self.table.Write(as_str(filename))
 * 
 *     def find(self, key):             # <<<<<<<<<<<<<<
 *         """table.find(int value) -> decoded symbol if any symbol maps to this value
 *         table.find(str symbol) -> encoded value if this symbol is in the table"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_11SymbolTable_13find(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static char __pyx_doc_9openpyfst_11SymbolTable_12find[] = "table.find(int value) -> decoded symbol if any symbol maps to this value\n        table.find(str symbol) -> encoded value if this symbol is in the table";
static PyObject *__pyx_pw_9openpyfst_11SymbolTable_13find(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_11SymbolTable_12find(((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_11SymbolTable_12find(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  __Pyx_RefNannySetupContext("find", 0);
  __Pyx_INCREF(__pyx_v_key);

  /* "openpyfst.pyx":100
 *         """table.find(int value) -> decoded symbol if any symbol maps to this value
 *         table.find(str symbol) -> encoded value if this symbol is in the table"""
 *         if isinstance(key, (int, long)):             # <<<<<<<<<<<<<<
 *             result = self.table.Find(<long> key).decode('utf8')
 *             if result == u'':
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_key); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyLong_Check(__pyx_v_key); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "openpyfst.pyx":101
 *         table.find(str symbol) -> encoded value if this symbol is in the table"""
 *         if isinstance(key, (int, long)):
 *             result = self.table.Find(<long> key).decode('utf8')             # <<<<<<<<<<<<<<
 *             if result == u'':
 *                 raise KeyError(key)
 */
    __pyx_t_4 = __Pyx_PyInt_As_long(__pyx_v_key); if (unlikely((__pyx_t_4 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 101, __pyx_L1_error)
    __pyx_t_5 = __Pyx_decode_cpp_string(__pyx_v_self->table->Find(((long)__pyx_t_4)), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_result = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "openpyfst.pyx":102
 *         if isinstance(key, (int, long)):
 *             result = self.table.Find(<long> key).decode('utf8')
 *             if result == u'':             # <<<<<<<<<<<<<<
 *                 raise KeyError(key)
 *             return result
 */
    __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_result, __pyx_kp_u__3, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 102, __pyx_L1_error)
    if (unlikely(__pyx_t_2)) {

      /* "openpyfst.pyx":103
 *             result = self.table.Find(<long> key).decode('utf8')
 *             if result == u'':
 *                 raise KeyError(key)             # <<<<<<<<<<<<<<
 *             return result
 *         else:
 */
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_v_key); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 103, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(0, 103, __pyx_L1_error)

      /* "openpyfst.pyx":102
 *         if isinstance(key, (int, long)):
 *             result = self.table.Find(<long> key).decode('utf8')
 *             if result == u'':             # <<<<<<<<<<<<<<
 *                 raise KeyError(key)
 *             return result
 */
    }

    /* "openpyfst.pyx":104
 *             if result == u'':
 *                 raise KeyError(key)
 *             return result             # <<<<<<<<<<<<<<
 *         else:
 *             key = as_str(key)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_result);
    __pyx_r = __pyx_v_result;
    goto __pyx_L0;

    /* "openpyfst.pyx":100
 *         """table.find(int value) -> decoded symbol if any symbol maps to this value
 *         table.find(str symbol) -> encoded value if this symbol is in the table"""
 *         if isinstance(key, (int, long)):             # <<<<<<<<<<<<<<
 *             result = self.table.Find(<long> key).decode('utf8')
 *             if result == u'':
 */
  }

  /* "openpyfst.pyx":106
 *             return result
 *         else:
 *             key = as_str(key)             # <<<<<<<<<<<<<<
 *             result = self.table.Find(<char*>key)
 *             if result == -1:
 */
  /*else*/ {
    __pyx_t_5 = __pyx_f_9openpyfst_as_str(__pyx_v_key); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "openpyfst.pyx":107
 *         else:
 *             key = as_str(key)
 *             result = self.table.Find(<char*>key)             # <<<<<<<<<<<<<<
 *             if result == -1:
 *                 raise KeyError(key)
 */
    __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_key); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 107, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_self->table->Find(((char *)__pyx_t_6))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_result = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "openpyfst.pyx":108
 *             key = as_str(key)
 *             result = self.table.Find(<char*>key)
 *             if result == -1:             # <<<<<<<<<<<<<<
 *                 raise KeyError(key)
 *             return result
 */
    __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_v_result, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 108, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_t_2)) {

      /* "openpyfst.pyx":109
 *             result = self.table.Find(<char*>key)
 *             if result == -1:
 *                 raise KeyError(key)             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_v_key); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(0, 109, __pyx_L1_error)

      /* "openpyfst.pyx":108
 *             key = as_str(key)
 *             result = self.table.Find(<char*>key)
 *             if result == -1:             # <<<<<<<<<<<<<<
 *                 raise KeyError(key)
 *             return result
 */
    }

    /* "openpyfst.pyx":110
 *             if result == -1:
 *                 raise KeyError(key)
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     def __contains__(self, key):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_result);
    __pyx_r = __pyx_v_result;
    goto __pyx_L0;
  }

  /* "openpyfst.pyx":97
 *         self.table.Write(as_str(filename))
 * 
 *     def find(self, key):             # <<<<<<<<<<<<<<
 *         """table.find(int value) -> decoded symbol if any symbol maps to this value
 *         table.find(str symbol) -> encoded value if this symbol is in the table"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("openpyfst.SymbolTable.find", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":112
 *             return result
 * 
 *     def __contains__(self, key):             # <<<<<<<<<<<<<<
 *         key = as_str(key)
 *         return (self.table.Find(<char*>key) != -1)
 */

/* Python wrapper */
static int __pyx_pw_9openpyfst_11SymbolTable_15__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static int __pyx_pw_9openpyfst_11SymbolTable_15__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_11SymbolTable_14__contains__(((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9openpyfst_11SymbolTable_14__contains__(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self, PyObject *__pyx_v_key) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  __Pyx_RefNannySetupContext("__contains__", 0);
  __Pyx_INCREF(__pyx_v_key);

  /* "openpyfst.pyx":113
 * 
 *     def __contains__(self, key):
 *         key = as_str(key)             # <<<<<<<<<<<<<<
 *         return (self.table.Find(<char*>key) != -1)
 * 
 */
  __pyx_t_1 = __pyx_f_9openpyfst_as_str(__pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "openpyfst.pyx":114
 *     def __contains__(self, key):
 *         key = as_str(key)
 *         return (self.table.Find(<char*>key) != -1)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __pyx_t_2 = __Pyx_PyObject_AsWritableString(__pyx_v_key); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 114, __pyx_L1_error)
  __pyx_r = (__pyx_v_self->table->Find(((char *)__pyx_t_2)) != -1L);
  goto __pyx_L0;

  /* "openpyfst.pyx":112
 *             return result
 * 
 *     def __contains__(self, key):             # <<<<<<<<<<<<<<
 *         key = as_str(key)
 *         return (self.table.Find(<char*>key) != -1)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.SymbolTable.__contains__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":116
 *         return (self.table.Find(<char*>key) != -1)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.table.NumSymbols()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_9openpyfst_11SymbolTable_17__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_9openpyfst_11SymbolTable_17__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_11SymbolTable_16__len__(((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_9openpyfst_11SymbolTable_16__len__(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "openpyfst.pyx":117
 * 
 *     def __len__(self):
 *         return self.table.NumSymbols()             # <<<<<<<<<<<<<<
 * 
 *     def items(self):
 */
  __pyx_r = __pyx_v_self->table->NumSymbols();
  goto __pyx_L0;

  /* "openpyfst.pyx":116
 *         return (self.table.Find(<char*>key) != -1)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.table.NumSymbols()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9openpyfst_11SymbolTable_20generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "openpyfst.pyx":119
 *         return self.table.NumSymbols()
 * 
 *     def items(self):             # <<<<<<<<<<<<<<
 *         """table.items() -> iterator over (symbol, value) pairs"""
 *         cdef sym.SymbolTableIterator* it = new sym.SymbolTableIterator(self.table[0])
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_11SymbolTable_19items(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9openpyfst_11SymbolTable_18items[] = "table.items() -> iterator over (symbol, value) pairs";
static PyObject *__pyx_pw_9openpyfst_11SymbolTable_19items(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("items (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_11SymbolTable_18items(((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_11SymbolTable_18items(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self) {
  struct __pyx_obj_9openpyfst___pyx_scope_struct__items *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("items", 0);
  __pyx_cur_scope = (struct __pyx_obj_9openpyfst___pyx_scope_struct__items *)__pyx_tp_new_9openpyfst___pyx_scope_struct__items(__pyx_ptype_9openpyfst___pyx_scope_struct__items, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9openpyfst___pyx_scope_struct__items *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 119, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9openpyfst_11SymbolTable_20generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_items, __pyx_n_s_SymbolTable_items, __pyx_n_s_openpyfst); if (unlikely(!gen)) __PYX_ERR(0, 119, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("openpyfst.SymbolTable.items", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9openpyfst_11SymbolTable_20generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9openpyfst___pyx_scope_struct__items *__pyx_cur_scope = ((struct __pyx_obj_9openpyfst___pyx_scope_struct__items *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("items", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L9_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 119, __pyx_L1_error)

  /* "openpyfst.pyx":121
 *     def items(self):
 *         """table.items() -> iterator over (symbol, value) pairs"""
 *         cdef sym.SymbolTableIterator* it = new sym.SymbolTableIterator(self.table[0])             # <<<<<<<<<<<<<<
 *         try:
 *             while not it.Done():
 */
  __pyx_cur_scope->__pyx_v_it = new fst::SymbolTableIterator((__pyx_cur_scope->__pyx_v_self->table[0]));

  /* "openpyfst.pyx":122
 *         """table.items() -> iterator over (symbol, value) pairs"""
 *         cdef sym.SymbolTableIterator* it = new sym.SymbolTableIterator(self.table[0])
 *         try:             # <<<<<<<<<<<<<<
 *             while not it.Done():
 *                 yield (it.Symbol().decode('utf8'), it.Value())
 */
  /*try:*/ {

    /* "openpyfst.pyx":123
 *         cdef sym.SymbolTableIterator* it = new sym.SymbolTableIterator(self.table[0])
 *         try:
 *             while not it.Done():             # <<<<<<<<<<<<<<
 *                 yield (it.Symbol().decode('utf8'), it.Value())
 *                 it.Next()
 */
    while (1) {
      __pyx_t_1 = ((!(__pyx_cur_scope->__pyx_v_it->Done() != 0)) != 0);
      if (!__pyx_t_1) break;

      /* "openpyfst.pyx":124
 *         try:
 *             while not it.Done():
 *                 yield (it.Symbol().decode('utf8'), it.Value())             # <<<<<<<<<<<<<<
 *                 it.Next()
 *         finally:
 */
      __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_cur_scope->__pyx_v_it->Symbol(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 124, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_cur_scope->__pyx_v_it->Value()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 124, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 124, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L9_resume_from_yield:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 124, __pyx_L5_error)

      /* "openpyfst.pyx":125
 *             while not it.Done():
 *                 yield (it.Symbol().decode('utf8'), it.Value())
 *                 it.Next()             # <<<<<<<<<<<<<<
 *         finally:
 *             del it
 */
      __pyx_cur_scope->__pyx_v_it->Next();
    }
  }

  /* "openpyfst.pyx":127
 *                 it.Next()
 *         finally:
 *             del it             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(SymbolTable x, SymbolTable y, int op):
 */
  /*finally:*/ {
    /*normal exit:*/{
      delete __pyx_cur_scope->__pyx_v_it;
      goto __pyx_L6;
    }
    __pyx_L5_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_assign
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __pyx_t_5 = __pyx_lineno; __pyx_t_6 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
      {
        delete __pyx_cur_scope->__pyx_v_it;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      }
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __pyx_lineno = __pyx_t_5; __pyx_clineno = __pyx_t_6; __pyx_filename = __pyx_t_7;
      goto __pyx_L1_error;
    }
    __pyx_L6:;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "openpyfst.pyx":119
 *         return self.table.NumSymbols()
 * 
 *     def items(self):             # <<<<<<<<<<<<<<
 *         """table.items() -> iterator over (symbol, value) pairs"""
 *         cdef sym.SymbolTableIterator* it = new sym.SymbolTableIterator(self.table[0])
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("items", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":129
 *             del it
 * 
 *     def __richcmp__(SymbolTable x, SymbolTable y, int op):             # <<<<<<<<<<<<<<
 *         if op == 2: # ==
 *             return x.table.LabeledCheckSum() == y.table.LabeledCheckSum()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_11SymbolTable_22__richcmp__(PyObject *__pyx_v_x, PyObject *__pyx_v_y, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_9openpyfst_11SymbolTable_22__richcmp__(PyObject *__pyx_v_x, PyObject *__pyx_v_y, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_9openpyfst_SymbolTable, 1, "y", 0))) __PYX_ERR(0, 129, __pyx_L1_error)
  __pyx_r = __pyx_pf_9openpyfst_11SymbolTable_21__richcmp__(((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_v_x), ((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_v_y), ((int)__pyx_v_op));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_11SymbolTable_21__richcmp__(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_x, struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_y, int __pyx_v_op) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "openpyfst.pyx":130
 * 
 *     def __richcmp__(SymbolTable x, SymbolTable y, int op):
 *         if op == 2: # ==             # <<<<<<<<<<<<<<
 *             return x.table.LabeledCheckSum() == y.table.LabeledCheckSum()
 *         elif op == 3: # !=
 */
  switch (__pyx_v_op) {
    case 2:

    /* "openpyfst.pyx":131
 *     def __richcmp__(SymbolTable x, SymbolTable y, int op):
 *         if op == 2: # ==
 *             return x.table.LabeledCheckSum() == y.table.LabeledCheckSum()             # <<<<<<<<<<<<<<
 *         elif op == 3: # !=
 *             return not (x == y)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_x->table->LabeledCheckSum() == __pyx_v_y->table->LabeledCheckSum())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "openpyfst.pyx":130
 * 
 *     def __richcmp__(SymbolTable x, SymbolTable y, int op):
 *         if op == 2: # ==             # <<<<<<<<<<<<<<
 *             return x.table.LabeledCheckSum() == y.table.LabeledCheckSum()
 *         elif op == 3: # !=
 */
    break;
    case 3:

    /* "openpyfst.pyx":133
 *             return x.table.LabeledCheckSum() == y.table.LabeledCheckSum()
 *         elif op == 3: # !=
 *             return not (x == y)             # <<<<<<<<<<<<<<
 *         raise NotImplementedError('comparison not implemented for SymbolTable')
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_x), ((PyObject *)__pyx_v_y), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyBool_FromLong((!__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "openpyfst.pyx":132
 *         if op == 2: # ==
 *             return x.table.LabeledCheckSum() == y.table.LabeledCheckSum()
 *         elif op == 3: # !=             # <<<<<<<<<<<<<<
 *             return not (x == y)
 *         raise NotImplementedError('comparison not implemented for SymbolTable')
 */
    break;
    default: break;
  }

  /* "openpyfst.pyx":134
 *         elif op == 3: # !=
 *             return not (x == y)
 *         raise NotImplementedError('comparison not implemented for SymbolTable')             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 134, __pyx_L1_error)

  /* "openpyfst.pyx":129
 *             del it
 * 
 *     def __richcmp__(SymbolTable x, SymbolTable y, int op):             # <<<<<<<<<<<<<<
 *         if op == 2: # ==
 *             return x.table.LabeledCheckSum() == y.table.LabeledCheckSum()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.SymbolTable.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":136
 *         raise NotImplementedError('comparison not implemented for SymbolTable')
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return '<SymbolTable of size {0}>'.format(len(self))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_11SymbolTable_24__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9openpyfst_11SymbolTable_24__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_11SymbolTable_23__repr__(((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_11SymbolTable_23__repr__(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "openpyfst.pyx":137
 * 
 *     def __repr__(self):
 *         return '<SymbolTable of size {0}>'.format(len(self))             # <<<<<<<<<<<<<<
 * 
 *     def merge(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_SymbolTable_of_size_0, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 137, __pyx_L1_error)
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":136
 *         raise NotImplementedError('comparison not implemented for SymbolTable')
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return '<SymbolTable of size {0}>'.format(len(self))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("openpyfst.SymbolTable.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":139
 *         return '<SymbolTable of size {0}>'.format(len(self))
 * 
 *     def merge(self, other):             # <<<<<<<<<<<<<<
 *         """table.merge(other): if the two tables are compatible,
 *         extend this table with the symbol, value pairs of the other table"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_11SymbolTable_26merge(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_9openpyfst_11SymbolTable_25merge[] = "table.merge(other): if the two tables are compatible,\n        extend this table with the symbol, value pairs of the other table";
static PyObject *__pyx_pw_9openpyfst_11SymbolTable_26merge(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("merge (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_11SymbolTable_25merge(((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_11SymbolTable_25merge(struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("merge", 0);

  /* "openpyfst.pyx":142
 *         """table.merge(other): if the two tables are compatible,
 *         extend this table with the symbol, value pairs of the other table"""
 *         if other is None or other == self:             # <<<<<<<<<<<<<<
 *             return
 *         _merge_tables(self, other, self)
 */
  __pyx_t_2 = (__pyx_v_other == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_other, ((PyObject *)__pyx_v_self), Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 142, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "openpyfst.pyx":143
 *         extend this table with the symbol, value pairs of the other table"""
 *         if other is None or other == self:
 *             return             # <<<<<<<<<<<<<<
 *         _merge_tables(self, other, self)
 *         _merge_tables(other, self, self)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "openpyfst.pyx":142
 *         """table.merge(other): if the two tables are compatible,
 *         extend this table with the symbol, value pairs of the other table"""
 *         if other is None or other == self:             # <<<<<<<<<<<<<<
 *             return
 *         _merge_tables(self, other, self)
 */
  }

  /* "openpyfst.pyx":144
 *         if other is None or other == self:
 *             return
 *         _merge_tables(self, other, self)             # <<<<<<<<<<<<<<
 *         _merge_tables(other, self, self)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_merge_tables); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_6, ((PyObject *)__pyx_v_self), __pyx_v_other, ((PyObject *)__pyx_v_self)};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_6, ((PyObject *)__pyx_v_self), __pyx_v_other, ((PyObject *)__pyx_v_self)};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_other);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, ((PyObject *)__pyx_v_self));
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "openpyfst.pyx":145
 *             return
 *         _merge_tables(self, other, self)
 *         _merge_tables(other, self, self)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_merge_tables); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_v_other, ((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_self)};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 145, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_v_other, ((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_self)};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 145, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_7, __pyx_v_other);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_7, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_7, ((PyObject *)__pyx_v_self));
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "openpyfst.pyx":139
 *         return '<SymbolTable of size {0}>'.format(len(self))
 * 
 *     def merge(self, other):             # <<<<<<<<<<<<<<
 *         """table.merge(other): if the two tables are compatible,
 *         extend this table with the symbol, value pairs of the other table"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("openpyfst.SymbolTable.merge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.table cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_11SymbolTable_28__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9openpyfst_11SymbolTable_28__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_11SymbolTable_27__reduce_cython__(((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_11SymbolTable_27__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.table cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.table cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.table cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.SymbolTable.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.table cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.table cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_11SymbolTable_30__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9openpyfst_11SymbolTable_30__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_11SymbolTable_29__setstate_cython__(((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_11SymbolTable_29__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.table cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.table cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.table cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.table cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.SymbolTable.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":148
 * 
 * 
 * def _merge_tables(SymbolTable syms1, SymbolTable syms2, SymbolTable merged):             # <<<<<<<<<<<<<<
 *     """
 *     Merge tables `syms1` and `syms2` into `merged` if they are compatible.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_7_merge_tables(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openpyfst_6_merge_tables[] = "\n    Merge tables `syms1` and `syms2` into `merged` if they are compatible.\n    Tables are compatible if all common symbol/values map identically.\n    ";
static PyMethodDef __pyx_mdef_9openpyfst_7_merge_tables = {"_merge_tables", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9openpyfst_7_merge_tables, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9openpyfst_6_merge_tables};
static PyObject *__pyx_pw_9openpyfst_7_merge_tables(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_syms1 = 0;
  struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_syms2 = 0;
  struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_merged = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_merge_tables (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_syms1,&__pyx_n_s_syms2,&__pyx_n_s_merged,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_syms1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_syms2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_merge_tables", 1, 3, 3, 1); __PYX_ERR(0, 148, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_merged)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_merge_tables", 1, 3, 3, 2); __PYX_ERR(0, 148, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_merge_tables") < 0)) __PYX_ERR(0, 148, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_syms1 = ((struct __pyx_obj_9openpyfst_SymbolTable *)values[0]);
    __pyx_v_syms2 = ((struct __pyx_obj_9openpyfst_SymbolTable *)values[1]);
    __pyx_v_merged = ((struct __pyx_obj_9openpyfst_SymbolTable *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_merge_tables", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 148, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst._merge_tables", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_syms1), __pyx_ptype_9openpyfst_SymbolTable, 1, "syms1", 0))) __PYX_ERR(0, 148, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_syms2), __pyx_ptype_9openpyfst_SymbolTable, 1, "syms2", 0))) __PYX_ERR(0, 148, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_merged), __pyx_ptype_9openpyfst_SymbolTable, 1, "merged", 0))) __PYX_ERR(0, 148, __pyx_L1_error)
  __pyx_r = __pyx_pf_9openpyfst_6_merge_tables(__pyx_self, __pyx_v_syms1, __pyx_v_syms2, __pyx_v_merged);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_6_merge_tables(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_syms1, struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_syms2, struct __pyx_obj_9openpyfst_SymbolTable *__pyx_v_merged) {
  PyObject *__pyx_v_symbol = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_v_other_symbol = NULL;
  PyObject *__pyx_v_other_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  __Pyx_RefNannySetupContext("_merge_tables", 0);

  /* "openpyfst.pyx":153
 *     Tables are compatible if all common symbol/values map identically.
 *     """
 *     for symbol, value in syms1.items():             # <<<<<<<<<<<<<<
 *         try:
 *             other_symbol = syms2.find(value)
 */
  __pyx_t_2 = 0;
  if (unlikely(((PyObject *)__pyx_v_syms1) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 153, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(((PyObject *)__pyx_v_syms1), 0, __pyx_n_s_items, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_symbol, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "openpyfst.pyx":154
 *     """
 *     for symbol, value in syms1.items():
 *         try:             # <<<<<<<<<<<<<<
 *             other_symbol = syms2.find(value)
 *             if other_symbol != symbol:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      /*try:*/ {

        /* "openpyfst.pyx":155
 *     for symbol, value in syms1.items():
 *         try:
 *             other_symbol = syms2.find(value)             # <<<<<<<<<<<<<<
 *             if other_symbol != symbol:
 *                 raise ValueError('incompatible symbol tables')
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_syms2), __pyx_n_s_find); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 155, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_11 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        __pyx_t_6 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_11, __pyx_v_value) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_value);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 155, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF_SET(__pyx_v_other_symbol, __pyx_t_6);
        __pyx_t_6 = 0;

        /* "openpyfst.pyx":156
 *         try:
 *             other_symbol = syms2.find(value)
 *             if other_symbol != symbol:             # <<<<<<<<<<<<<<
 *                 raise ValueError('incompatible symbol tables')
 *         except KeyError:
 */
        __pyx_t_6 = PyObject_RichCompare(__pyx_v_other_symbol, __pyx_v_symbol, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 156, __pyx_L5_error)
        __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 156, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(__pyx_t_12)) {

          /* "openpyfst.pyx":157
 *             other_symbol = syms2.find(value)
 *             if other_symbol != symbol:
 *                 raise ValueError('incompatible symbol tables')             # <<<<<<<<<<<<<<
 *         except KeyError:
 *             pass
 */
          __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 157, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_Raise(__pyx_t_6, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __PYX_ERR(0, 157, __pyx_L5_error)

          /* "openpyfst.pyx":156
 *         try:
 *             other_symbol = syms2.find(value)
 *             if other_symbol != symbol:             # <<<<<<<<<<<<<<
 *                 raise ValueError('incompatible symbol tables')
 *         except KeyError:
 */
        }

        /* "openpyfst.pyx":154
 *     """
 *     for symbol, value in syms1.items():
 *         try:             # <<<<<<<<<<<<<<
 *             other_symbol = syms2.find(value)
 *             if other_symbol != symbol:
 */
      }
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L12_try_end;
      __pyx_L5_error:;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "openpyfst.pyx":158
 *             if other_symbol != symbol:
 *                 raise ValueError('incompatible symbol tables')
 *         except KeyError:             # <<<<<<<<<<<<<<
 *             pass
 *         try:
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
      if (__pyx_t_7) {
        __Pyx_ErrRestore(0,0,0);
        goto __pyx_L6_exception_handled;
      }
      goto __pyx_L7_except_error;
      __pyx_L7_except_error:;

      /* "openpyfst.pyx":154
 *     """
 *     for symbol, value in syms1.items():
 *         try:             # <<<<<<<<<<<<<<
 *             other_symbol = syms2.find(value)
 *             if other_symbol != symbol:
 */
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      goto __pyx_L1_error;
      __pyx_L6_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_L12_try_end:;
    }

    /* "openpyfst.pyx":160
 *         except KeyError:
 *             pass
 *         try:             # <<<<<<<<<<<<<<
 *             other_value = syms2.find(symbol)
 *             if other_value != value:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_8);
      /*try:*/ {

        /* "openpyfst.pyx":161
 *             pass
 *         try:
 *             other_value = syms2.find(symbol)             # <<<<<<<<<<<<<<
 *             if other_value != value:
 *                 raise ValueError('incompatible symbol tables')
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_syms2), __pyx_n_s_find); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 161, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_11 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        __pyx_t_6 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_11, __pyx_v_symbol) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_symbol);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 161, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF_SET(__pyx_v_other_value, __pyx_t_6);
        __pyx_t_6 = 0;

        /* "openpyfst.pyx":162
 *         try:
 *             other_value = syms2.find(symbol)
 *             if other_value != value:             # <<<<<<<<<<<<<<
 *                 raise ValueError('incompatible symbol tables')
 *         except KeyError:
 */
        __pyx_t_6 = PyObject_RichCompare(__pyx_v_other_value, __pyx_v_value, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 162, __pyx_L14_error)
        __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 162, __pyx_L14_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(__pyx_t_12)) {

          /* "openpyfst.pyx":163
 *             other_value = syms2.find(symbol)
 *             if other_value != value:
 *                 raise ValueError('incompatible symbol tables')             # <<<<<<<<<<<<<<
 *         except KeyError:
 *             pass
 */
          __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 163, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_Raise(__pyx_t_6, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __PYX_ERR(0, 163, __pyx_L14_error)

          /* "openpyfst.pyx":162
 *         try:
 *             other_value = syms2.find(symbol)
 *             if other_value != value:             # <<<<<<<<<<<<<<
 *                 raise ValueError('incompatible symbol tables')
 *         except KeyError:
 */
        }

        /* "openpyfst.pyx":160
 *         except KeyError:
 *             pass
 *         try:             # <<<<<<<<<<<<<<
 *             other_value = syms2.find(symbol)
 *             if other_value != value:
 */
      }
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L21_try_end;
      __pyx_L14_error:;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "openpyfst.pyx":164
 *             if other_value != value:
 *                 raise ValueError('incompatible symbol tables')
 *         except KeyError:             # <<<<<<<<<<<<<<
 *             pass
 *         merged[symbol] = value
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
      if (__pyx_t_7) {
        __Pyx_ErrRestore(0,0,0);
        goto __pyx_L15_exception_handled;
      }
      goto __pyx_L16_except_error;
      __pyx_L16_except_error:;

      /* "openpyfst.pyx":160
 *         except KeyError:
 *             pass
 *         try:             # <<<<<<<<<<<<<<
 *             other_value = syms2.find(symbol)
 *             if other_value != value:
 */
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_9, __pyx_t_8);
      goto __pyx_L1_error;
      __pyx_L15_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_9, __pyx_t_8);
      __pyx_L21_try_end:;
    }

    /* "openpyfst.pyx":166
 *         except KeyError:
 *             pass
 *         merged[symbol] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_merged), __pyx_v_symbol, __pyx_v_value) < 0)) __PYX_ERR(0, 166, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openpyfst.pyx":148
 * 
 * 
 * def _merge_tables(SymbolTable syms1, SymbolTable syms2, SymbolTable merged):             # <<<<<<<<<<<<<<
 *     """
 *     Merge tables `syms1` and `syms2` into `merged` if they are compatible.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("openpyfst._merge_tables", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_symbol);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_other_symbol);
  __Pyx_XDECREF(__pyx_v_other_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":170
 * 
 * cdef class _Fst:
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError('use StdVectorFst or LogVectorFst to create a transducer')
 * 
 */

/* Python wrapper */
static int __pyx_pw_9openpyfst_4_Fst_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9openpyfst_4_Fst_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_9openpyfst_4_Fst___init__(((struct __pyx_obj_9openpyfst__Fst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9openpyfst_4_Fst___init__(CYTHON_UNUSED struct __pyx_obj_9openpyfst__Fst *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "openpyfst.pyx":171
 * cdef class _Fst:
 *     def __init__(self):
 *         raise NotImplementedError('use StdVectorFst or LogVectorFst to create a transducer')             # <<<<<<<<<<<<<<
 * 
 *     def _repr_svg_(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 171, __pyx_L1_error)

  /* "openpyfst.pyx":170
 * 
 * cdef class _Fst:
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError('use StdVectorFst or LogVectorFst to create a transducer')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst._Fst.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":173
 *         raise NotImplementedError('use StdVectorFst or LogVectorFst to create a transducer')
 * 
 *     def _repr_svg_(self):             # <<<<<<<<<<<<<<
 *         """IPython magic: show SVG reprensentation of the transducer"""
 *         try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_4_Fst_3_repr_svg_(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9openpyfst_4_Fst_2_repr_svg_[] = "IPython magic: show SVG reprensentation of the transducer";
static PyObject *__pyx_pw_9openpyfst_4_Fst_3_repr_svg_(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_repr_svg_ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_4_Fst_2_repr_svg_(((struct __pyx_obj_9openpyfst__Fst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_4_Fst_2_repr_svg_(struct __pyx_obj_9openpyfst__Fst *__pyx_v_self) {
  PyObject *__pyx_v_process = NULL;
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_v_err = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("_repr_svg_", 0);

  /* "openpyfst.pyx":175
 *     def _repr_svg_(self):
 *         """IPython magic: show SVG reprensentation of the transducer"""
 *         try:             # <<<<<<<<<<<<<<
 *             process = subprocess.Popen(['dot', '-Tsvg'], stdin=subprocess.PIPE,
 *                 stdout=subprocess.PIPE, stderr=subprocess.PIPE)
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "openpyfst.pyx":176
 *         """IPython magic: show SVG reprensentation of the transducer"""
 *         try:
 *             process = subprocess.Popen(['dot', '-Tsvg'], stdin=subprocess.PIPE,             # <<<<<<<<<<<<<<
 *                 stdout=subprocess.PIPE, stderr=subprocess.PIPE)
 *         except OSError:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_subprocess); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 176, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Popen); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 176, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyList_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 176, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_n_u_dot);
      __Pyx_GIVEREF(__pyx_n_u_dot);
      PyList_SET_ITEM(__pyx_t_4, 0, __pyx_n_u_dot);
      __Pyx_INCREF(__pyx_kp_u_Tsvg);
      __Pyx_GIVEREF(__pyx_kp_u_Tsvg);
      PyList_SET_ITEM(__pyx_t_4, 1, __pyx_kp_u_Tsvg);
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 176, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 176, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_subprocess); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 176, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_PIPE); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 176, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_stdin, __pyx_t_8) < 0) __PYX_ERR(0, 176, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "openpyfst.pyx":177
 *         try:
 *             process = subprocess.Popen(['dot', '-Tsvg'], stdin=subprocess.PIPE,
 *                 stdout=subprocess.PIPE, stderr=subprocess.PIPE)             # <<<<<<<<<<<<<<
 *         except OSError:
 *             raise Exception('cannot find the dot binary')
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_subprocess); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 177, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_PIPE); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 177, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_stdout, __pyx_t_7) < 0) __PYX_ERR(0, 176, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_subprocess); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 177, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_PIPE); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 177, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_stderr, __pyx_t_8) < 0) __PYX_ERR(0, 176, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "openpyfst.pyx":176
 *         """IPython magic: show SVG reprensentation of the transducer"""
 *         try:
 *             process = subprocess.Popen(['dot', '-Tsvg'], stdin=subprocess.PIPE,             # <<<<<<<<<<<<<<
 *                 stdout=subprocess.PIPE, stderr=subprocess.PIPE)
 *         except OSError:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 176, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_process = __pyx_t_8;
      __pyx_t_8 = 0;

      /* "openpyfst.pyx":175
 *     def _repr_svg_(self):
 *         """IPython magic: show SVG reprensentation of the transducer"""
 *         try:             # <<<<<<<<<<<<<<
 *             process = subprocess.Popen(['dot', '-Tsvg'], stdin=subprocess.PIPE,
 *                 stdout=subprocess.PIPE, stderr=subprocess.PIPE)
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "openpyfst.pyx":178
 *             process = subprocess.Popen(['dot', '-Tsvg'], stdin=subprocess.PIPE,
 *                 stdout=subprocess.PIPE, stderr=subprocess.PIPE)
 *         except OSError:             # <<<<<<<<<<<<<<
 *             raise Exception('cannot find the dot binary')
 *         out, err = process.communicate(self.draw())
 */
    __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_OSError);
    if (__pyx_t_9) {
      __Pyx_AddTraceback("openpyfst._Fst._repr_svg_", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_4, &__pyx_t_6) < 0) __PYX_ERR(0, 178, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_6);

      /* "openpyfst.pyx":179
 *                 stdout=subprocess.PIPE, stderr=subprocess.PIPE)
 *         except OSError:
 *             raise Exception('cannot find the dot binary')             # <<<<<<<<<<<<<<
 *         out, err = process.communicate(self.draw())
 *         if err:
 */
      __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 179, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(0, 179, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "openpyfst.pyx":175
 *     def _repr_svg_(self):
 *         """IPython magic: show SVG reprensentation of the transducer"""
 *         try:             # <<<<<<<<<<<<<<
 *             process = subprocess.Popen(['dot', '-Tsvg'], stdin=subprocess.PIPE,
 *                 stdout=subprocess.PIPE, stderr=subprocess.PIPE)
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "openpyfst.pyx":180
 *         except OSError:
 *             raise Exception('cannot find the dot binary')
 *         out, err = process.communicate(self.draw())             # <<<<<<<<<<<<<<
 *         if err:
 *             raise Exception(err)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_process, __pyx_n_s_communicate); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_draw); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_8 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
    PyObject* sequence = __pyx_t_6;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 180, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_8);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    #endif
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_10 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_4 = __pyx_t_10(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L11_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_5); if (unlikely(!__pyx_t_8)) goto __pyx_L11_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_8);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_5), 2) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
    __pyx_t_10 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L12_unpacking_done;
    __pyx_L11_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_10 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 180, __pyx_L1_error)
    __pyx_L12_unpacking_done:;
  }
  __pyx_v_out = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_err = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "openpyfst.pyx":181
 *             raise Exception('cannot find the dot binary')
 *         out, err = process.communicate(self.draw())
 *         if err:             # <<<<<<<<<<<<<<
 *             raise Exception(err)
 *         return out
 */
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_err); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 181, __pyx_L1_error)
  if (unlikely(__pyx_t_11)) {

    /* "openpyfst.pyx":182
 *         out, err = process.communicate(self.draw())
 *         if err:
 *             raise Exception(err)             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_err); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 182, __pyx_L1_error)

    /* "openpyfst.pyx":181
 *             raise Exception('cannot find the dot binary')
 *         out, err = process.communicate(self.draw())
 *         if err:             # <<<<<<<<<<<<<<
 *             raise Exception(err)
 *         return out
 */
  }

  /* "openpyfst.pyx":183
 *         if err:
 *             raise Exception(err)
 *         return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "openpyfst.pyx":173
 *         raise NotImplementedError('use StdVectorFst or LogVectorFst to create a transducer')
 * 
 *     def _repr_svg_(self):             # <<<<<<<<<<<<<<
 *         """IPython magic: show SVG reprensentation of the transducer"""
 *         try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("openpyfst._Fst._repr_svg_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_process);
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XDECREF(__pyx_v_err);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef bint use_setstate
 *     state = ()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_4_Fst_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9openpyfst_4_Fst_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_4_Fst_4__reduce_cython__(((struct __pyx_obj_9openpyfst__Fst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_4_Fst_4__reduce_cython__(struct __pyx_obj_9openpyfst__Fst *__pyx_v_self) {
  int __pyx_v_use_setstate;
  PyObject *__pyx_v_state = NULL;
  PyObject *__pyx_v__dict = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":4
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":5
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":6
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":7
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":5
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":9
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle__Fst, (type(self), 0xd41d8cd, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":10
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle__Fst, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":11
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle__Fst, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle__Fst, (type(self), 0xd41d8cd, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle__Fst); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":10
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle__Fst, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":13
 *         return __pyx_unpickle__Fst, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle__Fst, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle__Fst__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle__Fst); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef bint use_setstate
 *     state = ()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("openpyfst._Fst.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":14
 *     else:
 *         return __pyx_unpickle__Fst, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle__Fst__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_4_Fst_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9openpyfst_4_Fst_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_4_Fst_6__setstate_cython__(((struct __pyx_obj_9openpyfst__Fst *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_4_Fst_6__setstate_cython__(struct __pyx_obj_9openpyfst__Fst *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":15
 *         return __pyx_unpickle__Fst, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle__Fst__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9openpyfst___pyx_unpickle__Fst__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":14
 *     else:
 *         return __pyx_unpickle__Fst, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle__Fst__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst._Fst.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":192
 *     ONE = TropicalWeight(True)
 * 
 *     def __init__(self, value):             # <<<<<<<<<<<<<<
 *         """TropicalWeight(value) -> tropical weight initialized with the given value"""
 *         if value is True or value is None:
 */

/* Python wrapper */
static int __pyx_pw_9openpyfst_14TropicalWeight_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openpyfst_14TropicalWeight___init__[] = "TropicalWeight(value) -> tropical weight initialized with the given value";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_9openpyfst_14TropicalWeight___init__;
#endif
static int __pyx_pw_9openpyfst_14TropicalWeight_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 192, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_value = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 192, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.TropicalWeight.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_14TropicalWeight___init__(((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_v_self), __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9openpyfst_14TropicalWeight___init__(struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  double __pyx_t_4;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "openpyfst.pyx":194
 *     def __init__(self, value):
 *         """TropicalWeight(value) -> tropical weight initialized with the given value"""
 *         if value is True or value is None:             # <<<<<<<<<<<<<<
 *             self.weight = new openfst.TropicalWeight(openfst.TropicalWeightOne())
 *         elif value is False:
 */
  __pyx_t_2 = (__pyx_v_value == Py_True);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_value == Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "openpyfst.pyx":195
 *         """TropicalWeight(value) -> tropical weight initialized with the given value"""
 *         if value is True or value is None:
 *             self.weight = new openfst.TropicalWeight(openfst.TropicalWeightOne())             # <<<<<<<<<<<<<<
 *         elif value is False:
 *             self.weight = new openfst.TropicalWeight(openfst.TropicalWeightZero())
 */
    __pyx_v_self->weight = new fst::TropicalWeight(fst::TropicalWeight::One());

    /* "openpyfst.pyx":194
 *     def __init__(self, value):
 *         """TropicalWeight(value) -> tropical weight initialized with the given value"""
 *         if value is True or value is None:             # <<<<<<<<<<<<<<
 *             self.weight = new openfst.TropicalWeight(openfst.TropicalWeightOne())
 *         elif value is False:
 */
    goto __pyx_L3;
  }

  /* "openpyfst.pyx":196
 *         if value is True or value is None:
 *             self.weight = new openfst.TropicalWeight(openfst.TropicalWeightOne())
 *         elif value is False:             # <<<<<<<<<<<<<<
 *             self.weight = new openfst.TropicalWeight(openfst.TropicalWeightZero())
 *         else:
 */
  __pyx_t_1 = (__pyx_v_value == Py_False);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "openpyfst.pyx":197
 *             self.weight = new openfst.TropicalWeight(openfst.TropicalWeightOne())
 *         elif value is False:
 *             self.weight = new openfst.TropicalWeight(openfst.TropicalWeightZero())             # <<<<<<<<<<<<<<
 *         else:
 *             self.weight = new openfst.TropicalWeight(float(value))
 */
    __pyx_v_self->weight = new fst::TropicalWeight(fst::TropicalWeight::Zero());

    /* "openpyfst.pyx":196
 *         if value is True or value is None:
 *             self.weight = new openfst.TropicalWeight(openfst.TropicalWeightOne())
 *         elif value is False:             # <<<<<<<<<<<<<<
 *             self.weight = new openfst.TropicalWeight(openfst.TropicalWeightZero())
 *         else:
 */
    goto __pyx_L3;
  }

  /* "openpyfst.pyx":199
 *             self.weight = new openfst.TropicalWeight(openfst.TropicalWeightZero())
 *         else:
 *             self.weight = new openfst.TropicalWeight(float(value))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_AsDouble(__pyx_v_value); if (unlikely(__pyx_t_4 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 199, __pyx_L1_error)
    __pyx_v_self->weight = new fst::TropicalWeight(__pyx_t_4);
  }
  __pyx_L3:;

  /* "openpyfst.pyx":192
 *     ONE = TropicalWeight(True)
 * 
 *     def __init__(self, value):             # <<<<<<<<<<<<<<
 *         """TropicalWeight(value) -> tropical weight initialized with the given value"""
 *         if value is True or value is None:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("openpyfst.TropicalWeight.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":201
 *             self.weight = new openfst.TropicalWeight(float(value))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.weight
 * 
 */

/* Python wrapper */
static void __pyx_pw_9openpyfst_14TropicalWeight_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9openpyfst_14TropicalWeight_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_9openpyfst_14TropicalWeight_2__dealloc__(((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9openpyfst_14TropicalWeight_2__dealloc__(struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "openpyfst.pyx":202
 * 
 *     def __dealloc__(self):
 *         del self.weight             # <<<<<<<<<<<<<<
 * 
 *     def __float__(self):
 */
  delete __pyx_v_self->weight;

  /* "openpyfst.pyx":201
 *             self.weight = new openfst.TropicalWeight(float(value))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.weight
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "openpyfst.pyx":204
 *         del self.weight
 * 
 *     def __float__(self):             # <<<<<<<<<<<<<<
 *         return self.weight.Value()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_14TropicalWeight_5__float__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9openpyfst_14TropicalWeight_5__float__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__float__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_14TropicalWeight_4__float__(((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_14TropicalWeight_4__float__(struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__float__", 0);

  /* "openpyfst.pyx":205
 * 
 *     def __float__(self):
 *         return self.weight.Value()             # <<<<<<<<<<<<<<
 * 
 *     def __int__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->weight->Value()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":204
 *         del self.weight
 * 
 *     def __float__(self):             # <<<<<<<<<<<<<<
 *         return self.weight.Value()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.TropicalWeight.__float__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":207
 *         return self.weight.Value()
 * 
 *     def __int__(self):             # <<<<<<<<<<<<<<
 *         return int(self.weight.Value())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_14TropicalWeight_7__int__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9openpyfst_14TropicalWeight_7__int__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__int__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_14TropicalWeight_6__int__(((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_14TropicalWeight_6__int__(struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__int__", 0);

  /* "openpyfst.pyx":208
 * 
 *     def __int__(self):
 *         return int(self.weight.Value())             # <<<<<<<<<<<<<<
 * 
 *     def __bool__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromDouble(__pyx_v_self->weight->Value()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":207
 *         return self.weight.Value()
 * 
 *     def __int__(self):             # <<<<<<<<<<<<<<
 *         return int(self.weight.Value())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.TropicalWeight.__int__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":210
 *         return int(self.weight.Value())
 * 
 *     def __bool__(self):             # <<<<<<<<<<<<<<
 *         return not (self.weight[0] == openfst.TropicalWeightZero())
 * 
 */

/* Python wrapper */
static int __pyx_pw_9openpyfst_14TropicalWeight_9__bool__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9openpyfst_14TropicalWeight_9__bool__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__bool__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_14TropicalWeight_8__bool__(((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9openpyfst_14TropicalWeight_8__bool__(struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__bool__", 0);

  /* "openpyfst.pyx":211
 * 
 *     def __bool__(self):
 *         return not (self.weight[0] == openfst.TropicalWeightZero())             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(TropicalWeight x, TropicalWeight y, int op):
 */
  __pyx_r = (!(((__pyx_v_self->weight[0]) == fst::TropicalWeight::Zero()) != 0));
  goto __pyx_L0;

  /* "openpyfst.pyx":210
 *         return int(self.weight.Value())
 * 
 *     def __bool__(self):             # <<<<<<<<<<<<<<
 *         return not (self.weight[0] == openfst.TropicalWeightZero())
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":213
 *         return not (self.weight[0] == openfst.TropicalWeightZero())
 * 
 *     def __richcmp__(TropicalWeight x, TropicalWeight y, int op):             # <<<<<<<<<<<<<<
 *         if op == 2: # ==
 *             return x.weight[0] == y.weight[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_14TropicalWeight_11__richcmp__(PyObject *__pyx_v_x, PyObject *__pyx_v_y, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_9openpyfst_14TropicalWeight_11__richcmp__(PyObject *__pyx_v_x, PyObject *__pyx_v_y, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_9openpyfst_TropicalWeight, 1, "y", 0))) __PYX_ERR(0, 213, __pyx_L1_error)
  __pyx_r = __pyx_pf_9openpyfst_14TropicalWeight_10__richcmp__(((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_v_x), ((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_v_y), ((int)__pyx_v_op));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_14TropicalWeight_10__richcmp__(struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_x, struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_y, int __pyx_v_op) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "openpyfst.pyx":214
 * 
 *     def __richcmp__(TropicalWeight x, TropicalWeight y, int op):
 *         if op == 2: # ==             # <<<<<<<<<<<<<<
 *             return x.weight[0] == y.weight[0]
 *         elif op == 3: # !=
 */
  switch (__pyx_v_op) {
    case 2:

    /* "openpyfst.pyx":215
 *     def __richcmp__(TropicalWeight x, TropicalWeight y, int op):
 *         if op == 2: # ==
 *             return x.weight[0] == y.weight[0]             # <<<<<<<<<<<<<<
 *         elif op == 3: # !=
 *             return not (x == y)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(((__pyx_v_x->weight[0]) == (__pyx_v_y->weight[0]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "openpyfst.pyx":214
 * 
 *     def __richcmp__(TropicalWeight x, TropicalWeight y, int op):
 *         if op == 2: # ==             # <<<<<<<<<<<<<<
 *             return x.weight[0] == y.weight[0]
 *         elif op == 3: # !=
 */
    break;
    case 3:

    /* "openpyfst.pyx":217
 *             return x.weight[0] == y.weight[0]
 *         elif op == 3: # !=
 *             return not (x == y)             # <<<<<<<<<<<<<<
 *         raise NotImplementedError('comparison not implemented for TropicalWeight')
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_x), ((PyObject *)__pyx_v_y), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 217, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyBool_FromLong((!__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "openpyfst.pyx":216
 *         if op == 2: # ==
 *             return x.weight[0] == y.weight[0]
 *         elif op == 3: # !=             # <<<<<<<<<<<<<<
 *             return not (x == y)
 *         raise NotImplementedError('comparison not implemented for TropicalWeight')
 */
    break;
    default: break;
  }

  /* "openpyfst.pyx":218
 *         elif op == 3: # !=
 *             return not (x == y)
 *         raise NotImplementedError('comparison not implemented for TropicalWeight')             # <<<<<<<<<<<<<<
 * 
 *     def approx_equal(self, TropicalWeight other):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 218, __pyx_L1_error)

  /* "openpyfst.pyx":213
 *         return not (self.weight[0] == openfst.TropicalWeightZero())
 * 
 *     def __richcmp__(TropicalWeight x, TropicalWeight y, int op):             # <<<<<<<<<<<<<<
 *         if op == 2: # ==
 *             return x.weight[0] == y.weight[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.TropicalWeight.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":220
 *         raise NotImplementedError('comparison not implemented for TropicalWeight')
 * 
 *     def approx_equal(self, TropicalWeight other):             # <<<<<<<<<<<<<<
 *         return openfst.ApproxEqual(self.weight[0], other.weight[0])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_14TropicalWeight_13approx_equal(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_9openpyfst_14TropicalWeight_13approx_equal(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("approx_equal (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_9openpyfst_TropicalWeight, 1, "other", 0))) __PYX_ERR(0, 220, __pyx_L1_error)
  __pyx_r = __pyx_pf_9openpyfst_14TropicalWeight_12approx_equal(((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_v_self), ((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_14TropicalWeight_12approx_equal(struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_self, struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("approx_equal", 0);

  /* "openpyfst.pyx":221
 * 
 *     def approx_equal(self, TropicalWeight other):
 *         return openfst.ApproxEqual(self.weight[0], other.weight[0])             # <<<<<<<<<<<<<<
 * 
 *     def __add__(TropicalWeight x, TropicalWeight y):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(fst::ApproxEqual((__pyx_v_self->weight[0]), (__pyx_v_other->weight[0]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":220
 *         raise NotImplementedError('comparison not implemented for TropicalWeight')
 * 
 *     def approx_equal(self, TropicalWeight other):             # <<<<<<<<<<<<<<
 *         return openfst.ApproxEqual(self.weight[0], other.weight[0])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.TropicalWeight.approx_equal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":223
 *         return openfst.ApproxEqual(self.weight[0], other.weight[0])
 * 
 *     def __add__(TropicalWeight x, TropicalWeight y):             # <<<<<<<<<<<<<<
 *         cdef TropicalWeight result = TropicalWeight.__new__(TropicalWeight)
 *         result.weight = new openfst.TropicalWeight(openfst.Plus(x.weight[0], y.weight[0]))
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_14TropicalWeight_15__add__(PyObject *__pyx_v_x, PyObject *__pyx_v_y); /*proto*/
static PyObject *__pyx_pw_9openpyfst_14TropicalWeight_15__add__(PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_9openpyfst_TropicalWeight, 1, "x", 0))) __PYX_ERR(0, 223, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_9openpyfst_TropicalWeight, 1, "y", 0))) __PYX_ERR(0, 223, __pyx_L1_error)
  __pyx_r = __pyx_pf_9openpyfst_14TropicalWeight_14__add__(((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_v_x), ((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_v_y));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_14TropicalWeight_14__add__(struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_x, struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_y) {
  struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "openpyfst.pyx":224
 * 
 *     def __add__(TropicalWeight x, TropicalWeight y):
 *         cdef TropicalWeight result = TropicalWeight.__new__(TropicalWeight)             # <<<<<<<<<<<<<<
 *         result.weight = new openfst.TropicalWeight(openfst.Plus(x.weight[0], y.weight[0]))
 *         return result
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_9openpyfst_TropicalWeight(((PyTypeObject *)__pyx_ptype_9openpyfst_TropicalWeight), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_result = ((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "openpyfst.pyx":225
 *     def __add__(TropicalWeight x, TropicalWeight y):
 *         cdef TropicalWeight result = TropicalWeight.__new__(TropicalWeight)
 *         result.weight = new openfst.TropicalWeight(openfst.Plus(x.weight[0], y.weight[0]))             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_v_result->weight = new fst::TropicalWeight(fst::Plus((__pyx_v_x->weight[0]), (__pyx_v_y->weight[0])));

  /* "openpyfst.pyx":226
 *         cdef TropicalWeight result = TropicalWeight.__new__(TropicalWeight)
 *         result.weight = new openfst.TropicalWeight(openfst.Plus(x.weight[0], y.weight[0]))
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(TropicalWeight x, TropicalWeight y):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "openpyfst.pyx":223
 *         return openfst.ApproxEqual(self.weight[0], other.weight[0])
 * 
 *     def __add__(TropicalWeight x, TropicalWeight y):             # <<<<<<<<<<<<<<
 *         cdef TropicalWeight result = TropicalWeight.__new__(TropicalWeight)
 *         result.weight = new openfst.TropicalWeight(openfst.Plus(x.weight[0], y.weight[0]))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.TropicalWeight.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":228
 *         return result
 * 
 *     def __mul__(TropicalWeight x, TropicalWeight y):             # <<<<<<<<<<<<<<
 *         cdef TropicalWeight result = TropicalWeight.__new__(TropicalWeight)
 *         result.weight = new openfst.TropicalWeight(openfst.Times(x.weight[0], y.weight[0]))
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_14TropicalWeight_17__mul__(PyObject *__pyx_v_x, PyObject *__pyx_v_y); /*proto*/
static PyObject *__pyx_pw_9openpyfst_14TropicalWeight_17__mul__(PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_9openpyfst_TropicalWeight, 1, "x", 0))) __PYX_ERR(0, 228, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_9openpyfst_TropicalWeight, 1, "y", 0))) __PYX_ERR(0, 228, __pyx_L1_error)
  __pyx_r = __pyx_pf_9openpyfst_14TropicalWeight_16__mul__(((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_v_x), ((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_v_y));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_14TropicalWeight_16__mul__(struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_x, struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_y) {
  struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "openpyfst.pyx":229
 * 
 *     def __mul__(TropicalWeight x, TropicalWeight y):
 *         cdef TropicalWeight result = TropicalWeight.__new__(TropicalWeight)             # <<<<<<<<<<<<<<
 *         result.weight = new openfst.TropicalWeight(openfst.Times(x.weight[0], y.weight[0]))
 *         return result
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_9openpyfst_TropicalWeight(((PyTypeObject *)__pyx_ptype_9openpyfst_TropicalWeight), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_result = ((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "openpyfst.pyx":230
 *     def __mul__(TropicalWeight x, TropicalWeight y):
 *         cdef TropicalWeight result = TropicalWeight.__new__(TropicalWeight)
 *         result.weight = new openfst.TropicalWeight(openfst.Times(x.weight[0], y.weight[0]))             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_v_result->weight = new fst::TropicalWeight(fst::Times((__pyx_v_x->weight[0]), (__pyx_v_y->weight[0])));

  /* "openpyfst.pyx":231
 *         cdef TropicalWeight result = TropicalWeight.__new__(TropicalWeight)
 *         result.weight = new openfst.TropicalWeight(openfst.Times(x.weight[0], y.weight[0]))
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def __div__(TropicalWeight x, TropicalWeight y):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "openpyfst.pyx":228
 *         return result
 * 
 *     def __mul__(TropicalWeight x, TropicalWeight y):             # <<<<<<<<<<<<<<
 *         cdef TropicalWeight result = TropicalWeight.__new__(TropicalWeight)
 *         result.weight = new openfst.TropicalWeight(openfst.Times(x.weight[0], y.weight[0]))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.TropicalWeight.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":233
 *         return result
 * 
 *     def __div__(TropicalWeight x, TropicalWeight y):             # <<<<<<<<<<<<<<
 *         cdef TropicalWeight result = TropicalWeight.__new__(TropicalWeight)
 *         result.weight = new openfst.TropicalWeight(openfst.Divide(x.weight[0], y.weight[0]))
 */

/* Python wrapper */
#if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
static PyObject *__pyx_pw_9openpyfst_14TropicalWeight_19__div__(PyObject *__pyx_v_x, PyObject *__pyx_v_y); /*proto*/
static PyObject *__pyx_pw_9openpyfst_14TropicalWeight_19__div__(PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__div__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_9openpyfst_TropicalWeight, 1, "x", 0))) __PYX_ERR(0, 233, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_9openpyfst_TropicalWeight, 1, "y", 0))) __PYX_ERR(0, 233, __pyx_L1_error)
  __pyx_r = __pyx_pf_9openpyfst_14TropicalWeight_18__div__(((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_v_x), ((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_v_y));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000))*/

#if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
static PyObject *__pyx_pf_9openpyfst_14TropicalWeight_18__div__(struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_x, struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_y) {
  struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__div__", 0);

  /* "openpyfst.pyx":234
 * 
 *     def __div__(TropicalWeight x, TropicalWeight y):
 *         cdef TropicalWeight result = TropicalWeight.__new__(TropicalWeight)             # <<<<<<<<<<<<<<
 *         result.weight = new openfst.TropicalWeight(openfst.Divide(x.weight[0], y.weight[0]))
 *         return result
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_9openpyfst_TropicalWeight(((PyTypeObject *)__pyx_ptype_9openpyfst_TropicalWeight), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_result = ((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "openpyfst.pyx":235
 *     def __div__(TropicalWeight x, TropicalWeight y):
 *         cdef TropicalWeight result = TropicalWeight.__new__(TropicalWeight)
 *         result.weight = new openfst.TropicalWeight(openfst.Divide(x.weight[0], y.weight[0]))             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_v_result->weight = new fst::TropicalWeight(fst::Divide((__pyx_v_x->weight[0]), (__pyx_v_y->weight[0])));

  /* "openpyfst.pyx":236
 *         cdef TropicalWeight result = TropicalWeight.__new__(TropicalWeight)
 *         result.weight = new openfst.TropicalWeight(openfst.Divide(x.weight[0], y.weight[0]))
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "openpyfst.pyx":233
 *         return result
 * 
 *     def __div__(TropicalWeight x, TropicalWeight y):             # <<<<<<<<<<<<<<
 *         cdef TropicalWeight result = TropicalWeight.__new__(TropicalWeight)
 *         result.weight = new openfst.TropicalWeight(openfst.Divide(x.weight[0], y.weight[0]))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.TropicalWeight.__div__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000))*/

/* "openpyfst.pyx":238
 *         return result
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return 'TropicalWeight({0})'.format(float(self))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_14TropicalWeight_21__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9openpyfst_14TropicalWeight_21__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_14TropicalWeight_20__repr__(((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_14TropicalWeight_20__repr__(struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "openpyfst.pyx":239
 * 
 *     def __repr__(self):
 *         return 'TropicalWeight({0})'.format(float(self))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_TropicalWeight_0, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyNumber_Float(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":238
 *         return result
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return 'TropicalWeight({0})'.format(float(self))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("openpyfst.TropicalWeight.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.weight cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_14TropicalWeight_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9openpyfst_14TropicalWeight_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_14TropicalWeight_22__reduce_cython__(((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_14TropicalWeight_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.weight cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.weight cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.weight cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.TropicalWeight.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.weight cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.weight cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_14TropicalWeight_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9openpyfst_14TropicalWeight_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_14TropicalWeight_24__setstate_cython__(((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_14TropicalWeight_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.weight cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.weight cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.weight cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.weight cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.TropicalWeight.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":247
 *     SEMIRING = TropicalWeight
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """A StdVectorFst arc (with a tropical weight)"""
 *         raise NotImplementedError('cannot create independent arc')
 */

/* Python wrapper */
static int __pyx_pw_9openpyfst_6StdArc_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openpyfst_6StdArc___init__[] = "A StdVectorFst arc (with a tropical weight)";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_9openpyfst_6StdArc___init__;
#endif
static int __pyx_pw_9openpyfst_6StdArc_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_9openpyfst_6StdArc___init__(((struct __pyx_obj_9openpyfst_StdArc *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9openpyfst_6StdArc___init__(CYTHON_UNUSED struct __pyx_obj_9openpyfst_StdArc *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "openpyfst.pyx":249
 *     def __init__(self):
 *         """A StdVectorFst arc (with a tropical weight)"""
 *         raise NotImplementedError('cannot create independent arc')             # <<<<<<<<<<<<<<
 * 
 *     property ilabel:
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 249, __pyx_L1_error)

  /* "openpyfst.pyx":247
 *     SEMIRING = TropicalWeight
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """A StdVectorFst arc (with a tropical weight)"""
 *         raise NotImplementedError('cannot create independent arc')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdArc.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":252
 * 
 *     property ilabel:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.arc.ilabel
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_6StdArc_6ilabel_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9openpyfst_6StdArc_6ilabel_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_6StdArc_6ilabel___get__(((struct __pyx_obj_9openpyfst_StdArc *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_6StdArc_6ilabel___get__(struct __pyx_obj_9openpyfst_StdArc *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "openpyfst.pyx":253
 *     property ilabel:
 *         def __get__(self):
 *             return self.arc.ilabel             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, int ilabel):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->arc->ilabel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":252
 * 
 *     property ilabel:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.arc.ilabel
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdArc.ilabel.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":255
 *             return self.arc.ilabel
 * 
 *         def __set__(self, int ilabel):             # <<<<<<<<<<<<<<
 *             self.arc.ilabel = ilabel
 * 
 */

/* Python wrapper */
static int __pyx_pw_9openpyfst_6StdArc_6ilabel_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_ilabel); /*proto*/
static int __pyx_pw_9openpyfst_6StdArc_6ilabel_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_ilabel) {
  int __pyx_v_ilabel;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_ilabel); {
    __pyx_v_ilabel = __Pyx_PyInt_As_int(__pyx_arg_ilabel); if (unlikely((__pyx_v_ilabel == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 255, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.StdArc.ilabel.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_6StdArc_6ilabel_2__set__(((struct __pyx_obj_9openpyfst_StdArc *)__pyx_v_self), ((int)__pyx_v_ilabel));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9openpyfst_6StdArc_6ilabel_2__set__(struct __pyx_obj_9openpyfst_StdArc *__pyx_v_self, int __pyx_v_ilabel) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "openpyfst.pyx":256
 * 
 *         def __set__(self, int ilabel):
 *             self.arc.ilabel = ilabel             # <<<<<<<<<<<<<<
 * 
 *     property olabel:
 */
  __pyx_v_self->arc->ilabel = __pyx_v_ilabel;

  /* "openpyfst.pyx":255
 *             return self.arc.ilabel
 * 
 *         def __set__(self, int ilabel):             # <<<<<<<<<<<<<<
 *             self.arc.ilabel = ilabel
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":259
 * 
 *     property olabel:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.arc.olabel
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_6StdArc_6olabel_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9openpyfst_6StdArc_6olabel_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_6StdArc_6olabel___get__(((struct __pyx_obj_9openpyfst_StdArc *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_6StdArc_6olabel___get__(struct __pyx_obj_9openpyfst_StdArc *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "openpyfst.pyx":260
 *     property olabel:
 *         def __get__(self):
 *             return self.arc.olabel             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, int olabel):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->arc->olabel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":259
 * 
 *     property olabel:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.arc.olabel
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdArc.olabel.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":262
 *             return self.arc.olabel
 * 
 *         def __set__(self, int olabel):             # <<<<<<<<<<<<<<
 *             self.arc.olabel = olabel
 * 
 */

/* Python wrapper */
static int __pyx_pw_9openpyfst_6StdArc_6olabel_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_olabel); /*proto*/
static int __pyx_pw_9openpyfst_6StdArc_6olabel_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_olabel) {
  int __pyx_v_olabel;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_olabel); {
    __pyx_v_olabel = __Pyx_PyInt_As_int(__pyx_arg_olabel); if (unlikely((__pyx_v_olabel == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 262, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.StdArc.olabel.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_6StdArc_6olabel_2__set__(((struct __pyx_obj_9openpyfst_StdArc *)__pyx_v_self), ((int)__pyx_v_olabel));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9openpyfst_6StdArc_6olabel_2__set__(struct __pyx_obj_9openpyfst_StdArc *__pyx_v_self, int __pyx_v_olabel) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "openpyfst.pyx":263
 * 
 *         def __set__(self, int olabel):
 *             self.arc.olabel = olabel             # <<<<<<<<<<<<<<
 * 
 *     property nextstate:
 */
  __pyx_v_self->arc->olabel = __pyx_v_olabel;

  /* "openpyfst.pyx":262
 *             return self.arc.olabel
 * 
 *         def __set__(self, int olabel):             # <<<<<<<<<<<<<<
 *             self.arc.olabel = olabel
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":266
 * 
 *     property nextstate:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.arc.nextstate
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_6StdArc_9nextstate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9openpyfst_6StdArc_9nextstate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_6StdArc_9nextstate___get__(((struct __pyx_obj_9openpyfst_StdArc *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_6StdArc_9nextstate___get__(struct __pyx_obj_9openpyfst_StdArc *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "openpyfst.pyx":267
 *     property nextstate:
 *         def __get__(self):
 *             return self.arc.nextstate             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, int nextstate):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->arc->nextstate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":266
 * 
 *     property nextstate:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.arc.nextstate
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdArc.nextstate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":269
 *             return self.arc.nextstate
 * 
 *         def __set__(self, int nextstate):             # <<<<<<<<<<<<<<
 *             self.arc.nextstate = nextstate
 * 
 */

/* Python wrapper */
static int __pyx_pw_9openpyfst_6StdArc_9nextstate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_nextstate); /*proto*/
static int __pyx_pw_9openpyfst_6StdArc_9nextstate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_nextstate) {
  int __pyx_v_nextstate;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_nextstate); {
    __pyx_v_nextstate = __Pyx_PyInt_As_int(__pyx_arg_nextstate); if (unlikely((__pyx_v_nextstate == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 269, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.StdArc.nextstate.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_6StdArc_9nextstate_2__set__(((struct __pyx_obj_9openpyfst_StdArc *)__pyx_v_self), ((int)__pyx_v_nextstate));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9openpyfst_6StdArc_9nextstate_2__set__(struct __pyx_obj_9openpyfst_StdArc *__pyx_v_self, int __pyx_v_nextstate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "openpyfst.pyx":270
 * 
 *         def __set__(self, int nextstate):
 *             self.arc.nextstate = nextstate             # <<<<<<<<<<<<<<
 * 
 *     property weight:
 */
  __pyx_v_self->arc->nextstate = __pyx_v_nextstate;

  /* "openpyfst.pyx":269
 *             return self.arc.nextstate
 * 
 *         def __set__(self, int nextstate):             # <<<<<<<<<<<<<<
 *             self.arc.nextstate = nextstate
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":273
 * 
 *     property weight:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef TropicalWeight weight = TropicalWeight.__new__(TropicalWeight)
 *             weight.weight = new openfst.TropicalWeight(self.arc.weight)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_6StdArc_6weight_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9openpyfst_6StdArc_6weight_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_6StdArc_6weight___get__(((struct __pyx_obj_9openpyfst_StdArc *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_6StdArc_6weight___get__(struct __pyx_obj_9openpyfst_StdArc *__pyx_v_self) {
  struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_weight = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "openpyfst.pyx":274
 *     property weight:
 *         def __get__(self):
 *             cdef TropicalWeight weight = TropicalWeight.__new__(TropicalWeight)             # <<<<<<<<<<<<<<
 *             weight.weight = new openfst.TropicalWeight(self.arc.weight)
 *             return weight
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_9openpyfst_TropicalWeight(((PyTypeObject *)__pyx_ptype_9openpyfst_TropicalWeight), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_weight = ((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "openpyfst.pyx":275
 *         def __get__(self):
 *             cdef TropicalWeight weight = TropicalWeight.__new__(TropicalWeight)
 *             weight.weight = new openfst.TropicalWeight(self.arc.weight)             # <<<<<<<<<<<<<<
 *             return weight
 * 
 */
  __pyx_v_weight->weight = new fst::TropicalWeight(__pyx_v_self->arc->weight);

  /* "openpyfst.pyx":276
 *             cdef TropicalWeight weight = TropicalWeight.__new__(TropicalWeight)
 *             weight.weight = new openfst.TropicalWeight(self.arc.weight)
 *             return weight             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, TropicalWeight weight):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_weight));
  __pyx_r = ((PyObject *)__pyx_v_weight);
  goto __pyx_L0;

  /* "openpyfst.pyx":273
 * 
 *     property weight:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef TropicalWeight weight = TropicalWeight.__new__(TropicalWeight)
 *             weight.weight = new openfst.TropicalWeight(self.arc.weight)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdArc.weight.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_weight);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":278
 *             return weight
 * 
 *         def __set__(self, TropicalWeight weight):             # <<<<<<<<<<<<<<
 *             # TODO create function as_weight(anything) -> Weight
 *             self.arc.weight = weight.weight[0]
 */

/* Python wrapper */
static int __pyx_pw_9openpyfst_6StdArc_6weight_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_weight); /*proto*/
static int __pyx_pw_9openpyfst_6StdArc_6weight_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_weight) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weight), __pyx_ptype_9openpyfst_TropicalWeight, 1, "weight", 0))) __PYX_ERR(0, 278, __pyx_L1_error)
  __pyx_r = __pyx_pf_9openpyfst_6StdArc_6weight_2__set__(((struct __pyx_obj_9openpyfst_StdArc *)__pyx_v_self), ((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_v_weight));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9openpyfst_6StdArc_6weight_2__set__(struct __pyx_obj_9openpyfst_StdArc *__pyx_v_self, struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_weight) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "openpyfst.pyx":280
 *         def __set__(self, TropicalWeight weight):
 *             # TODO create function as_weight(anything) -> Weight
 *             self.arc.weight = weight.weight[0]             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_v_self->arc->weight = (__pyx_v_weight->weight[0]);

  /* "openpyfst.pyx":278
 *             return weight
 * 
 *         def __set__(self, TropicalWeight weight):             # <<<<<<<<<<<<<<
 *             # TODO create function as_weight(anything) -> Weight
 *             self.arc.weight = weight.weight[0]
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":282
 *             self.arc.weight = weight.weight[0]
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return '<StdArc -> {0} | {1}:{2}/{3}>'.format(self.nextstate,
 *             self.ilabel, self.olabel, self.weight)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_6StdArc_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9openpyfst_6StdArc_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_6StdArc_2__repr__(((struct __pyx_obj_9openpyfst_StdArc *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_6StdArc_2__repr__(struct __pyx_obj_9openpyfst_StdArc *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "openpyfst.pyx":283
 * 
 *     def __repr__(self):
 *         return '<StdArc -> {0} | {1}:{2}/{3}>'.format(self.nextstate,             # <<<<<<<<<<<<<<
 *             self.ilabel, self.olabel, self.weight)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_StdArc_0_1_2_3, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nextstate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "openpyfst.pyx":284
 *     def __repr__(self):
 *         return '<StdArc -> {0} | {1}:{2}/{3}>'.format(self.nextstate,
 *             self.ilabel, self.olabel, self.weight)             # <<<<<<<<<<<<<<
 * 
 * cdef class StdState:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ilabel); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_olabel); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_weight); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(4+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_8, __pyx_t_6);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":282
 *             self.arc.weight = weight.weight[0]
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return '<StdArc -> {0} | {1}:{2}/{3}>'.format(self.nextstate,
 *             self.ilabel, self.olabel, self.weight)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("openpyfst.StdArc.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.arc cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_6StdArc_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9openpyfst_6StdArc_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_6StdArc_4__reduce_cython__(((struct __pyx_obj_9openpyfst_StdArc *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_6StdArc_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9openpyfst_StdArc *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.arc cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.arc cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.arc cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdArc.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.arc cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.arc cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_6StdArc_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9openpyfst_6StdArc_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_6StdArc_6__setstate_cython__(((struct __pyx_obj_9openpyfst_StdArc *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_6StdArc_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9openpyfst_StdArc *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.arc cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.arc cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.arc cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.arc cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdArc.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":291
 *     SEMIRING = TropicalWeight
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """A StdVectorFst state (with StdArc arcs)"""
 *         raise NotImplementedError('cannot create independent state')
 */

/* Python wrapper */
static int __pyx_pw_9openpyfst_8StdState_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openpyfst_8StdState___init__[] = "A StdVectorFst state (with StdArc arcs)";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_9openpyfst_8StdState___init__;
#endif
static int __pyx_pw_9openpyfst_8StdState_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_9openpyfst_8StdState___init__(((struct __pyx_obj_9openpyfst_StdState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9openpyfst_8StdState___init__(CYTHON_UNUSED struct __pyx_obj_9openpyfst_StdState *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "openpyfst.pyx":293
 *     def __init__(self):
 *         """A StdVectorFst state (with StdArc arcs)"""
 *         raise NotImplementedError('cannot create independent state')             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 293, __pyx_L1_error)

  /* "openpyfst.pyx":291
 *     SEMIRING = TropicalWeight
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """A StdVectorFst state (with StdArc arcs)"""
 *         raise NotImplementedError('cannot create independent state')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdState.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":295
 *         raise NotImplementedError('cannot create independent state')
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.fst.NumArcs(self.stateid)
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_9openpyfst_8StdState_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_9openpyfst_8StdState_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_8StdState_2__len__(((struct __pyx_obj_9openpyfst_StdState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_9openpyfst_8StdState_2__len__(struct __pyx_obj_9openpyfst_StdState *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "openpyfst.pyx":296
 * 
 *     def __len__(self):
 *         return self.fst.NumArcs(self.stateid)             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_r = __pyx_v_self->fst->NumArcs(__pyx_v_self->stateid);
  goto __pyx_L0;

  /* "openpyfst.pyx":295
 *         raise NotImplementedError('cannot create independent state')
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.fst.NumArcs(self.stateid)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9openpyfst_8StdState_6generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "openpyfst.pyx":298
 *         return self.fst.NumArcs(self.stateid)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef openfst.ArcIterator[openfst.StdVectorFst]* it
 *         it = new openfst.ArcIterator[openfst.StdVectorFst](self.fst[0], self.stateid)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_8StdState_5__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9openpyfst_8StdState_5__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_8StdState_4__iter__(((struct __pyx_obj_9openpyfst_StdState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_8StdState_4__iter__(struct __pyx_obj_9openpyfst_StdState *__pyx_v_self) {
  struct __pyx_obj_9openpyfst___pyx_scope_struct_1___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_9openpyfst___pyx_scope_struct_1___iter__ *)__pyx_tp_new_9openpyfst___pyx_scope_struct_1___iter__(__pyx_ptype_9openpyfst___pyx_scope_struct_1___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9openpyfst___pyx_scope_struct_1___iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 298, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9openpyfst_8StdState_6generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_StdState___iter, __pyx_n_s_openpyfst); if (unlikely(!gen)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("openpyfst.StdState.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9openpyfst_8StdState_6generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9openpyfst___pyx_scope_struct_1___iter__ *__pyx_cur_scope = ((struct __pyx_obj_9openpyfst___pyx_scope_struct_1___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char const *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L9_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 298, __pyx_L1_error)

  /* "openpyfst.pyx":300
 *     def __iter__(self):
 *         cdef openfst.ArcIterator[openfst.StdVectorFst]* it
 *         it = new openfst.ArcIterator[openfst.StdVectorFst](self.fst[0], self.stateid)             # <<<<<<<<<<<<<<
 *         cdef StdArc arc
 *         try:
 */
  __pyx_cur_scope->__pyx_v_it = new fst::ArcIterator<fst::StdVectorFst> ((__pyx_cur_scope->__pyx_v_self->fst[0]), __pyx_cur_scope->__pyx_v_self->stateid);

  /* "openpyfst.pyx":302
 *         it = new openfst.ArcIterator[openfst.StdVectorFst](self.fst[0], self.stateid)
 *         cdef StdArc arc
 *         try:             # <<<<<<<<<<<<<<
 *             while not it.Done():
 *                 arc = StdArc.__new__(StdArc)
 */
  /*try:*/ {

    /* "openpyfst.pyx":303
 *         cdef StdArc arc
 *         try:
 *             while not it.Done():             # <<<<<<<<<<<<<<
 *                 arc = StdArc.__new__(StdArc)
 *                 arc.arc = <openfst.StdArc*> &it.Value()
 */
    while (1) {
      __pyx_t_1 = ((!(__pyx_cur_scope->__pyx_v_it->Done() != 0)) != 0);
      if (!__pyx_t_1) break;

      /* "openpyfst.pyx":304
 *         try:
 *             while not it.Done():
 *                 arc = StdArc.__new__(StdArc)             # <<<<<<<<<<<<<<
 *                 arc.arc = <openfst.StdArc*> &it.Value()
 *                 yield arc
 */
      __pyx_t_2 = ((PyObject *)__pyx_tp_new_9openpyfst_StdArc(((PyTypeObject *)__pyx_ptype_9openpyfst_StdArc), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L5_error)
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __Pyx_XGOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_arc));
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_arc, ((struct __pyx_obj_9openpyfst_StdArc *)__pyx_t_2));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "openpyfst.pyx":305
 *             while not it.Done():
 *                 arc = StdArc.__new__(StdArc)
 *                 arc.arc = <openfst.StdArc*> &it.Value()             # <<<<<<<<<<<<<<
 *                 yield arc
 *                 it.Next()
 */
      __pyx_cur_scope->__pyx_v_arc->arc = ((fst::StdArc *)(&__pyx_cur_scope->__pyx_v_it->Value()));

      /* "openpyfst.pyx":306
 *                 arc = StdArc.__new__(StdArc)
 *                 arc.arc = <openfst.StdArc*> &it.Value()
 *                 yield arc             # <<<<<<<<<<<<<<
 *                 it.Next()
 *         finally:
 */
      __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_arc));
      __pyx_r = ((PyObject *)__pyx_cur_scope->__pyx_v_arc);
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L9_resume_from_yield:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 306, __pyx_L5_error)

      /* "openpyfst.pyx":307
 *                 arc.arc = <openfst.StdArc*> &it.Value()
 *                 yield arc
 *                 it.Next()             # <<<<<<<<<<<<<<
 *         finally:
 *             del it
 */
      __pyx_cur_scope->__pyx_v_it->Next();
    }
  }

  /* "openpyfst.pyx":309
 *                 it.Next()
 *         finally:
 *             del it             # <<<<<<<<<<<<<<
 * 
 *     property arcs:
 */
  /*finally:*/ {
    /*normal exit:*/{
      delete __pyx_cur_scope->__pyx_v_it;
      goto __pyx_L6;
    }
    __pyx_L5_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_assign
      __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0)) __Pyx_ErrFetch(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __pyx_t_3 = __pyx_lineno; __pyx_t_4 = __pyx_clineno; __pyx_t_5 = __pyx_filename;
      {
        delete __pyx_cur_scope->__pyx_v_it;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ErrRestore(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0;
      __pyx_lineno = __pyx_t_3; __pyx_clineno = __pyx_t_4; __pyx_filename = __pyx_t_5;
      goto __pyx_L1_error;
    }
    __pyx_L6:;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "openpyfst.pyx":298
 *         return self.fst.NumArcs(self.stateid)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         cdef openfst.ArcIterator[openfst.StdVectorFst]* it
 *         it = new openfst.ArcIterator[openfst.StdVectorFst](self.fst[0], self.stateid)
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":313
 *     property arcs:
 *         """state.arcs: all the arcs starting from this state"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return iter(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_8StdState_4arcs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9openpyfst_8StdState_4arcs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_8StdState_4arcs___get__(((struct __pyx_obj_9openpyfst_StdState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_8StdState_4arcs___get__(struct __pyx_obj_9openpyfst_StdState *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "openpyfst.pyx":314
 *         """state.arcs: all the arcs starting from this state"""
 *         def __get__(self):
 *             return iter(self)             # <<<<<<<<<<<<<<
 * 
 *     property final:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":313
 *     property arcs:
 *         """state.arcs: all the arcs starting from this state"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return iter(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdState.arcs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":317
 * 
 *     property final:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef TropicalWeight weight = TropicalWeight.__new__(TropicalWeight)
 *             weight.weight = new openfst.TropicalWeight(self.fst.Final(self.stateid))
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_8StdState_5final_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9openpyfst_8StdState_5final_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_8StdState_5final___get__(((struct __pyx_obj_9openpyfst_StdState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_8StdState_5final___get__(struct __pyx_obj_9openpyfst_StdState *__pyx_v_self) {
  struct __pyx_obj_9openpyfst_TropicalWeight *__pyx_v_weight = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "openpyfst.pyx":318
 *     property final:
 *         def __get__(self):
 *             cdef TropicalWeight weight = TropicalWeight.__new__(TropicalWeight)             # <<<<<<<<<<<<<<
 *             weight.weight = new openfst.TropicalWeight(self.fst.Final(self.stateid))
 *             return weight
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_9openpyfst_TropicalWeight(((PyTypeObject *)__pyx_ptype_9openpyfst_TropicalWeight), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_weight = ((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "openpyfst.pyx":319
 *         def __get__(self):
 *             cdef TropicalWeight weight = TropicalWeight.__new__(TropicalWeight)
 *             weight.weight = new openfst.TropicalWeight(self.fst.Final(self.stateid))             # <<<<<<<<<<<<<<
 *             return weight
 * 
 */
  __pyx_v_weight->weight = new fst::TropicalWeight(__pyx_v_self->fst->Final(__pyx_v_self->stateid));

  /* "openpyfst.pyx":320
 *             cdef TropicalWeight weight = TropicalWeight.__new__(TropicalWeight)
 *             weight.weight = new openfst.TropicalWeight(self.fst.Final(self.stateid))
 *             return weight             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, weight):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_weight));
  __pyx_r = ((PyObject *)__pyx_v_weight);
  goto __pyx_L0;

  /* "openpyfst.pyx":317
 * 
 *     property final:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef TropicalWeight weight = TropicalWeight.__new__(TropicalWeight)
 *             weight.weight = new openfst.TropicalWeight(self.fst.Final(self.stateid))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdState.final.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_weight);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":322
 *             return weight
 * 
 *         def __set__(self, weight):             # <<<<<<<<<<<<<<
 *             if not isinstance(weight, TropicalWeight):
 *                 weight = TropicalWeight(weight)
 */

/* Python wrapper */
static int __pyx_pw_9openpyfst_8StdState_5final_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_weight); /*proto*/
static int __pyx_pw_9openpyfst_8StdState_5final_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_weight) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_8StdState_5final_2__set__(((struct __pyx_obj_9openpyfst_StdState *)__pyx_v_self), ((PyObject *)__pyx_v_weight));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9openpyfst_8StdState_5final_2__set__(struct __pyx_obj_9openpyfst_StdState *__pyx_v_self, PyObject *__pyx_v_weight) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_weight);

  /* "openpyfst.pyx":323
 * 
 *         def __set__(self, weight):
 *             if not isinstance(weight, TropicalWeight):             # <<<<<<<<<<<<<<
 *                 weight = TropicalWeight(weight)
 *             self.fst.SetFinal(self.stateid, (<TropicalWeight> weight).weight[0])
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_weight, __pyx_ptype_9openpyfst_TropicalWeight); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "openpyfst.pyx":324
 *         def __set__(self, weight):
 *             if not isinstance(weight, TropicalWeight):
 *                 weight = TropicalWeight(weight)             # <<<<<<<<<<<<<<
 *             self.fst.SetFinal(self.stateid, (<TropicalWeight> weight).weight[0])
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9openpyfst_TropicalWeight), __pyx_v_weight); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_weight, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "openpyfst.pyx":323
 * 
 *         def __set__(self, weight):
 *             if not isinstance(weight, TropicalWeight):             # <<<<<<<<<<<<<<
 *                 weight = TropicalWeight(weight)
 *             self.fst.SetFinal(self.stateid, (<TropicalWeight> weight).weight[0])
 */
  }

  /* "openpyfst.pyx":325
 *             if not isinstance(weight, TropicalWeight):
 *                 weight = TropicalWeight(weight)
 *             self.fst.SetFinal(self.stateid, (<TropicalWeight> weight).weight[0])             # <<<<<<<<<<<<<<
 * 
 *     property initial:
 */
  __pyx_v_self->fst->SetFinal(__pyx_v_self->stateid, (((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_v_weight)->weight[0]));

  /* "openpyfst.pyx":322
 *             return weight
 * 
 *         def __set__(self, weight):             # <<<<<<<<<<<<<<
 *             if not isinstance(weight, TropicalWeight):
 *                 weight = TropicalWeight(weight)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openpyfst.StdState.final.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_weight);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":328
 * 
 *     property initial:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.stateid == self.fst.Start()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_8StdState_7initial_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9openpyfst_8StdState_7initial_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_8StdState_7initial___get__(((struct __pyx_obj_9openpyfst_StdState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_8StdState_7initial___get__(struct __pyx_obj_9openpyfst_StdState *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "openpyfst.pyx":329
 *     property initial:
 *         def __get__(self):
 *             return self.stateid == self.fst.Start()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->stateid == __pyx_v_self->fst->Start())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":328
 * 
 *     property initial:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.stateid == self.fst.Start()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdState.initial.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":331
 *             return self.stateid == self.fst.Start()
 * 
 *         def __set__(self, v):             # <<<<<<<<<<<<<<
 *             if v:
 *                 self.fst.SetStart(self.stateid)
 */

/* Python wrapper */
static int __pyx_pw_9openpyfst_8StdState_7initial_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static int __pyx_pw_9openpyfst_8StdState_7initial_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_8StdState_7initial_2__set__(((struct __pyx_obj_9openpyfst_StdState *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9openpyfst_8StdState_7initial_2__set__(struct __pyx_obj_9openpyfst_StdState *__pyx_v_self, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "openpyfst.pyx":332
 * 
 *         def __set__(self, v):
 *             if v:             # <<<<<<<<<<<<<<
 *                 self.fst.SetStart(self.stateid)
 *             elif self.stateid == self.fst.Start():
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_v); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 332, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "openpyfst.pyx":333
 *         def __set__(self, v):
 *             if v:
 *                 self.fst.SetStart(self.stateid)             # <<<<<<<<<<<<<<
 *             elif self.stateid == self.fst.Start():
 *                 self.fst.SetStart(-1)
 */
    __pyx_v_self->fst->SetStart(__pyx_v_self->stateid);

    /* "openpyfst.pyx":332
 * 
 *         def __set__(self, v):
 *             if v:             # <<<<<<<<<<<<<<
 *                 self.fst.SetStart(self.stateid)
 *             elif self.stateid == self.fst.Start():
 */
    goto __pyx_L3;
  }

  /* "openpyfst.pyx":334
 *             if v:
 *                 self.fst.SetStart(self.stateid)
 *             elif self.stateid == self.fst.Start():             # <<<<<<<<<<<<<<
 *                 self.fst.SetStart(-1)
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->stateid == __pyx_v_self->fst->Start()) != 0);
  if (__pyx_t_1) {

    /* "openpyfst.pyx":335
 *                 self.fst.SetStart(self.stateid)
 *             elif self.stateid == self.fst.Start():
 *                 self.fst.SetStart(-1)             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
    __pyx_v_self->fst->SetStart(-1);

    /* "openpyfst.pyx":334
 *             if v:
 *                 self.fst.SetStart(self.stateid)
 *             elif self.stateid == self.fst.Start():             # <<<<<<<<<<<<<<
 *                 self.fst.SetStart(-1)
 * 
 */
  }
  __pyx_L3:;

  /* "openpyfst.pyx":331
 *             return self.stateid == self.fst.Start()
 * 
 *         def __set__(self, v):             # <<<<<<<<<<<<<<
 *             if v:
 *                 self.fst.SetStart(self.stateid)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("openpyfst.StdState.initial.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":337
 *                 self.fst.SetStart(-1)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return '<StdState #{0} with {1} arcs>'.format(self.stateid, len(self))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_8StdState_8__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9openpyfst_8StdState_8__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_8StdState_7__repr__(((struct __pyx_obj_9openpyfst_StdState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_8StdState_7__repr__(struct __pyx_obj_9openpyfst_StdState *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "openpyfst.pyx":338
 * 
 *     def __repr__(self):
 *         return '<StdState #{0} with {1} arcs>'.format(self.stateid, len(self))             # <<<<<<<<<<<<<<
 * 
 * cdef class StdVectorFst(_Fst):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_StdState_0_with_1_arcs, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->stateid); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_Length(((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 338, __pyx_L1_error)
  __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_5);
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":337
 *                 self.fst.SetStart(-1)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return '<StdState #{0} with {1} arcs>'.format(self.stateid, len(self))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("openpyfst.StdState.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":287
 * 
 * cdef class StdState:
 *     cdef public int stateid             # <<<<<<<<<<<<<<
 *     cdef openfst.StdVectorFst* fst
 *     SEMIRING = TropicalWeight
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_8StdState_7stateid_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9openpyfst_8StdState_7stateid_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_8StdState_7stateid___get__(((struct __pyx_obj_9openpyfst_StdState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_8StdState_7stateid___get__(struct __pyx_obj_9openpyfst_StdState *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->stateid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdState.stateid.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9openpyfst_8StdState_7stateid_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9openpyfst_8StdState_7stateid_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_8StdState_7stateid_2__set__(((struct __pyx_obj_9openpyfst_StdState *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9openpyfst_8StdState_7stateid_2__set__(struct __pyx_obj_9openpyfst_StdState *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 287, __pyx_L1_error)
  __pyx_v_self->stateid = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("openpyfst.StdState.stateid.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_8StdState_10__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9openpyfst_8StdState_10__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_8StdState_9__reduce_cython__(((struct __pyx_obj_9openpyfst_StdState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_8StdState_9__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9openpyfst_StdState *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdState.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_8StdState_12__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9openpyfst_8StdState_12__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_8StdState_11__setstate_cython__(((struct __pyx_obj_9openpyfst_StdState *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_8StdState_11__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9openpyfst_StdState *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdState.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":345
 *     SEMIRING = TropicalWeight
 * 
 *     def __init__(self, source=None, isyms=None, osyms=None):             # <<<<<<<<<<<<<<
 *         """StdVectorFst(isyms=None, osyms=None) -> empty finite-state transducer
 *         StdVectorFst(source) -> copy of the source transducer"""
 */

/* Python wrapper */
static int __pyx_pw_9openpyfst_12StdVectorFst_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst___init__[] = "StdVectorFst(isyms=None, osyms=None) -> empty finite-state transducer\n        StdVectorFst(source) -> copy of the source transducer";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_9openpyfst_12StdVectorFst___init__;
#endif
static int __pyx_pw_9openpyfst_12StdVectorFst_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source = 0;
  PyObject *__pyx_v_isyms = 0;
  PyObject *__pyx_v_osyms = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source,&__pyx_n_s_isyms,&__pyx_n_s_osyms,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isyms);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_osyms);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 345, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_source = values[0];
    __pyx_v_isyms = values[1];
    __pyx_v_osyms = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 345, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.StdVectorFst.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst___init__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), __pyx_v_source, __pyx_v_isyms, __pyx_v_osyms);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9openpyfst_12StdVectorFst___init__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_source, PyObject *__pyx_v_isyms, PyObject *__pyx_v_osyms) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  fst::StdVectorFst *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "openpyfst.pyx":348
 *         """StdVectorFst(isyms=None, osyms=None) -> empty finite-state transducer
 *         StdVectorFst(source) -> copy of the source transducer"""
 *         if isinstance(source, StdVectorFst):             # <<<<<<<<<<<<<<
 *             self.fst = <openfst.StdVectorFst*> self.fst.Copy()
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_source, __pyx_ptype_9openpyfst_StdVectorFst); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "openpyfst.pyx":349
 *         StdVectorFst(source) -> copy of the source transducer"""
 *         if isinstance(source, StdVectorFst):
 *             self.fst = <openfst.StdVectorFst*> self.fst.Copy()             # <<<<<<<<<<<<<<
 *         else:
 *             self.fst = new openfst.StdVectorFst()
 */
    __pyx_v_self->fst = ((fst::StdVectorFst *)__pyx_v_self->fst->Copy());

    /* "openpyfst.pyx":348
 *         """StdVectorFst(isyms=None, osyms=None) -> empty finite-state transducer
 *         StdVectorFst(source) -> copy of the source transducer"""
 *         if isinstance(source, StdVectorFst):             # <<<<<<<<<<<<<<
 *             self.fst = <openfst.StdVectorFst*> self.fst.Copy()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "openpyfst.pyx":351
 *             self.fst = <openfst.StdVectorFst*> self.fst.Copy()
 *         else:
 *             self.fst = new openfst.StdVectorFst()             # <<<<<<<<<<<<<<
 *             # todo: implement LogVectorFst.
 *             #if isinstance(source, LogVectorFst):
 */
  /*else*/ {
    try {
      __pyx_t_3 = new fst::StdVectorFst();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 351, __pyx_L1_error)
    }
    __pyx_v_self->fst = __pyx_t_3;
  }
  __pyx_L3:;

  /* "openpyfst.pyx":358
 *             #    isyms, osyms = source.isyms, source.osyms
 *         # Copy symbol tables (of source or given)
 *         if isyms is not None:             # <<<<<<<<<<<<<<
 *             self.isyms = isyms.copy()
 *         if osyms is not None:
 */
  __pyx_t_2 = (__pyx_v_isyms != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "openpyfst.pyx":359
 *         # Copy symbol tables (of source or given)
 *         if isyms is not None:
 *             self.isyms = isyms.copy()             # <<<<<<<<<<<<<<
 *         if osyms is not None:
 *             self.osyms = (self.isyms if (isyms is osyms) else osyms.copy())
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_isyms, __pyx_n_s_copy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_9openpyfst_SymbolTable))))) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_self->isyms);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->isyms));
    __pyx_v_self->isyms = ((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "openpyfst.pyx":358
 *             #    isyms, osyms = source.isyms, source.osyms
 *         # Copy symbol tables (of source or given)
 *         if isyms is not None:             # <<<<<<<<<<<<<<
 *             self.isyms = isyms.copy()
 *         if osyms is not None:
 */
  }

  /* "openpyfst.pyx":360
 *         if isyms is not None:
 *             self.isyms = isyms.copy()
 *         if osyms is not None:             # <<<<<<<<<<<<<<
 *             self.osyms = (self.isyms if (isyms is osyms) else osyms.copy())
 * 
 */
  __pyx_t_1 = (__pyx_v_osyms != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "openpyfst.pyx":361
 *             self.isyms = isyms.copy()
 *         if osyms is not None:
 *             self.osyms = (self.isyms if (isyms is osyms) else osyms.copy())             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_t_2 = (__pyx_v_isyms == __pyx_v_osyms);
    if ((__pyx_t_2 != 0)) {
      __Pyx_INCREF(((PyObject *)__pyx_v_self->isyms));
      __pyx_t_4 = ((PyObject *)__pyx_v_self->isyms);
    } else {
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_osyms, __pyx_n_s_copy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 361, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 361, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_9openpyfst_SymbolTable))))) __PYX_ERR(0, 361, __pyx_L1_error)
      __pyx_t_4 = __pyx_t_5;
      __pyx_t_5 = 0;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_self->osyms);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->osyms));
    __pyx_v_self->osyms = ((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "openpyfst.pyx":360
 *         if isyms is not None:
 *             self.isyms = isyms.copy()
 *         if osyms is not None:             # <<<<<<<<<<<<<<
 *             self.osyms = (self.isyms if (isyms is osyms) else osyms.copy())
 * 
 */
  }

  /* "openpyfst.pyx":345
 *     SEMIRING = TropicalWeight
 * 
 *     def __init__(self, source=None, isyms=None, osyms=None):             # <<<<<<<<<<<<<<
 *         """StdVectorFst(isyms=None, osyms=None) -> empty finite-state transducer
 *         StdVectorFst(source) -> copy of the source transducer"""
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":363
 *             self.osyms = (self.isyms if (isyms is osyms) else osyms.copy())
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.fst, self.isyms, self.osyms
 * 
 */

/* Python wrapper */
static void __pyx_pw_9openpyfst_12StdVectorFst_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9openpyfst_12StdVectorFst_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_9openpyfst_12StdVectorFst_2__dealloc__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9openpyfst_12StdVectorFst_2__dealloc__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "openpyfst.pyx":364
 * 
 *     def __dealloc__(self):
 *         del self.fst, self.isyms, self.osyms             # <<<<<<<<<<<<<<
 * 
 *     def _init_tables(self):
 */
  delete __pyx_v_self->fst;
  if (__Pyx_PyObject_DelAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isyms) < 0) __PYX_ERR(0, 364, __pyx_L1_error)
  if (__Pyx_PyObject_DelAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_osyms) < 0) __PYX_ERR(0, 364, __pyx_L1_error)

  /* "openpyfst.pyx":363
 *             self.osyms = (self.isyms if (isyms is osyms) else osyms.copy())
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.fst, self.isyms, self.osyms
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("openpyfst.StdVectorFst.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "openpyfst.pyx":366
 *         del self.fst, self.isyms, self.osyms
 * 
 *     def _init_tables(self):             # <<<<<<<<<<<<<<
 *         if self.fst.MutableInputSymbols() != NULL:
 *             self.isyms = SymbolTable.__new__(SymbolTable)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_5_init_tables(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_5_init_tables(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_tables (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_4_init_tables(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_4_init_tables(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("_init_tables", 0);

  /* "openpyfst.pyx":367
 * 
 *     def _init_tables(self):
 *         if self.fst.MutableInputSymbols() != NULL:             # <<<<<<<<<<<<<<
 *             self.isyms = SymbolTable.__new__(SymbolTable)
 *             self.isyms.table = new sym.SymbolTable(self.fst.MutableInputSymbols()[0])
 */
  __pyx_t_1 = ((__pyx_v_self->fst->MutableInputSymbols() != NULL) != 0);
  if (__pyx_t_1) {

    /* "openpyfst.pyx":368
 *     def _init_tables(self):
 *         if self.fst.MutableInputSymbols() != NULL:
 *             self.isyms = SymbolTable.__new__(SymbolTable)             # <<<<<<<<<<<<<<
 *             self.isyms.table = new sym.SymbolTable(self.fst.MutableInputSymbols()[0])
 *             self.fst.SetInputSymbols(NULL)
 */
    __pyx_t_2 = ((PyObject *)__pyx_tp_new_9openpyfst_SymbolTable(((PyTypeObject *)__pyx_ptype_9openpyfst_SymbolTable), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
    __Pyx_GOTREF(__pyx_v_self->isyms);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->isyms));
    __pyx_v_self->isyms = ((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "openpyfst.pyx":369
 *         if self.fst.MutableInputSymbols() != NULL:
 *             self.isyms = SymbolTable.__new__(SymbolTable)
 *             self.isyms.table = new sym.SymbolTable(self.fst.MutableInputSymbols()[0])             # <<<<<<<<<<<<<<
 *             self.fst.SetInputSymbols(NULL)
 *         if self.fst.MutableOutputSymbols() != NULL:
 */
    __pyx_v_self->isyms->table = new fst::SymbolTable((__pyx_v_self->fst->MutableInputSymbols()[0]));

    /* "openpyfst.pyx":370
 *             self.isyms = SymbolTable.__new__(SymbolTable)
 *             self.isyms.table = new sym.SymbolTable(self.fst.MutableInputSymbols()[0])
 *             self.fst.SetInputSymbols(NULL)             # <<<<<<<<<<<<<<
 *         if self.fst.MutableOutputSymbols() != NULL:
 *             self.osyms = SymbolTable.__new__(SymbolTable)
 */
    __pyx_v_self->fst->SetInputSymbols(NULL);

    /* "openpyfst.pyx":367
 * 
 *     def _init_tables(self):
 *         if self.fst.MutableInputSymbols() != NULL:             # <<<<<<<<<<<<<<
 *             self.isyms = SymbolTable.__new__(SymbolTable)
 *             self.isyms.table = new sym.SymbolTable(self.fst.MutableInputSymbols()[0])
 */
  }

  /* "openpyfst.pyx":371
 *             self.isyms.table = new sym.SymbolTable(self.fst.MutableInputSymbols()[0])
 *             self.fst.SetInputSymbols(NULL)
 *         if self.fst.MutableOutputSymbols() != NULL:             # <<<<<<<<<<<<<<
 *             self.osyms = SymbolTable.__new__(SymbolTable)
 *             self.osyms.table = new sym.SymbolTable(self.fst.MutableOutputSymbols()[0])
 */
  __pyx_t_1 = ((__pyx_v_self->fst->MutableOutputSymbols() != NULL) != 0);
  if (__pyx_t_1) {

    /* "openpyfst.pyx":372
 *             self.fst.SetInputSymbols(NULL)
 *         if self.fst.MutableOutputSymbols() != NULL:
 *             self.osyms = SymbolTable.__new__(SymbolTable)             # <<<<<<<<<<<<<<
 *             self.osyms.table = new sym.SymbolTable(self.fst.MutableOutputSymbols()[0])
 *             self.fst.SetOutputSymbols(NULL)
 */
    __pyx_t_2 = ((PyObject *)__pyx_tp_new_9openpyfst_SymbolTable(((PyTypeObject *)__pyx_ptype_9openpyfst_SymbolTable), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 372, __pyx_L1_error)
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
    __Pyx_GOTREF(__pyx_v_self->osyms);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->osyms));
    __pyx_v_self->osyms = ((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "openpyfst.pyx":373
 *         if self.fst.MutableOutputSymbols() != NULL:
 *             self.osyms = SymbolTable.__new__(SymbolTable)
 *             self.osyms.table = new sym.SymbolTable(self.fst.MutableOutputSymbols()[0])             # <<<<<<<<<<<<<<
 *             self.fst.SetOutputSymbols(NULL)
 *         # reduce memory usage if isyms == osyms
 */
    __pyx_v_self->osyms->table = new fst::SymbolTable((__pyx_v_self->fst->MutableOutputSymbols()[0]));

    /* "openpyfst.pyx":374
 *             self.osyms = SymbolTable.__new__(SymbolTable)
 *             self.osyms.table = new sym.SymbolTable(self.fst.MutableOutputSymbols()[0])
 *             self.fst.SetOutputSymbols(NULL)             # <<<<<<<<<<<<<<
 *         # reduce memory usage if isyms == osyms
 *         if self.isyms == self.osyms:
 */
    __pyx_v_self->fst->SetOutputSymbols(NULL);

    /* "openpyfst.pyx":371
 *             self.isyms.table = new sym.SymbolTable(self.fst.MutableInputSymbols()[0])
 *             self.fst.SetInputSymbols(NULL)
 *         if self.fst.MutableOutputSymbols() != NULL:             # <<<<<<<<<<<<<<
 *             self.osyms = SymbolTable.__new__(SymbolTable)
 *             self.osyms.table = new sym.SymbolTable(self.fst.MutableOutputSymbols()[0])
 */
  }

  /* "openpyfst.pyx":376
 *             self.fst.SetOutputSymbols(NULL)
 *         # reduce memory usage if isyms == osyms
 *         if self.isyms == self.osyms:             # <<<<<<<<<<<<<<
 *             self.osyms = self.isyms
 * 
 */
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->isyms), ((PyObject *)__pyx_v_self->osyms), Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 376, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "openpyfst.pyx":377
 *         # reduce memory usage if isyms == osyms
 *         if self.isyms == self.osyms:
 *             self.osyms = self.isyms             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_self->isyms);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->osyms);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->osyms));
    __pyx_v_self->osyms = ((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "openpyfst.pyx":376
 *             self.fst.SetOutputSymbols(NULL)
 *         # reduce memory usage if isyms == osyms
 *         if self.isyms == self.osyms:             # <<<<<<<<<<<<<<
 *             self.osyms = self.isyms
 * 
 */
  }

  /* "openpyfst.pyx":366
 *         del self.fst, self.isyms, self.osyms
 * 
 *     def _init_tables(self):             # <<<<<<<<<<<<<<
 *         if self.fst.MutableInputSymbols() != NULL:
 *             self.isyms = SymbolTable.__new__(SymbolTable)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("openpyfst.StdVectorFst._init_tables", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":379
 *             self.osyms = self.isyms
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.fst.NumStates()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_9openpyfst_12StdVectorFst_7__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_9openpyfst_12StdVectorFst_7__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_6__len__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_9openpyfst_12StdVectorFst_6__len__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "openpyfst.pyx":380
 * 
 *     def __len__(self):
 *         return self.fst.NumStates()             # <<<<<<<<<<<<<<
 * 
 *     def num_arcs(self):
 */
  __pyx_r = __pyx_v_self->fst->NumStates();
  goto __pyx_L0;

  /* "openpyfst.pyx":379
 *             self.osyms = self.isyms
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.fst.NumStates()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":382
 *         return self.fst.NumStates()
 * 
 *     def num_arcs(self):             # <<<<<<<<<<<<<<
 *         """fst.num_arcs() -> total number of arcs in the transducer"""
 *         return sum(len(state) for state in self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_9num_arcs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_8num_arcs[] = "fst.num_arcs() -> total number of arcs in the transducer";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_9num_arcs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("num_arcs (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_8num_arcs(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9openpyfst_12StdVectorFst_8num_arcs_2generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "openpyfst.pyx":384
 *     def num_arcs(self):
 *         """fst.num_arcs() -> total number of arcs in the transducer"""
 *         return sum(len(state) for state in self)             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_8num_arcs_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_9openpyfst___pyx_scope_struct_3_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_9openpyfst___pyx_scope_struct_3_genexpr *)__pyx_tp_new_9openpyfst___pyx_scope_struct_3_genexpr(__pyx_ptype_9openpyfst___pyx_scope_struct_3_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9openpyfst___pyx_scope_struct_3_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 384, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_9openpyfst___pyx_scope_struct_2_num_arcs *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9openpyfst_12StdVectorFst_8num_arcs_2generator4, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_num_arcs_locals_genexpr, __pyx_n_s_openpyfst); if (unlikely(!gen)) __PYX_ERR(0, 384, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("openpyfst.StdVectorFst.num_arcs.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9openpyfst_12StdVectorFst_8num_arcs_2generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9openpyfst___pyx_scope_struct_3_genexpr *__pyx_cur_scope = ((struct __pyx_obj_9openpyfst___pyx_scope_struct_3_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 384, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 384, __pyx_L1_error) }
  if (likely(PyList_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self))) || PyTuple_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self))) {
    __pyx_t_1 = ((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 384, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 384, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 384, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 384, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 384, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 384, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_state);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_state, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = PyObject_Length(__pyx_cur_scope->__pyx_v_state); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 384, __pyx_L1_error)
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 384, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":382
 *         return self.fst.NumStates()
 * 
 *     def num_arcs(self):             # <<<<<<<<<<<<<<
 *         """fst.num_arcs() -> total number of arcs in the transducer"""
 *         return sum(len(state) for state in self)
 */

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_8num_arcs(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  struct __pyx_obj_9openpyfst___pyx_scope_struct_2_num_arcs *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("num_arcs", 0);
  __pyx_cur_scope = (struct __pyx_obj_9openpyfst___pyx_scope_struct_2_num_arcs *)__pyx_tp_new_9openpyfst___pyx_scope_struct_2_num_arcs(__pyx_ptype_9openpyfst___pyx_scope_struct_2_num_arcs, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9openpyfst___pyx_scope_struct_2_num_arcs *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 382, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "openpyfst.pyx":384
 *     def num_arcs(self):
 *         """fst.num_arcs() -> total number of arcs in the transducer"""
 *         return sum(len(state) for state in self)             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_9openpyfst_12StdVectorFst_8num_arcs_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":382
 *         return self.fst.NumStates()
 * 
 *     def num_arcs(self):             # <<<<<<<<<<<<<<
 *         """fst.num_arcs() -> total number of arcs in the transducer"""
 *         return sum(len(state) for state in self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.num_arcs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":386
 *         return sum(len(state) for state in self)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return '<StdVectorFst with {0} states>'.format(len(self))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_11__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_11__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_10__repr__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_10__repr__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "openpyfst.pyx":387
 * 
 *     def __repr__(self):
 *         return '<StdVectorFst with {0} states>'.format(len(self))             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_StdVectorFst_with_0_states, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 387, __pyx_L1_error)
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":386
 *         return sum(len(state) for state in self)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return '<StdVectorFst with {0} states>'.format(len(self))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":389
 *         return '<StdVectorFst with {0} states>'.format(len(self))
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """fst.copy() -> a copy of the transducer"""
 *         cdef StdVectorFst result = StdVectorFst.__new__(StdVectorFst)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_13copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_12copy[] = "fst.copy() -> a copy of the transducer";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_13copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_12copy(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_12copy(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "openpyfst.pyx":391
 *     def copy(self):
 *         """fst.copy() -> a copy of the transducer"""
 *         cdef StdVectorFst result = StdVectorFst.__new__(StdVectorFst)             # <<<<<<<<<<<<<<
 *         if self.isyms is not None:
 *             result.isyms = self.isyms.copy()
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_9openpyfst_StdVectorFst(((PyTypeObject *)__pyx_ptype_9openpyfst_StdVectorFst), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_result = ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "openpyfst.pyx":392
 *         """fst.copy() -> a copy of the transducer"""
 *         cdef StdVectorFst result = StdVectorFst.__new__(StdVectorFst)
 *         if self.isyms is not None:             # <<<<<<<<<<<<<<
 *             result.isyms = self.isyms.copy()
 *         if self.osyms is not None:
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_self->isyms) != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "openpyfst.pyx":393
 *         cdef StdVectorFst result = StdVectorFst.__new__(StdVectorFst)
 *         if self.isyms is not None:
 *             result.isyms = self.isyms.copy()             # <<<<<<<<<<<<<<
 *         if self.osyms is not None:
 *             result.osyms = (result.isyms if (self.isyms is self.osyms)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->isyms), __pyx_n_s_copy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9openpyfst_SymbolTable))))) __PYX_ERR(0, 393, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_result->isyms);
    __Pyx_DECREF(((PyObject *)__pyx_v_result->isyms));
    __pyx_v_result->isyms = ((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "openpyfst.pyx":392
 *         """fst.copy() -> a copy of the transducer"""
 *         cdef StdVectorFst result = StdVectorFst.__new__(StdVectorFst)
 *         if self.isyms is not None:             # <<<<<<<<<<<<<<
 *             result.isyms = self.isyms.copy()
 *         if self.osyms is not None:
 */
  }

  /* "openpyfst.pyx":394
 *         if self.isyms is not None:
 *             result.isyms = self.isyms.copy()
 *         if self.osyms is not None:             # <<<<<<<<<<<<<<
 *             result.osyms = (result.isyms if (self.isyms is self.osyms)
 *                 else self.osyms.copy())
 */
  __pyx_t_3 = (((PyObject *)__pyx_v_self->osyms) != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "openpyfst.pyx":395
 *             result.isyms = self.isyms.copy()
 *         if self.osyms is not None:
 *             result.osyms = (result.isyms if (self.isyms is self.osyms)             # <<<<<<<<<<<<<<
 *                 else self.osyms.copy())
 *         result.fst = <openfst.StdVectorFst*> self.fst.Copy()
 */
    __pyx_t_2 = (__pyx_v_self->isyms == __pyx_v_self->osyms);
    if ((__pyx_t_2 != 0)) {
      __Pyx_INCREF(((PyObject *)__pyx_v_result->isyms));
      __pyx_t_1 = ((PyObject *)__pyx_v_result->isyms);
    } else {

      /* "openpyfst.pyx":396
 *         if self.osyms is not None:
 *             result.osyms = (result.isyms if (self.isyms is self.osyms)
 *                 else self.osyms.copy())             # <<<<<<<<<<<<<<
 *         result.fst = <openfst.StdVectorFst*> self.fst.Copy()
 *         return result
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->osyms), __pyx_n_s_copy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 396, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 396, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_9openpyfst_SymbolTable))))) __PYX_ERR(0, 396, __pyx_L1_error)
      __pyx_t_1 = __pyx_t_4;
      __pyx_t_4 = 0;
    }

    /* "openpyfst.pyx":395
 *             result.isyms = self.isyms.copy()
 *         if self.osyms is not None:
 *             result.osyms = (result.isyms if (self.isyms is self.osyms)             # <<<<<<<<<<<<<<
 *                 else self.osyms.copy())
 *         result.fst = <openfst.StdVectorFst*> self.fst.Copy()
 */
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_result->osyms);
    __Pyx_DECREF(((PyObject *)__pyx_v_result->osyms));
    __pyx_v_result->osyms = ((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "openpyfst.pyx":394
 *         if self.isyms is not None:
 *             result.isyms = self.isyms.copy()
 *         if self.osyms is not None:             # <<<<<<<<<<<<<<
 *             result.osyms = (result.isyms if (self.isyms is self.osyms)
 *                 else self.osyms.copy())
 */
  }

  /* "openpyfst.pyx":397
 *             result.osyms = (result.isyms if (self.isyms is self.osyms)
 *                 else self.osyms.copy())
 *         result.fst = <openfst.StdVectorFst*> self.fst.Copy()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_v_result->fst = ((fst::StdVectorFst *)__pyx_v_self->fst->Copy());

  /* "openpyfst.pyx":398
 *                 else self.osyms.copy())
 *         result.fst = <openfst.StdVectorFst*> self.fst.Copy()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, int stateid):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "openpyfst.pyx":389
 *         return '<StdVectorFst with {0} states>'.format(len(self))
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """fst.copy() -> a copy of the transducer"""
 *         cdef StdVectorFst result = StdVectorFst.__new__(StdVectorFst)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":400
 *         return result
 * 
 *     def __getitem__(self, int stateid):             # <<<<<<<<<<<<<<
 *         if not (0 <= stateid < len(self)):
 *             raise KeyError('state index out of range')
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_15__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_stateid); /*proto*/
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_15__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_stateid) {
  int __pyx_v_stateid;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  assert(__pyx_arg_stateid); {
    __pyx_v_stateid = __Pyx_PyInt_As_int(__pyx_arg_stateid); if (unlikely((__pyx_v_stateid == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 400, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.StdVectorFst.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_14__getitem__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), ((int)__pyx_v_stateid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_14__getitem__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, int __pyx_v_stateid) {
  struct __pyx_obj_9openpyfst_StdState *__pyx_v_state = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  fst::StdVectorFst *__pyx_t_5;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "openpyfst.pyx":401
 * 
 *     def __getitem__(self, int stateid):
 *         if not (0 <= stateid < len(self)):             # <<<<<<<<<<<<<<
 *             raise KeyError('state index out of range')
 *         cdef StdState state = StdState.__new__(StdState)
 */
  __pyx_t_1 = (0 <= __pyx_v_stateid);
  if (__pyx_t_1) {
    __pyx_t_2 = PyObject_Length(((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 401, __pyx_L1_error)
    __pyx_t_1 = (__pyx_v_stateid < __pyx_t_2);
  }
  __pyx_t_3 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "openpyfst.pyx":402
 *     def __getitem__(self, int stateid):
 *         if not (0 <= stateid < len(self)):
 *             raise KeyError('state index out of range')             # <<<<<<<<<<<<<<
 *         cdef StdState state = StdState.__new__(StdState)
 *         state.stateid = stateid
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_KeyError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 402, __pyx_L1_error)

    /* "openpyfst.pyx":401
 * 
 *     def __getitem__(self, int stateid):
 *         if not (0 <= stateid < len(self)):             # <<<<<<<<<<<<<<
 *             raise KeyError('state index out of range')
 *         cdef StdState state = StdState.__new__(StdState)
 */
  }

  /* "openpyfst.pyx":403
 *         if not (0 <= stateid < len(self)):
 *             raise KeyError('state index out of range')
 *         cdef StdState state = StdState.__new__(StdState)             # <<<<<<<<<<<<<<
 *         state.stateid = stateid
 *         state.fst = self.fst
 */
  __pyx_t_4 = ((PyObject *)__pyx_tp_new_9openpyfst_StdState(((PyTypeObject *)__pyx_ptype_9openpyfst_StdState), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __pyx_v_state = ((struct __pyx_obj_9openpyfst_StdState *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "openpyfst.pyx":404
 *             raise KeyError('state index out of range')
 *         cdef StdState state = StdState.__new__(StdState)
 *         state.stateid = stateid             # <<<<<<<<<<<<<<
 *         state.fst = self.fst
 *         return state
 */
  __pyx_v_state->stateid = __pyx_v_stateid;

  /* "openpyfst.pyx":405
 *         cdef StdState state = StdState.__new__(StdState)
 *         state.stateid = stateid
 *         state.fst = self.fst             # <<<<<<<<<<<<<<
 *         return state
 * 
 */
  __pyx_t_5 = __pyx_v_self->fst;
  __pyx_v_state->fst = __pyx_t_5;

  /* "openpyfst.pyx":406
 *         state.stateid = stateid
 *         state.fst = self.fst
 *         return state             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_state));
  __pyx_r = ((PyObject *)__pyx_v_state);
  goto __pyx_L0;

  /* "openpyfst.pyx":400
 *         return result
 * 
 *     def __getitem__(self, int stateid):             # <<<<<<<<<<<<<<
 *         if not (0 <= stateid < len(self)):
 *             raise KeyError('state index out of range')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_state);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9openpyfst_12StdVectorFst_18generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "openpyfst.pyx":408
 *         return state
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         for i in range(len(self)):
 *             yield self[i]
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_17__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_17__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_16__iter__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_16__iter__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  struct __pyx_obj_9openpyfst___pyx_scope_struct_4___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_9openpyfst___pyx_scope_struct_4___iter__ *)__pyx_tp_new_9openpyfst___pyx_scope_struct_4___iter__(__pyx_ptype_9openpyfst___pyx_scope_struct_4___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9openpyfst___pyx_scope_struct_4___iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 408, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9openpyfst_12StdVectorFst_18generator2, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_StdVectorFst___iter, __pyx_n_s_openpyfst); if (unlikely(!gen)) __PYX_ERR(0, 408, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("openpyfst.StdVectorFst.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9openpyfst_12StdVectorFst_18generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9openpyfst___pyx_scope_struct_4___iter__ *__pyx_cur_scope = ((struct __pyx_obj_9openpyfst___pyx_scope_struct_4___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 408, __pyx_L1_error)

  /* "openpyfst.pyx":409
 * 
 *     def __iter__(self):
 *         for i in range(len(self)):             # <<<<<<<<<<<<<<
 *             yield self[i]
 * 
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_cur_scope->__pyx_v_self)); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 409, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_3;

    /* "openpyfst.pyx":410
 *     def __iter__(self):
 *         for i in range(len(self)):
 *             yield self[i]             # <<<<<<<<<<<<<<
 * 
 *     property states:
 */
    __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_cur_scope->__pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 410, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 410, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "openpyfst.pyx":408
 *         return state
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         for i in range(len(self)):
 *             yield self[i]
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":413
 * 
 *     property states:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return iter(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_6states_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_6states_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_6states___get__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_6states___get__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "openpyfst.pyx":414
 *     property states:
 *         def __get__(self):
 *             return iter(self)             # <<<<<<<<<<<<<<
 * 
 *     property start:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":413
 * 
 *     property states:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return iter(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.states.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":417
 * 
 *     property start:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.fst.Start()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_5start_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_5start_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_5start___get__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_5start___get__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "openpyfst.pyx":418
 *     property start:
 *         def __get__(self):
 *             return self.fst.Start()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, int start):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->fst->Start()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":417
 * 
 *     property start:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.fst.Start()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.start.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":420
 *             return self.fst.Start()
 * 
 *         def __set__(self, int start):             # <<<<<<<<<<<<<<
 *             self.fst.SetStart(start)
 * 
 */

/* Python wrapper */
static int __pyx_pw_9openpyfst_12StdVectorFst_5start_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_start); /*proto*/
static int __pyx_pw_9openpyfst_12StdVectorFst_5start_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_start) {
  int __pyx_v_start;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_start); {
    __pyx_v_start = __Pyx_PyInt_As_int(__pyx_arg_start); if (unlikely((__pyx_v_start == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 420, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.StdVectorFst.start.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_5start_2__set__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), ((int)__pyx_v_start));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9openpyfst_12StdVectorFst_5start_2__set__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, int __pyx_v_start) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "openpyfst.pyx":421
 * 
 *         def __set__(self, int start):
 *             self.fst.SetStart(start)             # <<<<<<<<<<<<<<
 * 
 *     def add_arc(self, int source, int dest, int ilabel, int olabel, weight=None):
 */
  __pyx_v_self->fst->SetStart(__pyx_v_start);

  /* "openpyfst.pyx":420
 *             return self.fst.Start()
 * 
 *         def __set__(self, int start):             # <<<<<<<<<<<<<<
 *             self.fst.SetStart(start)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":423
 *             self.fst.SetStart(start)
 * 
 *     def add_arc(self, int source, int dest, int ilabel, int olabel, weight=None):             # <<<<<<<<<<<<<<
 *         """fst.add_arc(int source, int dest, int ilabel, int olabel, weight=None)
 *         add an arc source->dest labeled with labels ilabel:olabel and weighted with weight"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_20add_arc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_19add_arc[] = "fst.add_arc(int source, int dest, int ilabel, int olabel, weight=None)\n        add an arc source->dest labeled with labels ilabel:olabel and weighted with weight";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_20add_arc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_source;
  int __pyx_v_dest;
  int __pyx_v_ilabel;
  int __pyx_v_olabel;
  PyObject *__pyx_v_weight = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_arc (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source,&__pyx_n_s_dest,&__pyx_n_s_ilabel,&__pyx_n_s_olabel,&__pyx_n_s_weight,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dest)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_arc", 0, 4, 5, 1); __PYX_ERR(0, 423, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ilabel)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_arc", 0, 4, 5, 2); __PYX_ERR(0, 423, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_olabel)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_arc", 0, 4, 5, 3); __PYX_ERR(0, 423, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weight);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_arc") < 0)) __PYX_ERR(0, 423, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_source = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_source == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 423, __pyx_L3_error)
    __pyx_v_dest = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_dest == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 423, __pyx_L3_error)
    __pyx_v_ilabel = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_ilabel == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 423, __pyx_L3_error)
    __pyx_v_olabel = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_olabel == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 423, __pyx_L3_error)
    __pyx_v_weight = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_arc", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 423, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.StdVectorFst.add_arc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_19add_arc(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), __pyx_v_source, __pyx_v_dest, __pyx_v_ilabel, __pyx_v_olabel, __pyx_v_weight);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_19add_arc(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, int __pyx_v_source, int __pyx_v_dest, int __pyx_v_ilabel, int __pyx_v_olabel, PyObject *__pyx_v_weight) {
  fst::StdArc *__pyx_v_arc;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("add_arc", 0);
  __Pyx_INCREF(__pyx_v_weight);

  /* "openpyfst.pyx":426
 *         """fst.add_arc(int source, int dest, int ilabel, int olabel, weight=None)
 *         add an arc source->dest labeled with labels ilabel:olabel and weighted with weight"""
 *         if source > self.fst.NumStates()-1:             # <<<<<<<<<<<<<<
 *             raise ValueError('invalid source state id ({0} > {1})'.format(source,
 *                 self.fst.NumStates()-1))
 */
  __pyx_t_1 = ((__pyx_v_source > (__pyx_v_self->fst->NumStates() - 1)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "openpyfst.pyx":427
 *         add an arc source->dest labeled with labels ilabel:olabel and weighted with weight"""
 *         if source > self.fst.NumStates()-1:
 *             raise ValueError('invalid source state id ({0} > {1})'.format(source,             # <<<<<<<<<<<<<<
 *                 self.fst.NumStates()-1))
 *         if dest > self.fst.NumStates()-1:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_invalid_source_state_id_0_1, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_source); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "openpyfst.pyx":428
 *         if source > self.fst.NumStates()-1:
 *             raise ValueError('invalid source state id ({0} > {1})'.format(source,
 *                 self.fst.NumStates()-1))             # <<<<<<<<<<<<<<
 *         if dest > self.fst.NumStates()-1:
 *             raise ValueError('invalid desination state id ({0} > {1})'.format(dest,
 */
    __pyx_t_5 = __Pyx_PyInt_From_long((__pyx_v_self->fst->NumStates() - 1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 428, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_5);
      __pyx_t_4 = 0;
      __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "openpyfst.pyx":427
 *         add an arc source->dest labeled with labels ilabel:olabel and weighted with weight"""
 *         if source > self.fst.NumStates()-1:
 *             raise ValueError('invalid source state id ({0} > {1})'.format(source,             # <<<<<<<<<<<<<<
 *                 self.fst.NumStates()-1))
 *         if dest > self.fst.NumStates()-1:
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 427, __pyx_L1_error)

    /* "openpyfst.pyx":426
 *         """fst.add_arc(int source, int dest, int ilabel, int olabel, weight=None)
 *         add an arc source->dest labeled with labels ilabel:olabel and weighted with weight"""
 *         if source > self.fst.NumStates()-1:             # <<<<<<<<<<<<<<
 *             raise ValueError('invalid source state id ({0} > {1})'.format(source,
 *                 self.fst.NumStates()-1))
 */
  }

  /* "openpyfst.pyx":429
 *             raise ValueError('invalid source state id ({0} > {1})'.format(source,
 *                 self.fst.NumStates()-1))
 *         if dest > self.fst.NumStates()-1:             # <<<<<<<<<<<<<<
 *             raise ValueError('invalid desination state id ({0} > {1})'.format(dest,
 *                 self.fst.NumStates()-1))
 */
  __pyx_t_1 = ((__pyx_v_dest > (__pyx_v_self->fst->NumStates() - 1)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "openpyfst.pyx":430
 *                 self.fst.NumStates()-1))
 *         if dest > self.fst.NumStates()-1:
 *             raise ValueError('invalid desination state id ({0} > {1})'.format(dest,             # <<<<<<<<<<<<<<
 *                 self.fst.NumStates()-1))
 *         if not isinstance(weight, TropicalWeight):
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_invalid_desination_state_id_0_1, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_dest); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);

    /* "openpyfst.pyx":431
 *         if dest > self.fst.NumStates()-1:
 *             raise ValueError('invalid desination state id ({0} > {1})'.format(dest,
 *                 self.fst.NumStates()-1))             # <<<<<<<<<<<<<<
 *         if not isinstance(weight, TropicalWeight):
 *             weight = TropicalWeight(weight)
 */
    __pyx_t_5 = __Pyx_PyInt_From_long((__pyx_v_self->fst->NumStates() - 1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_8, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 430, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_8, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 430, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 430, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_7, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_7, __pyx_t_5);
      __pyx_t_8 = 0;
      __pyx_t_5 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 430, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "openpyfst.pyx":430
 *                 self.fst.NumStates()-1))
 *         if dest > self.fst.NumStates()-1:
 *             raise ValueError('invalid desination state id ({0} > {1})'.format(dest,             # <<<<<<<<<<<<<<
 *                 self.fst.NumStates()-1))
 *         if not isinstance(weight, TropicalWeight):
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 430, __pyx_L1_error)

    /* "openpyfst.pyx":429
 *             raise ValueError('invalid source state id ({0} > {1})'.format(source,
 *                 self.fst.NumStates()-1))
 *         if dest > self.fst.NumStates()-1:             # <<<<<<<<<<<<<<
 *             raise ValueError('invalid desination state id ({0} > {1})'.format(dest,
 *                 self.fst.NumStates()-1))
 */
  }

  /* "openpyfst.pyx":432
 *             raise ValueError('invalid desination state id ({0} > {1})'.format(dest,
 *                 self.fst.NumStates()-1))
 *         if not isinstance(weight, TropicalWeight):             # <<<<<<<<<<<<<<
 *             weight = TropicalWeight(weight)
 *         cdef openfst.StdArc* arc
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_weight, __pyx_ptype_9openpyfst_TropicalWeight); 
  __pyx_t_9 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_9) {

    /* "openpyfst.pyx":433
 *                 self.fst.NumStates()-1))
 *         if not isinstance(weight, TropicalWeight):
 *             weight = TropicalWeight(weight)             # <<<<<<<<<<<<<<
 *         cdef openfst.StdArc* arc
 *         arc = new openfst.StdArc(ilabel, olabel, (<TropicalWeight> weight).weight[0], dest)
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9openpyfst_TropicalWeight), __pyx_v_weight); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_weight, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "openpyfst.pyx":432
 *             raise ValueError('invalid desination state id ({0} > {1})'.format(dest,
 *                 self.fst.NumStates()-1))
 *         if not isinstance(weight, TropicalWeight):             # <<<<<<<<<<<<<<
 *             weight = TropicalWeight(weight)
 *         cdef openfst.StdArc* arc
 */
  }

  /* "openpyfst.pyx":435
 *             weight = TropicalWeight(weight)
 *         cdef openfst.StdArc* arc
 *         arc = new openfst.StdArc(ilabel, olabel, (<TropicalWeight> weight).weight[0], dest)             # <<<<<<<<<<<<<<
 *         self.fst.AddArc(source, arc[0])
 *         del arc
 */
  __pyx_v_arc = new fst::StdArc(__pyx_v_ilabel, __pyx_v_olabel, (((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_v_weight)->weight[0]), __pyx_v_dest);

  /* "openpyfst.pyx":436
 *         cdef openfst.StdArc* arc
 *         arc = new openfst.StdArc(ilabel, olabel, (<TropicalWeight> weight).weight[0], dest)
 *         self.fst.AddArc(source, arc[0])             # <<<<<<<<<<<<<<
 *         del arc
 * 
 */
  __pyx_v_self->fst->AddArc(__pyx_v_source, (__pyx_v_arc[0]));

  /* "openpyfst.pyx":437
 *         arc = new openfst.StdArc(ilabel, olabel, (<TropicalWeight> weight).weight[0], dest)
 *         self.fst.AddArc(source, arc[0])
 *         del arc             # <<<<<<<<<<<<<<
 * 
 *     def add_state(self):
 */
  delete __pyx_v_arc;

  /* "openpyfst.pyx":423
 *             self.fst.SetStart(start)
 * 
 *     def add_arc(self, int source, int dest, int ilabel, int olabel, weight=None):             # <<<<<<<<<<<<<<
 *         """fst.add_arc(int source, int dest, int ilabel, int olabel, weight=None)
 *         add an arc source->dest labeled with labels ilabel:olabel and weighted with weight"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.add_arc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_weight);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":439
 *         del arc
 * 
 *     def add_state(self):             # <<<<<<<<<<<<<<
 *         """fst.add_state() -> new state"""
 *         return self.fst.AddState()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_22add_state(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_21add_state[] = "fst.add_state() -> new state";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_22add_state(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_state (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_21add_state(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_21add_state(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("add_state", 0);

  /* "openpyfst.pyx":441
 *     def add_state(self):
 *         """fst.add_state() -> new state"""
 *         return self.fst.AddState()             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(StdVectorFst x, StdVectorFst y, int op):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->fst->AddState()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":439
 *         del arc
 * 
 *     def add_state(self):             # <<<<<<<<<<<<<<
 *         """fst.add_state() -> new state"""
 *         return self.fst.AddState()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.add_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":443
 *         return self.fst.AddState()
 * 
 *     def __richcmp__(StdVectorFst x, StdVectorFst y, int op):             # <<<<<<<<<<<<<<
 *         if op == 2: # ==
 *             return openfst.Equivalent(x.fst[0], y.fst[0]) # FIXME check deterministic eps-free
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_24__richcmp__(PyObject *__pyx_v_x, PyObject *__pyx_v_y, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_24__richcmp__(PyObject *__pyx_v_x, PyObject *__pyx_v_y, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_9openpyfst_StdVectorFst, 1, "y", 0))) __PYX_ERR(0, 443, __pyx_L1_error)
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_23__richcmp__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_x), ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_y), ((int)__pyx_v_op));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_23__richcmp__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_x, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_y, int __pyx_v_op) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "openpyfst.pyx":444
 * 
 *     def __richcmp__(StdVectorFst x, StdVectorFst y, int op):
 *         if op == 2: # ==             # <<<<<<<<<<<<<<
 *             return openfst.Equivalent(x.fst[0], y.fst[0]) # FIXME check deterministic eps-free
 *         elif op == 3: # !=
 */
  switch (__pyx_v_op) {
    case 2:

    /* "openpyfst.pyx":445
 *     def __richcmp__(StdVectorFst x, StdVectorFst y, int op):
 *         if op == 2: # ==
 *             return openfst.Equivalent(x.fst[0], y.fst[0]) # FIXME check deterministic eps-free             # <<<<<<<<<<<<<<
 *         elif op == 3: # !=
 *             return not (x == y)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(fst::Equivalent((__pyx_v_x->fst[0]), (__pyx_v_y->fst[0]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "openpyfst.pyx":444
 * 
 *     def __richcmp__(StdVectorFst x, StdVectorFst y, int op):
 *         if op == 2: # ==             # <<<<<<<<<<<<<<
 *             return openfst.Equivalent(x.fst[0], y.fst[0]) # FIXME check deterministic eps-free
 *         elif op == 3: # !=
 */
    break;
    case 3:

    /* "openpyfst.pyx":447
 *             return openfst.Equivalent(x.fst[0], y.fst[0]) # FIXME check deterministic eps-free
 *         elif op == 3: # !=
 *             return not (x == y)             # <<<<<<<<<<<<<<
 *         raise NotImplementedError('comparison not implemented for StdVectorFst')
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_x), ((PyObject *)__pyx_v_y), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 447, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyBool_FromLong((!__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "openpyfst.pyx":446
 *         if op == 2: # ==
 *             return openfst.Equivalent(x.fst[0], y.fst[0]) # FIXME check deterministic eps-free
 *         elif op == 3: # !=             # <<<<<<<<<<<<<<
 *             return not (x == y)
 *         raise NotImplementedError('comparison not implemented for StdVectorFst')
 */
    break;
    default: break;
  }

  /* "openpyfst.pyx":448
 *         elif op == 3: # !=
 *             return not (x == y)
 *         raise NotImplementedError('comparison not implemented for StdVectorFst')             # <<<<<<<<<<<<<<
 * 
 *     def write(self, filename, keep_isyms=False, keep_osyms=False):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 448, __pyx_L1_error)

  /* "openpyfst.pyx":443
 *         return self.fst.AddState()
 * 
 *     def __richcmp__(StdVectorFst x, StdVectorFst y, int op):             # <<<<<<<<<<<<<<
 *         if op == 2: # ==
 *             return openfst.Equivalent(x.fst[0], y.fst[0]) # FIXME check deterministic eps-free
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":450
 *         raise NotImplementedError('comparison not implemented for StdVectorFst')
 * 
 *     def write(self, filename, keep_isyms=False, keep_osyms=False):             # <<<<<<<<<<<<<<
 *         """fst.write(filename): write the binary representation of the transducer in filename"""
 *         if keep_isyms and self.isyms is not None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_26write(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_25write[] = "fst.write(filename): write the binary representation of the transducer in filename";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_26write(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_keep_isyms = 0;
  PyObject *__pyx_v_keep_osyms = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_keep_isyms,&__pyx_n_s_keep_osyms,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_False);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_keep_isyms);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_keep_osyms);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "write") < 0)) __PYX_ERR(0, 450, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_keep_isyms = values[1];
    __pyx_v_keep_osyms = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 450, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.StdVectorFst.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_25write(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), __pyx_v_filename, __pyx_v_keep_isyms, __pyx_v_keep_osyms);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_25write(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_keep_isyms, PyObject *__pyx_v_keep_osyms) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("write", 0);

  /* "openpyfst.pyx":452
 *     def write(self, filename, keep_isyms=False, keep_osyms=False):
 *         """fst.write(filename): write the binary representation of the transducer in filename"""
 *         if keep_isyms and self.isyms is not None:             # <<<<<<<<<<<<<<
 *             self.fst.SetInputSymbols(self.isyms.table)
 *         if keep_osyms and self.osyms is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_keep_isyms); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 452, __pyx_L1_error)
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (((PyObject *)__pyx_v_self->isyms) != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "openpyfst.pyx":453
 *         """fst.write(filename): write the binary representation of the transducer in filename"""
 *         if keep_isyms and self.isyms is not None:
 *             self.fst.SetInputSymbols(self.isyms.table)             # <<<<<<<<<<<<<<
 *         if keep_osyms and self.osyms is not None:
 *             self.fst.SetOutputSymbols(self.osyms.table)
 */
    __pyx_v_self->fst->SetInputSymbols(__pyx_v_self->isyms->table);

    /* "openpyfst.pyx":452
 *     def write(self, filename, keep_isyms=False, keep_osyms=False):
 *         """fst.write(filename): write the binary representation of the transducer in filename"""
 *         if keep_isyms and self.isyms is not None:             # <<<<<<<<<<<<<<
 *             self.fst.SetInputSymbols(self.isyms.table)
 *         if keep_osyms and self.osyms is not None:
 */
  }

  /* "openpyfst.pyx":454
 *         if keep_isyms and self.isyms is not None:
 *             self.fst.SetInputSymbols(self.isyms.table)
 *         if keep_osyms and self.osyms is not None:             # <<<<<<<<<<<<<<
 *             self.fst.SetOutputSymbols(self.osyms.table)
 *         result = self.fst.Write(as_str(filename))
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_keep_osyms); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 454, __pyx_L1_error)
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = (((PyObject *)__pyx_v_self->osyms) != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "openpyfst.pyx":455
 *             self.fst.SetInputSymbols(self.isyms.table)
 *         if keep_osyms and self.osyms is not None:
 *             self.fst.SetOutputSymbols(self.osyms.table)             # <<<<<<<<<<<<<<
 *         result = self.fst.Write(as_str(filename))
 *         # reset symbols:
 */
    __pyx_v_self->fst->SetOutputSymbols(__pyx_v_self->osyms->table);

    /* "openpyfst.pyx":454
 *         if keep_isyms and self.isyms is not None:
 *             self.fst.SetInputSymbols(self.isyms.table)
 *         if keep_osyms and self.osyms is not None:             # <<<<<<<<<<<<<<
 *             self.fst.SetOutputSymbols(self.osyms.table)
 *         result = self.fst.Write(as_str(filename))
 */
  }

  /* "openpyfst.pyx":456
 *         if keep_osyms and self.osyms is not None:
 *             self.fst.SetOutputSymbols(self.osyms.table)
 *         result = self.fst.Write(as_str(filename))             # <<<<<<<<<<<<<<
 *         # reset symbols:
 *         self.fst.SetInputSymbols(NULL)
 */
  __pyx_t_4 = __pyx_f_9openpyfst_as_str(__pyx_v_filename); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_result = __pyx_v_self->fst->Write(__pyx_t_5);

  /* "openpyfst.pyx":458
 *         result = self.fst.Write(as_str(filename))
 *         # reset symbols:
 *         self.fst.SetInputSymbols(NULL)             # <<<<<<<<<<<<<<
 *         self.fst.SetOutputSymbols(NULL)
 *         return result
 */
  __pyx_v_self->fst->SetInputSymbols(NULL);

  /* "openpyfst.pyx":459
 *         # reset symbols:
 *         self.fst.SetInputSymbols(NULL)
 *         self.fst.SetOutputSymbols(NULL)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_v_self->fst->SetOutputSymbols(NULL);

  /* "openpyfst.pyx":460
 *         self.fst.SetInputSymbols(NULL)
 *         self.fst.SetOutputSymbols(NULL)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     property input_deterministic:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":450
 *         raise NotImplementedError('comparison not implemented for StdVectorFst')
 * 
 *     def write(self, filename, keep_isyms=False, keep_osyms=False):             # <<<<<<<<<<<<<<
 *         """fst.write(filename): write the binary representation of the transducer in filename"""
 *         if keep_isyms and self.isyms is not None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":463
 * 
 *     property input_deterministic:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return bool(self.fst.Properties(openfst.kIDeterministic, True) &
 *                 openfst.kIDeterministic)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_19input_deterministic_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_19input_deterministic_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_19input_deterministic___get__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_19input_deterministic___get__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "openpyfst.pyx":464
 *     property input_deterministic:
 *         def __get__(self):
 *             return bool(self.fst.Properties(openfst.kIDeterministic, True) &             # <<<<<<<<<<<<<<
 *                 openfst.kIDeterministic)
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "openpyfst.pyx":465
 *         def __get__(self):
 *             return bool(self.fst.Properties(openfst.kIDeterministic, True) &
 *                 openfst.kIDeterministic)             # <<<<<<<<<<<<<<
 * 
 *     property output_deterministic:
 */
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t((__pyx_v_self->fst->Properties(fst::kIDeterministic, 1) & fst::kIDeterministic)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "openpyfst.pyx":464
 *     property input_deterministic:
 *         def __get__(self):
 *             return bool(self.fst.Properties(openfst.kIDeterministic, True) &             # <<<<<<<<<<<<<<
 *                 openfst.kIDeterministic)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_2))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":463
 * 
 *     property input_deterministic:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return bool(self.fst.Properties(openfst.kIDeterministic, True) &
 *                 openfst.kIDeterministic)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.input_deterministic.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":468
 * 
 *     property output_deterministic:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return bool(self.fst.Properties(openfst.kODeterministic, True) &
 *                 openfst.kODeterministic)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_20output_deterministic_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_20output_deterministic_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_20output_deterministic___get__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_20output_deterministic___get__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "openpyfst.pyx":469
 *     property output_deterministic:
 *         def __get__(self):
 *             return bool(self.fst.Properties(openfst.kODeterministic, True) &             # <<<<<<<<<<<<<<
 *                 openfst.kODeterministic)
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "openpyfst.pyx":470
 *         def __get__(self):
 *             return bool(self.fst.Properties(openfst.kODeterministic, True) &
 *                 openfst.kODeterministic)             # <<<<<<<<<<<<<<
 * 
 *     property acceptor:
 */
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t((__pyx_v_self->fst->Properties(fst::kODeterministic, 1) & fst::kODeterministic)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "openpyfst.pyx":469
 *     property output_deterministic:
 *         def __get__(self):
 *             return bool(self.fst.Properties(openfst.kODeterministic, True) &             # <<<<<<<<<<<<<<
 *                 openfst.kODeterministic)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_2))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":468
 * 
 *     property output_deterministic:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return bool(self.fst.Properties(openfst.kODeterministic, True) &
 *                 openfst.kODeterministic)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.output_deterministic.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":473
 * 
 *     property acceptor:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return bool(self.fst.Properties(openfst.kAcceptor, True) &
 *                 openfst.kAcceptor)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_8acceptor_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_8acceptor_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_8acceptor___get__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_8acceptor___get__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "openpyfst.pyx":474
 *     property acceptor:
 *         def __get__(self):
 *             return bool(self.fst.Properties(openfst.kAcceptor, True) &             # <<<<<<<<<<<<<<
 *                 openfst.kAcceptor)
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "openpyfst.pyx":475
 *         def __get__(self):
 *             return bool(self.fst.Properties(openfst.kAcceptor, True) &
 *                 openfst.kAcceptor)             # <<<<<<<<<<<<<<
 * 
 *     def determinize(self):
 */
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t((__pyx_v_self->fst->Properties(fst::kAcceptor, 1) & fst::kAcceptor)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "openpyfst.pyx":474
 *     property acceptor:
 *         def __get__(self):
 *             return bool(self.fst.Properties(openfst.kAcceptor, True) &             # <<<<<<<<<<<<<<
 *                 openfst.kAcceptor)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_2))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":473
 * 
 *     property acceptor:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return bool(self.fst.Properties(openfst.kAcceptor, True) &
 *                 openfst.kAcceptor)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.acceptor.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":477
 *                 openfst.kAcceptor)
 * 
 *     def determinize(self):             # <<<<<<<<<<<<<<
 *         """fst.determinize() -> determinized transducer"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_28determinize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_27determinize[] = "fst.determinize() -> determinized transducer";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_28determinize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("determinize (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_27determinize(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_27determinize(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("determinize", 0);

  /* "openpyfst.pyx":479
 *     def determinize(self):
 *         """fst.determinize() -> determinized transducer"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)             # <<<<<<<<<<<<<<
 *         openfst.Determinize(self.fst[0], result.fst)
 *         return result
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_isyms, ((PyObject *)__pyx_v_self->isyms)) < 0) __PYX_ERR(0, 479, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_osyms, ((PyObject *)__pyx_v_self->osyms)) < 0) __PYX_ERR(0, 479, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9openpyfst_StdVectorFst), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "openpyfst.pyx":480
 *         """fst.determinize() -> determinized transducer"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         openfst.Determinize(self.fst[0], result.fst)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  fst::Determinize((__pyx_v_self->fst[0]), __pyx_v_result->fst);

  /* "openpyfst.pyx":481
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         openfst.Determinize(self.fst[0], result.fst)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def compose(self, StdVectorFst other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "openpyfst.pyx":477
 *                 openfst.kAcceptor)
 * 
 *     def determinize(self):             # <<<<<<<<<<<<<<
 *         """fst.determinize() -> determinized transducer"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.determinize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":483
 *         return result
 * 
 *     def compose(self, StdVectorFst other):             # <<<<<<<<<<<<<<
 *         """fst.compose(StdVectorFst other) -> composed transducer
 *         Shortcut: fst >> other"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_30compose(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_29compose[] = "fst.compose(StdVectorFst other) -> composed transducer\n        Shortcut: fst >> other";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_30compose(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compose (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_9openpyfst_StdVectorFst, 1, "other", 0))) __PYX_ERR(0, 483, __pyx_L1_error)
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_29compose(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_29compose(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_other) {
  struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("compose", 0);

  /* "openpyfst.pyx":486
 *         """fst.compose(StdVectorFst other) -> composed transducer
 *         Shortcut: fst >> other"""
 *         if (self.osyms or other.isyms) and (self.osyms != other.isyms):             # <<<<<<<<<<<<<<
 *             raise ValueError('transducer symbol tables are not compatible for composition')
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=other.osyms)
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self->osyms)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 486, __pyx_L1_error)
  if (!__pyx_t_2) {
  } else {
    goto __pyx_L5_next_and;
  }
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_other->isyms)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 486, __pyx_L1_error)
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_L5_next_and:;
  __pyx_t_3 = PyObject_RichCompare(((PyObject *)__pyx_v_self->osyms), ((PyObject *)__pyx_v_other->isyms), Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 486, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "openpyfst.pyx":487
 *         Shortcut: fst >> other"""
 *         if (self.osyms or other.isyms) and (self.osyms != other.isyms):
 *             raise ValueError('transducer symbol tables are not compatible for composition')             # <<<<<<<<<<<<<<
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=other.osyms)
 *         openfst.Compose(self.fst[0], other.fst[0], result.fst)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 487, __pyx_L1_error)

    /* "openpyfst.pyx":486
 *         """fst.compose(StdVectorFst other) -> composed transducer
 *         Shortcut: fst >> other"""
 *         if (self.osyms or other.isyms) and (self.osyms != other.isyms):             # <<<<<<<<<<<<<<
 *             raise ValueError('transducer symbol tables are not compatible for composition')
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=other.osyms)
 */
  }

  /* "openpyfst.pyx":488
 *         if (self.osyms or other.isyms) and (self.osyms != other.isyms):
 *             raise ValueError('transducer symbol tables are not compatible for composition')
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=other.osyms)             # <<<<<<<<<<<<<<
 *         openfst.Compose(self.fst[0], other.fst[0], result.fst)
 *         return result
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_isyms, ((PyObject *)__pyx_v_self->isyms)) < 0) __PYX_ERR(0, 488, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_osyms, ((PyObject *)__pyx_v_other->osyms)) < 0) __PYX_ERR(0, 488, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9openpyfst_StdVectorFst), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "openpyfst.pyx":489
 *             raise ValueError('transducer symbol tables are not compatible for composition')
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=other.osyms)
 *         openfst.Compose(self.fst[0], other.fst[0], result.fst)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  fst::Compose((__pyx_v_self->fst[0]), (__pyx_v_other->fst[0]), __pyx_v_result->fst);

  /* "openpyfst.pyx":490
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=other.osyms)
 *         openfst.Compose(self.fst[0], other.fst[0], result.fst)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def __rshift__(StdVectorFst x, StdVectorFst y):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "openpyfst.pyx":483
 *         return result
 * 
 *     def compose(self, StdVectorFst other):             # <<<<<<<<<<<<<<
 *         """fst.compose(StdVectorFst other) -> composed transducer
 *         Shortcut: fst >> other"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.compose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":492
 *         return result
 * 
 *     def __rshift__(StdVectorFst x, StdVectorFst y):             # <<<<<<<<<<<<<<
 *         return x.compose(y)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_32__rshift__(PyObject *__pyx_v_x, PyObject *__pyx_v_y); /*proto*/
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_32__rshift__(PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__rshift__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_9openpyfst_StdVectorFst, 1, "x", 0))) __PYX_ERR(0, 492, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_9openpyfst_StdVectorFst, 1, "y", 0))) __PYX_ERR(0, 492, __pyx_L1_error)
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_31__rshift__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_x), ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_y));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_31__rshift__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_x, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__rshift__", 0);

  /* "openpyfst.pyx":493
 * 
 *     def __rshift__(StdVectorFst x, StdVectorFst y):
 *         return x.compose(y)             # <<<<<<<<<<<<<<
 * 
 *     def intersect(self, StdVectorFst other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_x), __pyx_n_s_compose); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_y)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_y));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":492
 *         return result
 * 
 *     def __rshift__(StdVectorFst x, StdVectorFst y):             # <<<<<<<<<<<<<<
 *         return x.compose(y)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.__rshift__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":495
 *         return x.compose(y)
 * 
 *     def intersect(self, StdVectorFst other):             # <<<<<<<<<<<<<<
 *         """fst.intersect(StdVectorFst other) -> intersection of the two acceptors
 *         Shortcut: fst & other"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_34intersect(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_33intersect[] = "fst.intersect(StdVectorFst other) -> intersection of the two acceptors\n        Shortcut: fst & other";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_34intersect(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("intersect (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_9openpyfst_StdVectorFst, 1, "other", 0))) __PYX_ERR(0, 495, __pyx_L1_error)
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_33intersect(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_33intersect(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_other) {
  struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("intersect", 0);

  /* "openpyfst.pyx":498
 *         """fst.intersect(StdVectorFst other) -> intersection of the two acceptors
 *         Shortcut: fst & other"""
 *         if not (self.acceptor and other.acceptor):             # <<<<<<<<<<<<<<
 *             raise ValueError('both transducers need to be acceptors for intersection')
 *         # TODO check and merge symbol tables (intersection)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_acceptor); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_other), __pyx_n_s_acceptor); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  __pyx_t_3 = ((!__pyx_t_1) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "openpyfst.pyx":499
 *         Shortcut: fst & other"""
 *         if not (self.acceptor and other.acceptor):
 *             raise ValueError('both transducers need to be acceptors for intersection')             # <<<<<<<<<<<<<<
 *         # TODO check and merge symbol tables (intersection)
 *         if self.isyms and (self.isyms != other.isyms):
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 499, __pyx_L1_error)

    /* "openpyfst.pyx":498
 *         """fst.intersect(StdVectorFst other) -> intersection of the two acceptors
 *         Shortcut: fst & other"""
 *         if not (self.acceptor and other.acceptor):             # <<<<<<<<<<<<<<
 *             raise ValueError('both transducers need to be acceptors for intersection')
 *         # TODO check and merge symbol tables (intersection)
 */
  }

  /* "openpyfst.pyx":501
 *             raise ValueError('both transducers need to be acceptors for intersection')
 *         # TODO check and merge symbol tables (intersection)
 *         if self.isyms and (self.isyms != other.isyms):             # <<<<<<<<<<<<<<
 *             raise ValueError('transducers must use shared input symbol table')
 *         if self.osyms and (self.osyms != other.osyms):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self->isyms)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 501, __pyx_L1_error)
  if (__pyx_t_1) {
  } else {
    __pyx_t_3 = __pyx_t_1;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->isyms), ((PyObject *)__pyx_v_other->isyms), Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 501, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_t_1;
  __pyx_L7_bool_binop_done:;
  if (unlikely(__pyx_t_3)) {

    /* "openpyfst.pyx":502
 *         # TODO check and merge symbol tables (intersection)
 *         if self.isyms and (self.isyms != other.isyms):
 *             raise ValueError('transducers must use shared input symbol table')             # <<<<<<<<<<<<<<
 *         if self.osyms and (self.osyms != other.osyms):
 *             raise ValueError('transducers must use shared output symbol table')
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 502, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 502, __pyx_L1_error)

    /* "openpyfst.pyx":501
 *             raise ValueError('both transducers need to be acceptors for intersection')
 *         # TODO check and merge symbol tables (intersection)
 *         if self.isyms and (self.isyms != other.isyms):             # <<<<<<<<<<<<<<
 *             raise ValueError('transducers must use shared input symbol table')
 *         if self.osyms and (self.osyms != other.osyms):
 */
  }

  /* "openpyfst.pyx":503
 *         if self.isyms and (self.isyms != other.isyms):
 *             raise ValueError('transducers must use shared input symbol table')
 *         if self.osyms and (self.osyms != other.osyms):             # <<<<<<<<<<<<<<
 *             raise ValueError('transducers must use shared output symbol table')
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self->osyms)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 503, __pyx_L1_error)
  if (__pyx_t_1) {
  } else {
    __pyx_t_3 = __pyx_t_1;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->osyms), ((PyObject *)__pyx_v_other->osyms), Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 503, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_t_1;
  __pyx_L10_bool_binop_done:;
  if (unlikely(__pyx_t_3)) {

    /* "openpyfst.pyx":504
 *             raise ValueError('transducers must use shared input symbol table')
 *         if self.osyms and (self.osyms != other.osyms):
 *             raise ValueError('transducers must use shared output symbol table')             # <<<<<<<<<<<<<<
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         openfst.Intersect(self.fst[0], other.fst[0], result.fst)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 504, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 504, __pyx_L1_error)

    /* "openpyfst.pyx":503
 *         if self.isyms and (self.isyms != other.isyms):
 *             raise ValueError('transducers must use shared input symbol table')
 *         if self.osyms and (self.osyms != other.osyms):             # <<<<<<<<<<<<<<
 *             raise ValueError('transducers must use shared output symbol table')
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 */
  }

  /* "openpyfst.pyx":505
 *         if self.osyms and (self.osyms != other.osyms):
 *             raise ValueError('transducers must use shared output symbol table')
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)             # <<<<<<<<<<<<<<
 *         openfst.Intersect(self.fst[0], other.fst[0], result.fst)
 *         return result
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_isyms, ((PyObject *)__pyx_v_self->isyms)) < 0) __PYX_ERR(0, 505, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_osyms, ((PyObject *)__pyx_v_self->osyms)) < 0) __PYX_ERR(0, 505, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9openpyfst_StdVectorFst), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_result = ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "openpyfst.pyx":506
 *             raise ValueError('transducers must use shared output symbol table')
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         openfst.Intersect(self.fst[0], other.fst[0], result.fst)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  fst::Intersect((__pyx_v_self->fst[0]), (__pyx_v_other->fst[0]), __pyx_v_result->fst);

  /* "openpyfst.pyx":507
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         openfst.Intersect(self.fst[0], other.fst[0], result.fst)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def __and__(StdVectorFst x, StdVectorFst y):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "openpyfst.pyx":495
 *         return x.compose(y)
 * 
 *     def intersect(self, StdVectorFst other):             # <<<<<<<<<<<<<<
 *         """fst.intersect(StdVectorFst other) -> intersection of the two acceptors
 *         Shortcut: fst & other"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":509
 *         return result
 * 
 *     def __and__(StdVectorFst x, StdVectorFst y):             # <<<<<<<<<<<<<<
 *         return x.intersect(y)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_36__and__(PyObject *__pyx_v_x, PyObject *__pyx_v_y); /*proto*/
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_36__and__(PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__and__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_9openpyfst_StdVectorFst, 1, "x", 0))) __PYX_ERR(0, 509, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_9openpyfst_StdVectorFst, 1, "y", 0))) __PYX_ERR(0, 509, __pyx_L1_error)
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_35__and__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_x), ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_y));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_35__and__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_x, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__and__", 0);

  /* "openpyfst.pyx":510
 * 
 *     def __and__(StdVectorFst x, StdVectorFst y):
 *         return x.intersect(y)             # <<<<<<<<<<<<<<
 * 
 *     def set_union(self, StdVectorFst other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_x), __pyx_n_s_intersect); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_y)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_y));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":509
 *         return result
 * 
 *     def __and__(StdVectorFst x, StdVectorFst y):             # <<<<<<<<<<<<<<
 *         return x.intersect(y)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.__and__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":512
 *         return x.intersect(y)
 * 
 *     def set_union(self, StdVectorFst other):             # <<<<<<<<<<<<<<
 *         """fst.set_union(StdVectorFst other): modify to the union of the two transducers"""
 *         if self.isyms:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_38set_union(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_37set_union[] = "fst.set_union(StdVectorFst other): modify to the union of the two transducers";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_38set_union(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_union (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_9openpyfst_StdVectorFst, 1, "other", 0))) __PYX_ERR(0, 512, __pyx_L1_error)
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_37set_union(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_37set_union(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("set_union", 0);

  /* "openpyfst.pyx":514
 *     def set_union(self, StdVectorFst other):
 *         """fst.set_union(StdVectorFst other): modify to the union of the two transducers"""
 *         if self.isyms:             # <<<<<<<<<<<<<<
 *             self.isyms.merge(other.isyms)
 *         if self.osyms:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self->isyms)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 514, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "openpyfst.pyx":515
 *         """fst.set_union(StdVectorFst other): modify to the union of the two transducers"""
 *         if self.isyms:
 *             self.isyms.merge(other.isyms)             # <<<<<<<<<<<<<<
 *         if self.osyms:
 *             self.osyms.merge(other.osyms)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->isyms), __pyx_n_s_merge); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 515, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_other->isyms)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_other->isyms));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 515, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "openpyfst.pyx":514
 *     def set_union(self, StdVectorFst other):
 *         """fst.set_union(StdVectorFst other): modify to the union of the two transducers"""
 *         if self.isyms:             # <<<<<<<<<<<<<<
 *             self.isyms.merge(other.isyms)
 *         if self.osyms:
 */
  }

  /* "openpyfst.pyx":516
 *         if self.isyms:
 *             self.isyms.merge(other.isyms)
 *         if self.osyms:             # <<<<<<<<<<<<<<
 *             self.osyms.merge(other.osyms)
 *         openfst.Union(self.fst, other.fst[0])
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self->osyms)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 516, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "openpyfst.pyx":517
 *             self.isyms.merge(other.isyms)
 *         if self.osyms:
 *             self.osyms.merge(other.osyms)             # <<<<<<<<<<<<<<
 *         openfst.Union(self.fst, other.fst[0])
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->osyms), __pyx_n_s_merge); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_other->osyms)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_other->osyms));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "openpyfst.pyx":516
 *         if self.isyms:
 *             self.isyms.merge(other.isyms)
 *         if self.osyms:             # <<<<<<<<<<<<<<
 *             self.osyms.merge(other.osyms)
 *         openfst.Union(self.fst, other.fst[0])
 */
  }

  /* "openpyfst.pyx":518
 *         if self.osyms:
 *             self.osyms.merge(other.osyms)
 *         openfst.Union(self.fst, other.fst[0])             # <<<<<<<<<<<<<<
 * 
 *     def union(self, StdVectorFst other):
 */
  fst::Union(__pyx_v_self->fst, (__pyx_v_other->fst[0]));

  /* "openpyfst.pyx":512
 *         return x.intersect(y)
 * 
 *     def set_union(self, StdVectorFst other):             # <<<<<<<<<<<<<<
 *         """fst.set_union(StdVectorFst other): modify to the union of the two transducers"""
 *         if self.isyms:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.set_union", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":520
 *         openfst.Union(self.fst, other.fst[0])
 * 
 *     def union(self, StdVectorFst other):             # <<<<<<<<<<<<<<
 *         """fst.union(StdVectorFst other) -> union of the two transducers
 *         Shortcut: fst | other"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_40union(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_39union[] = "fst.union(StdVectorFst other) -> union of the two transducers\n        Shortcut: fst | other";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_40union(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("union (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_9openpyfst_StdVectorFst, 1, "other", 0))) __PYX_ERR(0, 520, __pyx_L1_error)
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_39union(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_39union(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_other) {
  struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("union", 0);

  /* "openpyfst.pyx":523
 *         """fst.union(StdVectorFst other) -> union of the two transducers
 *         Shortcut: fst | other"""
 *         cdef StdVectorFst result = self.copy()             # <<<<<<<<<<<<<<
 *         result.set_union(other)
 *         return result
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9openpyfst_StdVectorFst))))) __PYX_ERR(0, 523, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "openpyfst.pyx":524
 *         Shortcut: fst | other"""
 *         cdef StdVectorFst result = self.copy()
 *         result.set_union(other)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_result), __pyx_n_s_set_union); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_other)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_other));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openpyfst.pyx":525
 *         cdef StdVectorFst result = self.copy()
 *         result.set_union(other)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def __or__(StdVectorFst x, StdVectorFst y):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "openpyfst.pyx":520
 *         openfst.Union(self.fst, other.fst[0])
 * 
 *     def union(self, StdVectorFst other):             # <<<<<<<<<<<<<<
 *         """fst.union(StdVectorFst other) -> union of the two transducers
 *         Shortcut: fst | other"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.union", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":527
 *         return result
 * 
 *     def __or__(StdVectorFst x, StdVectorFst y):             # <<<<<<<<<<<<<<
 *         return x.union(y)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_42__or__(PyObject *__pyx_v_x, PyObject *__pyx_v_y); /*proto*/
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_42__or__(PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__or__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_9openpyfst_StdVectorFst, 1, "x", 0))) __PYX_ERR(0, 527, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_9openpyfst_StdVectorFst, 1, "y", 0))) __PYX_ERR(0, 527, __pyx_L1_error)
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_41__or__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_x), ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_y));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_41__or__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_x, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__or__", 0);

  /* "openpyfst.pyx":528
 * 
 *     def __or__(StdVectorFst x, StdVectorFst y):
 *         return x.union(y)             # <<<<<<<<<<<<<<
 * 
 *     def concatenate(self, StdVectorFst other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_x), __pyx_n_s_union); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_y)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_y));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":527
 *         return result
 * 
 *     def __or__(StdVectorFst x, StdVectorFst y):             # <<<<<<<<<<<<<<
 *         return x.union(y)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.__or__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":530
 *         return x.union(y)
 * 
 *     def concatenate(self, StdVectorFst other):             # <<<<<<<<<<<<<<
 *         """fst.concatenate(StdVectorFst other): modify to the concatenation
 *         of the two transducers"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_44concatenate(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_43concatenate[] = "fst.concatenate(StdVectorFst other): modify to the concatenation\n        of the two transducers";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_44concatenate(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("concatenate (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_9openpyfst_StdVectorFst, 1, "other", 0))) __PYX_ERR(0, 530, __pyx_L1_error)
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_43concatenate(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_43concatenate(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("concatenate", 0);

  /* "openpyfst.pyx":533
 *         """fst.concatenate(StdVectorFst other): modify to the concatenation
 *         of the two transducers"""
 *         if self.isyms:             # <<<<<<<<<<<<<<
 *             self.isyms.merge(other.isyms)
 *         if self.osyms:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self->isyms)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 533, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "openpyfst.pyx":534
 *         of the two transducers"""
 *         if self.isyms:
 *             self.isyms.merge(other.isyms)             # <<<<<<<<<<<<<<
 *         if self.osyms:
 *             self.osyms.merge(other.osyms)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->isyms), __pyx_n_s_merge); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_other->isyms)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_other->isyms));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "openpyfst.pyx":533
 *         """fst.concatenate(StdVectorFst other): modify to the concatenation
 *         of the two transducers"""
 *         if self.isyms:             # <<<<<<<<<<<<<<
 *             self.isyms.merge(other.isyms)
 *         if self.osyms:
 */
  }

  /* "openpyfst.pyx":535
 *         if self.isyms:
 *             self.isyms.merge(other.isyms)
 *         if self.osyms:             # <<<<<<<<<<<<<<
 *             self.osyms.merge(other.osyms)
 *         openfst.Concat(self.fst, other.fst[0])
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self->osyms)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 535, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "openpyfst.pyx":536
 *             self.isyms.merge(other.isyms)
 *         if self.osyms:
 *             self.osyms.merge(other.osyms)             # <<<<<<<<<<<<<<
 *         openfst.Concat(self.fst, other.fst[0])
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->osyms), __pyx_n_s_merge); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_other->osyms)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_other->osyms));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "openpyfst.pyx":535
 *         if self.isyms:
 *             self.isyms.merge(other.isyms)
 *         if self.osyms:             # <<<<<<<<<<<<<<
 *             self.osyms.merge(other.osyms)
 *         openfst.Concat(self.fst, other.fst[0])
 */
  }

  /* "openpyfst.pyx":537
 *         if self.osyms:
 *             self.osyms.merge(other.osyms)
 *         openfst.Concat(self.fst, other.fst[0])             # <<<<<<<<<<<<<<
 * 
 *     def concatenation(self, StdVectorFst other):
 */
  fst::Concat(__pyx_v_self->fst, (__pyx_v_other->fst[0]));

  /* "openpyfst.pyx":530
 *         return x.union(y)
 * 
 *     def concatenate(self, StdVectorFst other):             # <<<<<<<<<<<<<<
 *         """fst.concatenate(StdVectorFst other): modify to the concatenation
 *         of the two transducers"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.concatenate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":539
 *         openfst.Concat(self.fst, other.fst[0])
 * 
 *     def concatenation(self, StdVectorFst other):             # <<<<<<<<<<<<<<
 *         """fst.concatenation(StdVectorFst other) -> concatenation of the two transducers
 *         Shortcut: fst + other"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_46concatenation(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_45concatenation[] = "fst.concatenation(StdVectorFst other) -> concatenation of the two transducers\n        Shortcut: fst + other";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_46concatenation(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("concatenation (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_9openpyfst_StdVectorFst, 1, "other", 0))) __PYX_ERR(0, 539, __pyx_L1_error)
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_45concatenation(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_45concatenation(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_other) {
  struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("concatenation", 0);

  /* "openpyfst.pyx":542
 *         """fst.concatenation(StdVectorFst other) -> concatenation of the two transducers
 *         Shortcut: fst + other"""
 *         cdef StdVectorFst result = self.copy()             # <<<<<<<<<<<<<<
 *         result.concatenate(other)
 *         return result
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9openpyfst_StdVectorFst))))) __PYX_ERR(0, 542, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "openpyfst.pyx":543
 *         Shortcut: fst + other"""
 *         cdef StdVectorFst result = self.copy()
 *         result.concatenate(other)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_result), __pyx_n_s_concatenate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_other)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_other));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openpyfst.pyx":544
 *         cdef StdVectorFst result = self.copy()
 *         result.concatenate(other)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def __add__(StdVectorFst x, StdVectorFst y):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "openpyfst.pyx":539
 *         openfst.Concat(self.fst, other.fst[0])
 * 
 *     def concatenation(self, StdVectorFst other):             # <<<<<<<<<<<<<<
 *         """fst.concatenation(StdVectorFst other) -> concatenation of the two transducers
 *         Shortcut: fst + other"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.concatenation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":546
 *         return result
 * 
 *     def __add__(StdVectorFst x, StdVectorFst y):             # <<<<<<<<<<<<<<
 *         return x.concatenation(y)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_48__add__(PyObject *__pyx_v_x, PyObject *__pyx_v_y); /*proto*/
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_48__add__(PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_9openpyfst_StdVectorFst, 1, "x", 0))) __PYX_ERR(0, 546, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_9openpyfst_StdVectorFst, 1, "y", 0))) __PYX_ERR(0, 546, __pyx_L1_error)
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_47__add__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_x), ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_y));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_47__add__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_x, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "openpyfst.pyx":547
 * 
 *     def __add__(StdVectorFst x, StdVectorFst y):
 *         return x.concatenation(y)             # <<<<<<<<<<<<<<
 * 
 *     def difference(self, StdVectorFst other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_x), __pyx_n_s_concatenation); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_y)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_y));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":546
 *         return result
 * 
 *     def __add__(StdVectorFst x, StdVectorFst y):             # <<<<<<<<<<<<<<
 *         return x.concatenation(y)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":549
 *         return x.concatenation(y)
 * 
 *     def difference(self, StdVectorFst other):             # <<<<<<<<<<<<<<
 *         """fst.difference(StdVectorFst other) -> difference of the two transducers
 *         Shortcut: fst - other"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_50difference(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_49difference[] = "fst.difference(StdVectorFst other) -> difference of the two transducers\n        Shortcut: fst - other";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_50difference(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("difference (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_9openpyfst_StdVectorFst, 1, "other", 0))) __PYX_ERR(0, 549, __pyx_L1_error)
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_49difference(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_49difference(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_other) {
  struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("difference", 0);

  /* "openpyfst.pyx":553
 *         Shortcut: fst - other"""
 *         # TODO merge symbol tables (union)
 *         if self.isyms and (self.isyms != other.isyms):             # <<<<<<<<<<<<<<
 *             raise ValueError('transducers must use shared input symbol table')
 *         if self.osyms and (self.osyms != other.osyms):
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self->isyms)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 553, __pyx_L1_error)
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyObject_RichCompare(((PyObject *)__pyx_v_self->isyms), ((PyObject *)__pyx_v_other->isyms), Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 553, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "openpyfst.pyx":554
 *         # TODO merge symbol tables (union)
 *         if self.isyms and (self.isyms != other.isyms):
 *             raise ValueError('transducers must use shared input symbol table')             # <<<<<<<<<<<<<<
 *         if self.osyms and (self.osyms != other.osyms):
 *             raise ValueError('transducers must use shared output symbol table')
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 554, __pyx_L1_error)

    /* "openpyfst.pyx":553
 *         Shortcut: fst - other"""
 *         # TODO merge symbol tables (union)
 *         if self.isyms and (self.isyms != other.isyms):             # <<<<<<<<<<<<<<
 *             raise ValueError('transducers must use shared input symbol table')
 *         if self.osyms and (self.osyms != other.osyms):
 */
  }

  /* "openpyfst.pyx":555
 *         if self.isyms and (self.isyms != other.isyms):
 *             raise ValueError('transducers must use shared input symbol table')
 *         if self.osyms and (self.osyms != other.osyms):             # <<<<<<<<<<<<<<
 *             raise ValueError('transducers must use shared output symbol table')
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self->osyms)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 555, __pyx_L1_error)
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = PyObject_RichCompare(((PyObject *)__pyx_v_self->osyms), ((PyObject *)__pyx_v_other->osyms), Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 555, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "openpyfst.pyx":556
 *             raise ValueError('transducers must use shared input symbol table')
 *         if self.osyms and (self.osyms != other.osyms):
 *             raise ValueError('transducers must use shared output symbol table')             # <<<<<<<<<<<<<<
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         openfst.Difference(self.fst[0], other.fst[0], result.fst)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 556, __pyx_L1_error)

    /* "openpyfst.pyx":555
 *         if self.isyms and (self.isyms != other.isyms):
 *             raise ValueError('transducers must use shared input symbol table')
 *         if self.osyms and (self.osyms != other.osyms):             # <<<<<<<<<<<<<<
 *             raise ValueError('transducers must use shared output symbol table')
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 */
  }

  /* "openpyfst.pyx":557
 *         if self.osyms and (self.osyms != other.osyms):
 *             raise ValueError('transducers must use shared output symbol table')
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)             # <<<<<<<<<<<<<<
 *         openfst.Difference(self.fst[0], other.fst[0], result.fst)
 *         return result
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_isyms, ((PyObject *)__pyx_v_self->isyms)) < 0) __PYX_ERR(0, 557, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_osyms, ((PyObject *)__pyx_v_self->osyms)) < 0) __PYX_ERR(0, 557, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9openpyfst_StdVectorFst), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "openpyfst.pyx":558
 *             raise ValueError('transducers must use shared output symbol table')
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         openfst.Difference(self.fst[0], other.fst[0], result.fst)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  fst::Difference((__pyx_v_self->fst[0]), (__pyx_v_other->fst[0]), __pyx_v_result->fst);

  /* "openpyfst.pyx":559
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         openfst.Difference(self.fst[0], other.fst[0], result.fst)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def __sub__(StdVectorFst x, StdVectorFst y):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "openpyfst.pyx":549
 *         return x.concatenation(y)
 * 
 *     def difference(self, StdVectorFst other):             # <<<<<<<<<<<<<<
 *         """fst.difference(StdVectorFst other) -> difference of the two transducers
 *         Shortcut: fst - other"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.difference", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":561
 *         return result
 * 
 *     def __sub__(StdVectorFst x, StdVectorFst y):             # <<<<<<<<<<<<<<
 *         return x.difference(y)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_52__sub__(PyObject *__pyx_v_x, PyObject *__pyx_v_y); /*proto*/
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_52__sub__(PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_9openpyfst_StdVectorFst, 1, "x", 0))) __PYX_ERR(0, 561, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_9openpyfst_StdVectorFst, 1, "y", 0))) __PYX_ERR(0, 561, __pyx_L1_error)
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_51__sub__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_x), ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_y));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_51__sub__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_x, struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__sub__", 0);

  /* "openpyfst.pyx":562
 * 
 *     def __sub__(StdVectorFst x, StdVectorFst y):
 *         return x.difference(y)             # <<<<<<<<<<<<<<
 * 
 *     def set_closure(self, plus=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_x), __pyx_n_s_difference); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_y)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_y));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":561
 *         return result
 * 
 *     def __sub__(StdVectorFst x, StdVectorFst y):             # <<<<<<<<<<<<<<
 *         return x.difference(y)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":564
 *         return x.difference(y)
 * 
 *     def set_closure(self, plus=False):             # <<<<<<<<<<<<<<
 *         """fst.set_closure(): modify to the Kleene closure of the transducer"""
 *         openfst.Closure(self.fst, (openfst.CLOSURE_PLUS if plus
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_54set_closure(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_53set_closure[] = "fst.set_closure(): modify to the Kleene closure of the transducer";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_54set_closure(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_plus = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_closure (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_plus,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_plus);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_closure") < 0)) __PYX_ERR(0, 564, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_plus = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_closure", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 564, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.StdVectorFst.set_closure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_53set_closure(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), __pyx_v_plus);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_53set_closure(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_plus) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  enum fst::ClosureType __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_closure", 0);

  /* "openpyfst.pyx":566
 *     def set_closure(self, plus=False):
 *         """fst.set_closure(): modify to the Kleene closure of the transducer"""
 *         openfst.Closure(self.fst, (openfst.CLOSURE_PLUS if plus             # <<<<<<<<<<<<<<
 *             else openfst.CLOSURE_STAR))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_plus); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 566, __pyx_L1_error)
  if (__pyx_t_2) {
    __pyx_t_1 = fst::CLOSURE_PLUS;
  } else {

    /* "openpyfst.pyx":567
 *         """fst.set_closure(): modify to the Kleene closure of the transducer"""
 *         openfst.Closure(self.fst, (openfst.CLOSURE_PLUS if plus
 *             else openfst.CLOSURE_STAR))             # <<<<<<<<<<<<<<
 * 
 *     def closure(self):
 */
    __pyx_t_1 = fst::CLOSURE_STAR;
  }

  /* "openpyfst.pyx":566
 *     def set_closure(self, plus=False):
 *         """fst.set_closure(): modify to the Kleene closure of the transducer"""
 *         openfst.Closure(self.fst, (openfst.CLOSURE_PLUS if plus             # <<<<<<<<<<<<<<
 *             else openfst.CLOSURE_STAR))
 * 
 */
  fst::Closure(__pyx_v_self->fst, __pyx_t_1);

  /* "openpyfst.pyx":564
 *         return x.difference(y)
 * 
 *     def set_closure(self, plus=False):             # <<<<<<<<<<<<<<
 *         """fst.set_closure(): modify to the Kleene closure of the transducer"""
 *         openfst.Closure(self.fst, (openfst.CLOSURE_PLUS if plus
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("openpyfst.StdVectorFst.set_closure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":569
 *             else openfst.CLOSURE_STAR))
 * 
 *     def closure(self):             # <<<<<<<<<<<<<<
 *         """fst.closure() -> Kleene closure of the transducer"""
 *         cdef StdVectorFst result = self.copy()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_56closure(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_55closure[] = "fst.closure() -> Kleene closure of the transducer";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_56closure(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("closure (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_55closure(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_55closure(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("closure", 0);

  /* "openpyfst.pyx":571
 *     def closure(self):
 *         """fst.closure() -> Kleene closure of the transducer"""
 *         cdef StdVectorFst result = self.copy()             # <<<<<<<<<<<<<<
 *         result.set_closure()
 *         return result
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9openpyfst_StdVectorFst))))) __PYX_ERR(0, 571, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "openpyfst.pyx":572
 *         """fst.closure() -> Kleene closure of the transducer"""
 *         cdef StdVectorFst result = self.copy()
 *         result.set_closure()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_result), __pyx_n_s_set_closure); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openpyfst.pyx":573
 *         cdef StdVectorFst result = self.copy()
 *         result.set_closure()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def closure_plus(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "openpyfst.pyx":569
 *             else openfst.CLOSURE_STAR))
 * 
 *     def closure(self):             # <<<<<<<<<<<<<<
 *         """fst.closure() -> Kleene closure of the transducer"""
 *         cdef StdVectorFst result = self.copy()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.closure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":575
 *         return result
 * 
 *     def closure_plus(self):             # <<<<<<<<<<<<<<
 *         """fst.closure_plus() -> Kleen plus closure (X+ = XX*) of the transducer"""
 *         cdef StdVectorFst result = self.copy()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_58closure_plus(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_57closure_plus[] = "fst.closure_plus() -> Kleen plus closure (X+ = XX*) of the transducer";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_58closure_plus(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("closure_plus (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_57closure_plus(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_57closure_plus(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("closure_plus", 0);

  /* "openpyfst.pyx":577
 *     def closure_plus(self):
 *         """fst.closure_plus() -> Kleen plus closure (X+ = XX*) of the transducer"""
 *         cdef StdVectorFst result = self.copy()             # <<<<<<<<<<<<<<
 *         result.set_closure(plus=True)
 *         return result
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9openpyfst_StdVectorFst))))) __PYX_ERR(0, 577, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "openpyfst.pyx":578
 *         """fst.closure_plus() -> Kleen plus closure (X+ = XX*) of the transducer"""
 *         cdef StdVectorFst result = self.copy()
 *         result.set_closure(plus=True)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_result), __pyx_n_s_set_closure); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_plus, Py_True) < 0) __PYX_ERR(0, 578, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "openpyfst.pyx":579
 *         cdef StdVectorFst result = self.copy()
 *         result.set_closure(plus=True)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def invert(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "openpyfst.pyx":575
 *         return result
 * 
 *     def closure_plus(self):             # <<<<<<<<<<<<<<
 *         """fst.closure_plus() -> Kleen plus closure (X+ = XX*) of the transducer"""
 *         cdef StdVectorFst result = self.copy()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.closure_plus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":581
 *         return result
 * 
 *     def invert(self):             # <<<<<<<<<<<<<<
 *         """fst.invert(): modify to the inverse of the transducer
 *         switch input and output labels"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_60invert(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_59invert[] = "fst.invert(): modify to the inverse of the transducer\n        switch input and output labels";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_60invert(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("invert (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_59invert(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_59invert(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("invert", 0);

  /* "openpyfst.pyx":584
 *         """fst.invert(): modify to the inverse of the transducer
 *         switch input and output labels"""
 *         openfst.Invert(self.fst)             # <<<<<<<<<<<<<<
 *         self.isyms, self.osyms = self.osyms, self.isyms
 * 
 */
  fst::Invert(__pyx_v_self->fst);

  /* "openpyfst.pyx":585
 *         switch input and output labels"""
 *         openfst.Invert(self.fst)
 *         self.isyms, self.osyms = self.osyms, self.isyms             # <<<<<<<<<<<<<<
 * 
 *     def inverse(self):
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->osyms);
  __pyx_t_2 = ((PyObject *)__pyx_v_self->isyms);
  __pyx_v_self->isyms = ((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_self->osyms = ((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "openpyfst.pyx":581
 *         return result
 * 
 *     def invert(self):             # <<<<<<<<<<<<<<
 *         """fst.invert(): modify to the inverse of the transducer
 *         switch input and output labels"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":587
 *         self.isyms, self.osyms = self.osyms, self.isyms
 * 
 *     def inverse(self):             # <<<<<<<<<<<<<<
 *         """fst.inverse() -> inverse of the transducer"""
 *         cdef StdVectorFst result = self.copy()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_62inverse(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_61inverse[] = "fst.inverse() -> inverse of the transducer";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_62inverse(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inverse (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_61inverse(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_61inverse(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("inverse", 0);

  /* "openpyfst.pyx":589
 *     def inverse(self):
 *         """fst.inverse() -> inverse of the transducer"""
 *         cdef StdVectorFst result = self.copy()             # <<<<<<<<<<<<<<
 *         result.invert()
 *         return result
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9openpyfst_StdVectorFst))))) __PYX_ERR(0, 589, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "openpyfst.pyx":590
 *         """fst.inverse() -> inverse of the transducer"""
 *         cdef StdVectorFst result = self.copy()
 *         result.invert()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_result), __pyx_n_s_invert); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openpyfst.pyx":591
 *         cdef StdVectorFst result = self.copy()
 *         result.invert()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def reverse(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "openpyfst.pyx":587
 *         self.isyms, self.osyms = self.osyms, self.isyms
 * 
 *     def inverse(self):             # <<<<<<<<<<<<<<
 *         """fst.inverse() -> inverse of the transducer"""
 *         cdef StdVectorFst result = self.copy()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.inverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":593
 *         return result
 * 
 *     def reverse(self):             # <<<<<<<<<<<<<<
 *         """fst.reverse() -> reversed transducer"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_64reverse(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_63reverse[] = "fst.reverse() -> reversed transducer";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_64reverse(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reverse (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_63reverse(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_63reverse(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("reverse", 0);

  /* "openpyfst.pyx":595
 *     def reverse(self):
 *         """fst.reverse() -> reversed transducer"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)             # <<<<<<<<<<<<<<
 *         openfst.Reverse(self.fst[0], result.fst)
 *         return result
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_isyms, ((PyObject *)__pyx_v_self->isyms)) < 0) __PYX_ERR(0, 595, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_osyms, ((PyObject *)__pyx_v_self->osyms)) < 0) __PYX_ERR(0, 595, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9openpyfst_StdVectorFst), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "openpyfst.pyx":596
 *         """fst.reverse() -> reversed transducer"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         openfst.Reverse(self.fst[0], result.fst)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  fst::Reverse((__pyx_v_self->fst[0]), __pyx_v_result->fst);

  /* "openpyfst.pyx":597
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         openfst.Reverse(self.fst[0], result.fst)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def shortest_distance(self, bint reverse=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "openpyfst.pyx":593
 *         return result
 * 
 *     def reverse(self):             # <<<<<<<<<<<<<<
 *         """fst.reverse() -> reversed transducer"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.reverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":599
 *         return result
 * 
 *     def shortest_distance(self, bint reverse=False):             # <<<<<<<<<<<<<<
 *         """fst.shortest_distance(bool reverse=False) -> length of the shortest path"""
 *         cdef vector[openfst.TropicalWeight] distances
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_66shortest_distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_65shortest_distance[] = "fst.shortest_distance(bool reverse=False) -> length of the shortest path";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_66shortest_distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_reverse;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shortest_distance (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_reverse,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reverse);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "shortest_distance") < 0)) __PYX_ERR(0, 599, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_reverse = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_reverse == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 599, __pyx_L3_error)
    } else {
      __pyx_v_reverse = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("shortest_distance", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 599, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.StdVectorFst.shortest_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_65shortest_distance(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), __pyx_v_reverse);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_65shortest_distance(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, int __pyx_v_reverse) {
  std::vector<fst::TropicalWeight>  __pyx_v_distances;
  PyObject *__pyx_v_dist = NULL;
  unsigned int __pyx_8genexpr1__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<fst::TropicalWeight> ::size_type __pyx_t_2;
  std::vector<fst::TropicalWeight> ::size_type __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("shortest_distance", 0);

  /* "openpyfst.pyx":602
 *         """fst.shortest_distance(bool reverse=False) -> length of the shortest path"""
 *         cdef vector[openfst.TropicalWeight] distances
 *         openfst.ShortestDistance(self.fst[0], &distances, reverse)             # <<<<<<<<<<<<<<
 *         cdef unsigned i
 *         dist = [TropicalWeight(distances[i].Value()) for i in range(distances.size())]
 */
  fst::ShortestDistance((__pyx_v_self->fst[0]), (&__pyx_v_distances), __pyx_v_reverse);

  /* "openpyfst.pyx":604
 *         openfst.ShortestDistance(self.fst[0], &distances, reverse)
 *         cdef unsigned i
 *         dist = [TropicalWeight(distances[i].Value()) for i in range(distances.size())]             # <<<<<<<<<<<<<<
 *         return dist
 * 
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 604, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_v_distances.size();
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_8genexpr1__pyx_v_i = __pyx_t_4;
      __pyx_t_5 = PyFloat_FromDouble((__pyx_v_distances[__pyx_8genexpr1__pyx_v_i]).Value()); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 604, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9openpyfst_TropicalWeight), __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 604, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 604, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  } /* exit inner scope */
  __pyx_v_dist = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "openpyfst.pyx":605
 *         cdef unsigned i
 *         dist = [TropicalWeight(distances[i].Value()) for i in range(distances.size())]
 *         return dist             # <<<<<<<<<<<<<<
 * 
 *     def shortest_path(self, unsigned n=1):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_dist);
  __pyx_r = __pyx_v_dist;
  goto __pyx_L0;

  /* "openpyfst.pyx":599
 *         return result
 * 
 *     def shortest_distance(self, bint reverse=False):             # <<<<<<<<<<<<<<
 *         """fst.shortest_distance(bool reverse=False) -> length of the shortest path"""
 *         cdef vector[openfst.TropicalWeight] distances
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.shortest_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dist);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":607
 *         return dist
 * 
 *     def shortest_path(self, unsigned n=1):             # <<<<<<<<<<<<<<
 *         """fst.shortest_path(int n=1) -> transducer containing the n shortest paths"""
 *         if not isinstance(self, StdVectorFst):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_68shortest_path(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_67shortest_path[] = "fst.shortest_path(int n=1) -> transducer containing the n shortest paths";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_68shortest_path(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_n;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shortest_path (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "shortest_path") < 0)) __PYX_ERR(0, 607, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_n = __Pyx_PyInt_As_unsigned_int(values[0]); if (unlikely((__pyx_v_n == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 607, __pyx_L3_error)
    } else {
      __pyx_v_n = ((unsigned int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("shortest_path", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 607, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.StdVectorFst.shortest_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_67shortest_path(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), __pyx_v_n);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_67shortest_path(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, unsigned int __pyx_v_n) {
  struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("shortest_path", 0);

  /* "openpyfst.pyx":609
 *     def shortest_path(self, unsigned n=1):
 *         """fst.shortest_path(int n=1) -> transducer containing the n shortest paths"""
 *         if not isinstance(self, StdVectorFst):             # <<<<<<<<<<<<<<
 *             raise TypeError('Weight needs to have the path property and be right distributive')
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_9openpyfst_StdVectorFst); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "openpyfst.pyx":610
 *         """fst.shortest_path(int n=1) -> transducer containing the n shortest paths"""
 *         if not isinstance(self, StdVectorFst):
 *             raise TypeError('Weight needs to have the path property and be right distributive')             # <<<<<<<<<<<<<<
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         openfst.ShortestPath(self.fst[0], result.fst, n)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 610, __pyx_L1_error)

    /* "openpyfst.pyx":609
 *     def shortest_path(self, unsigned n=1):
 *         """fst.shortest_path(int n=1) -> transducer containing the n shortest paths"""
 *         if not isinstance(self, StdVectorFst):             # <<<<<<<<<<<<<<
 *             raise TypeError('Weight needs to have the path property and be right distributive')
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 */
  }

  /* "openpyfst.pyx":611
 *         if not isinstance(self, StdVectorFst):
 *             raise TypeError('Weight needs to have the path property and be right distributive')
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)             # <<<<<<<<<<<<<<
 *         openfst.ShortestPath(self.fst[0], result.fst, n)
 *         return result
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_isyms, ((PyObject *)__pyx_v_self->isyms)) < 0) __PYX_ERR(0, 611, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_osyms, ((PyObject *)__pyx_v_self->osyms)) < 0) __PYX_ERR(0, 611, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9openpyfst_StdVectorFst), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "openpyfst.pyx":612
 *             raise TypeError('Weight needs to have the path property and be right distributive')
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         openfst.ShortestPath(self.fst[0], result.fst, n)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  fst::ShortestPath((__pyx_v_self->fst[0]), __pyx_v_result->fst, __pyx_v_n);

  /* "openpyfst.pyx":613
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         openfst.ShortestPath(self.fst[0], result.fst, n)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def push(self, final=False, weights=False, labels=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "openpyfst.pyx":607
 *         return dist
 * 
 *     def shortest_path(self, unsigned n=1):             # <<<<<<<<<<<<<<
 *         """fst.shortest_path(int n=1) -> transducer containing the n shortest paths"""
 *         if not isinstance(self, StdVectorFst):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.shortest_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":615
 *         return result
 * 
 *     def push(self, final=False, weights=False, labels=False):             # <<<<<<<<<<<<<<
 *         """fst.push(final=False, weights=False, labels=False) -> transducer with
 *         weights or/and labels pushed to initial (default) or final state"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_70push(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_69push[] = "fst.push(final=False, weights=False, labels=False) -> transducer with\n        weights or/and labels pushed to initial (default) or final state";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_70push(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_final = 0;
  PyObject *__pyx_v_weights = 0;
  PyObject *__pyx_v_labels = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_final,&__pyx_n_s_weights,&__pyx_n_s_labels,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_False);
    values[1] = ((PyObject *)Py_False);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_final);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weights);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_labels);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "push") < 0)) __PYX_ERR(0, 615, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_final = values[0];
    __pyx_v_weights = values[1];
    __pyx_v_labels = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("push", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 615, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.StdVectorFst.push", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_69push(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), __pyx_v_final, __pyx_v_weights, __pyx_v_labels);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_69push(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_final, PyObject *__pyx_v_weights, PyObject *__pyx_v_labels) {
  struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_result = 0;
  int __pyx_v_ptype;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("push", 0);

  /* "openpyfst.pyx":618
 *         """fst.push(final=False, weights=False, labels=False) -> transducer with
 *         weights or/and labels pushed to initial (default) or final state"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)             # <<<<<<<<<<<<<<
 *         cdef int ptype = 0
 *         if weights: ptype |= openfst.kPushWeights
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_isyms, ((PyObject *)__pyx_v_self->isyms)) < 0) __PYX_ERR(0, 618, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_osyms, ((PyObject *)__pyx_v_self->osyms)) < 0) __PYX_ERR(0, 618, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9openpyfst_StdVectorFst), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "openpyfst.pyx":619
 *         weights or/and labels pushed to initial (default) or final state"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         cdef int ptype = 0             # <<<<<<<<<<<<<<
 *         if weights: ptype |= openfst.kPushWeights
 *         if labels: ptype |= openfst.kPushLabels
 */
  __pyx_v_ptype = 0;

  /* "openpyfst.pyx":620
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         cdef int ptype = 0
 *         if weights: ptype |= openfst.kPushWeights             # <<<<<<<<<<<<<<
 *         if labels: ptype |= openfst.kPushLabels
 *         if final:
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_weights); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 620, __pyx_L1_error)
  if (__pyx_t_3) {
    __pyx_v_ptype = (__pyx_v_ptype | fst::kPushWeights);
  }

  /* "openpyfst.pyx":621
 *         cdef int ptype = 0
 *         if weights: ptype |= openfst.kPushWeights
 *         if labels: ptype |= openfst.kPushLabels             # <<<<<<<<<<<<<<
 *         if final:
 *             openfst.StdArcPushFinal(self.fst[0], result.fst, ptype)
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_labels); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 621, __pyx_L1_error)
  if (__pyx_t_3) {
    __pyx_v_ptype = (__pyx_v_ptype | fst::kPushLabels);
  }

  /* "openpyfst.pyx":622
 *         if weights: ptype |= openfst.kPushWeights
 *         if labels: ptype |= openfst.kPushLabels
 *         if final:             # <<<<<<<<<<<<<<
 *             openfst.StdArcPushFinal(self.fst[0], result.fst, ptype)
 *         else:
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_final); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 622, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "openpyfst.pyx":623
 *         if labels: ptype |= openfst.kPushLabels
 *         if final:
 *             openfst.StdArcPushFinal(self.fst[0], result.fst, ptype)             # <<<<<<<<<<<<<<
 *         else:
 *             openfst.StdArcPushInitial(self.fst[0], result.fst, ptype)
 */
    fst::Push<fst::StdArc, fst::REWEIGHT_TO_FINAL>((__pyx_v_self->fst[0]), __pyx_v_result->fst, __pyx_v_ptype);

    /* "openpyfst.pyx":622
 *         if weights: ptype |= openfst.kPushWeights
 *         if labels: ptype |= openfst.kPushLabels
 *         if final:             # <<<<<<<<<<<<<<
 *             openfst.StdArcPushFinal(self.fst[0], result.fst, ptype)
 *         else:
 */
    goto __pyx_L5;
  }

  /* "openpyfst.pyx":625
 *             openfst.StdArcPushFinal(self.fst[0], result.fst, ptype)
 *         else:
 *             openfst.StdArcPushInitial(self.fst[0], result.fst, ptype)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  /*else*/ {
    fst::Push<fst::StdArc, fst::REWEIGHT_TO_INITIAL>((__pyx_v_self->fst[0]), __pyx_v_result->fst, __pyx_v_ptype);
  }
  __pyx_L5:;

  /* "openpyfst.pyx":626
 *         else:
 *             openfst.StdArcPushInitial(self.fst[0], result.fst, ptype)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def push_weights(self, final=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "openpyfst.pyx":615
 *         return result
 * 
 *     def push(self, final=False, weights=False, labels=False):             # <<<<<<<<<<<<<<
 *         """fst.push(final=False, weights=False, labels=False) -> transducer with
 *         weights or/and labels pushed to initial (default) or final state"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.push", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":628
 *         return result
 * 
 *     def push_weights(self, final=False):             # <<<<<<<<<<<<<<
 *         """fst.push_weights(final=False) -> transducer with weights pushed
 *         to initial (default) or final state"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_72push_weights(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_71push_weights[] = "fst.push_weights(final=False) -> transducer with weights pushed\n        to initial (default) or final state";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_72push_weights(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_final = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_weights (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_final,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_final);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "push_weights") < 0)) __PYX_ERR(0, 628, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_final = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("push_weights", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 628, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.StdVectorFst.push_weights", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_71push_weights(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), __pyx_v_final);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_71push_weights(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_final) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("push_weights", 0);

  /* "openpyfst.pyx":631
 *         """fst.push_weights(final=False) -> transducer with weights pushed
 *         to initial (default) or final state"""
 *         return self.push(final, weights=True)             # <<<<<<<<<<<<<<
 * 
 *     def push_labels(self, final=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_push); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_final);
  __Pyx_GIVEREF(__pyx_v_final);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_final);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_weights, Py_True) < 0) __PYX_ERR(0, 631, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":628
 *         return result
 * 
 *     def push_weights(self, final=False):             # <<<<<<<<<<<<<<
 *         """fst.push_weights(final=False) -> transducer with weights pushed
 *         to initial (default) or final state"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.push_weights", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":633
 *         return self.push(final, weights=True)
 * 
 *     def push_labels(self, final=False):             # <<<<<<<<<<<<<<
 *         """fst.push_labels(final=False) -> transducer with labels pushed
 *         to initial (default) or final state"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_74push_labels(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_73push_labels[] = "fst.push_labels(final=False) -> transducer with labels pushed\n        to initial (default) or final state";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_74push_labels(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_final = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_labels (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_final,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_final);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "push_labels") < 0)) __PYX_ERR(0, 633, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_final = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("push_labels", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 633, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.StdVectorFst.push_labels", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_73push_labels(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), __pyx_v_final);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_73push_labels(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_final) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("push_labels", 0);

  /* "openpyfst.pyx":636
 *         """fst.push_labels(final=False) -> transducer with labels pushed
 *         to initial (default) or final state"""
 *         return self.push(final, labels=True)             # <<<<<<<<<<<<<<
 * 
 *     def reweight(self, potentials, final=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_push); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_final);
  __Pyx_GIVEREF(__pyx_v_final);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_final);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_labels, Py_True) < 0) __PYX_ERR(0, 636, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":633
 *         return self.push(final, weights=True)
 * 
 *     def push_labels(self, final=False):             # <<<<<<<<<<<<<<
 *         """fst.push_labels(final=False) -> transducer with labels pushed
 *         to initial (default) or final state"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.push_labels", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":638
 *         return self.push(final, labels=True)
 * 
 *     def reweight(self, potentials, final=False):             # <<<<<<<<<<<<<<
 *         """fst.reweight(potentials, final=False): reweight arcs with given
 *         potentials in direction of initial (default) or final state"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_76reweight(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_75reweight[] = "fst.reweight(potentials, final=False): reweight arcs with given\n        potentials in direction of initial (default) or final state";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_76reweight(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_potentials = 0;
  PyObject *__pyx_v_final = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reweight (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_potentials,&__pyx_n_s_final,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_final);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "reweight") < 0)) __PYX_ERR(0, 638, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_potentials = values[0];
    __pyx_v_final = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reweight", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 638, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.StdVectorFst.reweight", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_75reweight(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), __pyx_v_potentials, __pyx_v_final);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_75reweight(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_potentials, PyObject *__pyx_v_final) {
  PyObject *__pyx_v_rtype = 0;
  std::vector<fst::TropicalWeight>  __pyx_v_potentials_vector;
  PyObject *__pyx_v_weight = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::vector<fst::TropicalWeight>  __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  enum fst::ReweightType __pyx_t_9;
  __Pyx_RefNannySetupContext("reweight", 0);

  /* "openpyfst.pyx":641
 *         """fst.reweight(potentials, final=False): reweight arcs with given
 *         potentials in direction of initial (default) or final state"""
 *         if not len(potentials) == len(self):             # <<<<<<<<<<<<<<
 *             raise ValueError('potential list of invalid length')
 *         cdef rtype = (openfst.REWEIGHT_TO_FINAL if final else
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_potentials); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 641, __pyx_L1_error)
  __pyx_t_2 = PyObject_Length(((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 641, __pyx_L1_error)
  __pyx_t_3 = ((!((__pyx_t_1 == __pyx_t_2) != 0)) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "openpyfst.pyx":642
 *         potentials in direction of initial (default) or final state"""
 *         if not len(potentials) == len(self):
 *             raise ValueError('potential list of invalid length')             # <<<<<<<<<<<<<<
 *         cdef rtype = (openfst.REWEIGHT_TO_FINAL if final else
 *                 openfst.REWEIGHT_TO_INITIAL)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 642, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 642, __pyx_L1_error)

    /* "openpyfst.pyx":641
 *         """fst.reweight(potentials, final=False): reweight arcs with given
 *         potentials in direction of initial (default) or final state"""
 *         if not len(potentials) == len(self):             # <<<<<<<<<<<<<<
 *             raise ValueError('potential list of invalid length')
 *         cdef rtype = (openfst.REWEIGHT_TO_FINAL if final else
 */
  }

  /* "openpyfst.pyx":643
 *         if not len(potentials) == len(self):
 *             raise ValueError('potential list of invalid length')
 *         cdef rtype = (openfst.REWEIGHT_TO_FINAL if final else             # <<<<<<<<<<<<<<
 *                 openfst.REWEIGHT_TO_INITIAL)
 *         cdef vector[openfst.TropicalWeight] potentials_vector = vector[openfst.TropicalWeight]()
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_final); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 643, __pyx_L1_error)
  if (__pyx_t_3) {
    __pyx_t_5 = __Pyx_PyInt_From_enum__fst_3a__3a_ReweightType(fst::REWEIGHT_TO_FINAL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 643, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __pyx_t_5;
    __pyx_t_5 = 0;
  } else {

    /* "openpyfst.pyx":644
 *             raise ValueError('potential list of invalid length')
 *         cdef rtype = (openfst.REWEIGHT_TO_FINAL if final else
 *                 openfst.REWEIGHT_TO_INITIAL)             # <<<<<<<<<<<<<<
 *         cdef vector[openfst.TropicalWeight] potentials_vector = vector[openfst.TropicalWeight]()
 *         for weight in potentials:
 */
    __pyx_t_5 = __Pyx_PyInt_From_enum__fst_3a__3a_ReweightType(fst::REWEIGHT_TO_INITIAL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 644, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __pyx_t_5;
    __pyx_t_5 = 0;
  }
  __pyx_v_rtype = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "openpyfst.pyx":645
 *         cdef rtype = (openfst.REWEIGHT_TO_FINAL if final else
 *                 openfst.REWEIGHT_TO_INITIAL)
 *         cdef vector[openfst.TropicalWeight] potentials_vector = vector[openfst.TropicalWeight]()             # <<<<<<<<<<<<<<
 *         for weight in potentials:
 *             if not isinstance(weight, TropicalWeight):
 */
  try {
    __pyx_t_6 = std::vector<fst::TropicalWeight> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 645, __pyx_L1_error)
  }
  __pyx_v_potentials_vector = __pyx_t_6;

  /* "openpyfst.pyx":646
 *                 openfst.REWEIGHT_TO_INITIAL)
 *         cdef vector[openfst.TropicalWeight] potentials_vector = vector[openfst.TropicalWeight]()
 *         for weight in potentials:             # <<<<<<<<<<<<<<
 *             if not isinstance(weight, TropicalWeight):
 *                 weight = TropicalWeight(weight)
 */
  if (likely(PyList_CheckExact(__pyx_v_potentials)) || PyTuple_CheckExact(__pyx_v_potentials)) {
    __pyx_t_4 = __pyx_v_potentials; __Pyx_INCREF(__pyx_t_4); __pyx_t_2 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_potentials); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 646, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 646, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_5); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 646, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 646, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_5); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 646, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 646, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_7(__pyx_t_4);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 646, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_weight, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "openpyfst.pyx":647
 *         cdef vector[openfst.TropicalWeight] potentials_vector = vector[openfst.TropicalWeight]()
 *         for weight in potentials:
 *             if not isinstance(weight, TropicalWeight):             # <<<<<<<<<<<<<<
 *                 weight = TropicalWeight(weight)
 *             potentials_vector.push_back((<TropicalWeight> weight).weight[0])
 */
    __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_weight, __pyx_ptype_9openpyfst_TropicalWeight); 
    __pyx_t_8 = ((!(__pyx_t_3 != 0)) != 0);
    if (__pyx_t_8) {

      /* "openpyfst.pyx":648
 *         for weight in potentials:
 *             if not isinstance(weight, TropicalWeight):
 *                 weight = TropicalWeight(weight)             # <<<<<<<<<<<<<<
 *             potentials_vector.push_back((<TropicalWeight> weight).weight[0])
 *         openfst.StdArcReweight(self.fst, potentials_vector, rtype)
 */
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9openpyfst_TropicalWeight), __pyx_v_weight); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 648, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF_SET(__pyx_v_weight, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "openpyfst.pyx":647
 *         cdef vector[openfst.TropicalWeight] potentials_vector = vector[openfst.TropicalWeight]()
 *         for weight in potentials:
 *             if not isinstance(weight, TropicalWeight):             # <<<<<<<<<<<<<<
 *                 weight = TropicalWeight(weight)
 *             potentials_vector.push_back((<TropicalWeight> weight).weight[0])
 */
    }

    /* "openpyfst.pyx":649
 *             if not isinstance(weight, TropicalWeight):
 *                 weight = TropicalWeight(weight)
 *             potentials_vector.push_back((<TropicalWeight> weight).weight[0])             # <<<<<<<<<<<<<<
 *         openfst.StdArcReweight(self.fst, potentials_vector, rtype)
 * 
 */
    try {
      __pyx_v_potentials_vector.push_back((((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_v_weight)->weight[0]));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 649, __pyx_L1_error)
    }

    /* "openpyfst.pyx":646
 *                 openfst.REWEIGHT_TO_INITIAL)
 *         cdef vector[openfst.TropicalWeight] potentials_vector = vector[openfst.TropicalWeight]()
 *         for weight in potentials:             # <<<<<<<<<<<<<<
 *             if not isinstance(weight, TropicalWeight):
 *                 weight = TropicalWeight(weight)
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "openpyfst.pyx":650
 *                 weight = TropicalWeight(weight)
 *             potentials_vector.push_back((<TropicalWeight> weight).weight[0])
 *         openfst.StdArcReweight(self.fst, potentials_vector, rtype)             # <<<<<<<<<<<<<<
 * 
 *     def minimize(self):
 */
  __pyx_t_9 = ((enum fst::ReweightType)__Pyx_PyInt_As_enum__fst_3a__3a_ReweightType(__pyx_v_rtype)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 650, __pyx_L1_error)
  fst::Reweight<fst::StdArc>(__pyx_v_self->fst, __pyx_v_potentials_vector, __pyx_t_9);

  /* "openpyfst.pyx":638
 *         return self.push(final, labels=True)
 * 
 *     def reweight(self, potentials, final=False):             # <<<<<<<<<<<<<<
 *         """fst.reweight(potentials, final=False): reweight arcs with given
 *         potentials in direction of initial (default) or final state"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.reweight", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_rtype);
  __Pyx_XDECREF(__pyx_v_weight);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":652
 *         openfst.StdArcReweight(self.fst, potentials_vector, rtype)
 * 
 *     def minimize(self):             # <<<<<<<<<<<<<<
 *         """fst.minimize(): minimize the transducer"""
 *         if not self.input_deterministic:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_78minimize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_77minimize[] = "fst.minimize(): minimize the transducer";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_78minimize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("minimize (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_77minimize(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_77minimize(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("minimize", 0);

  /* "openpyfst.pyx":654
 *     def minimize(self):
 *         """fst.minimize(): minimize the transducer"""
 *         if not self.input_deterministic:             # <<<<<<<<<<<<<<
 *             raise ValueError('transducer is not input deterministic')
 *         openfst.Minimize(self.fst)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_input_deterministic); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "openpyfst.pyx":655
 *         """fst.minimize(): minimize the transducer"""
 *         if not self.input_deterministic:
 *             raise ValueError('transducer is not input deterministic')             # <<<<<<<<<<<<<<
 *         openfst.Minimize(self.fst)
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 655, __pyx_L1_error)

    /* "openpyfst.pyx":654
 *     def minimize(self):
 *         """fst.minimize(): minimize the transducer"""
 *         if not self.input_deterministic:             # <<<<<<<<<<<<<<
 *             raise ValueError('transducer is not input deterministic')
 *         openfst.Minimize(self.fst)
 */
  }

  /* "openpyfst.pyx":656
 *         if not self.input_deterministic:
 *             raise ValueError('transducer is not input deterministic')
 *         openfst.Minimize(self.fst)             # <<<<<<<<<<<<<<
 * 
 *     def arc_sort_input(self):
 */
  fst::Minimize(__pyx_v_self->fst);

  /* "openpyfst.pyx":652
 *         openfst.StdArcReweight(self.fst, potentials_vector, rtype)
 * 
 *     def minimize(self):             # <<<<<<<<<<<<<<
 *         """fst.minimize(): minimize the transducer"""
 *         if not self.input_deterministic:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.minimize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":658
 *         openfst.Minimize(self.fst)
 * 
 *     def arc_sort_input(self):             # <<<<<<<<<<<<<<
 *         """fst.arc_sort_input(): sort the input arcs of the transducer"""
 *         cdef openfst.ILabelCompare[openfst.StdArc] icomp
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_80arc_sort_input(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_79arc_sort_input[] = "fst.arc_sort_input(): sort the input arcs of the transducer";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_80arc_sort_input(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("arc_sort_input (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_79arc_sort_input(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_79arc_sort_input(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  fst::ILabelCompare<fst::StdArc>  __pyx_v_icomp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("arc_sort_input", 0);

  /* "openpyfst.pyx":661
 *         """fst.arc_sort_input(): sort the input arcs of the transducer"""
 *         cdef openfst.ILabelCompare[openfst.StdArc] icomp
 *         openfst.ArcSort(self.fst, icomp)             # <<<<<<<<<<<<<<
 * 
 *     def arc_sort_output(self):
 */
  fst::ArcSort(__pyx_v_self->fst, __pyx_v_icomp);

  /* "openpyfst.pyx":658
 *         openfst.Minimize(self.fst)
 * 
 *     def arc_sort_input(self):             # <<<<<<<<<<<<<<
 *         """fst.arc_sort_input(): sort the input arcs of the transducer"""
 *         cdef openfst.ILabelCompare[openfst.StdArc] icomp
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":663
 *         openfst.ArcSort(self.fst, icomp)
 * 
 *     def arc_sort_output(self):             # <<<<<<<<<<<<<<
 *         """fst.arc_sort_output(): sort the output arcs of the transducer"""
 *         cdef openfst.OLabelCompare[openfst.StdArc] ocomp
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_82arc_sort_output(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_81arc_sort_output[] = "fst.arc_sort_output(): sort the output arcs of the transducer";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_82arc_sort_output(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("arc_sort_output (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_81arc_sort_output(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_81arc_sort_output(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  fst::OLabelCompare<fst::StdArc>  __pyx_v_ocomp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("arc_sort_output", 0);

  /* "openpyfst.pyx":666
 *         """fst.arc_sort_output(): sort the output arcs of the transducer"""
 *         cdef openfst.OLabelCompare[openfst.StdArc] ocomp
 *         openfst.ArcSort(self.fst, ocomp)             # <<<<<<<<<<<<<<
 * 
 *     def top_sort(self):
 */
  fst::ArcSort(__pyx_v_self->fst, __pyx_v_ocomp);

  /* "openpyfst.pyx":663
 *         openfst.ArcSort(self.fst, icomp)
 * 
 *     def arc_sort_output(self):             # <<<<<<<<<<<<<<
 *         """fst.arc_sort_output(): sort the output arcs of the transducer"""
 *         cdef openfst.OLabelCompare[openfst.StdArc] ocomp
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":668
 *         openfst.ArcSort(self.fst, ocomp)
 * 
 *     def top_sort(self):             # <<<<<<<<<<<<<<
 *         """fst.top_sort(): topologically sort the nodes of the transducer"""
 *         openfst.TopSort(self.fst)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_84top_sort(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_83top_sort[] = "fst.top_sort(): topologically sort the nodes of the transducer";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_84top_sort(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("top_sort (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_83top_sort(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_83top_sort(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("top_sort", 0);

  /* "openpyfst.pyx":670
 *     def top_sort(self):
 *         """fst.top_sort(): topologically sort the nodes of the transducer"""
 *         openfst.TopSort(self.fst)             # <<<<<<<<<<<<<<
 * 
 *     def project_input(self):
 */
  fst::TopSort(__pyx_v_self->fst);

  /* "openpyfst.pyx":668
 *         openfst.ArcSort(self.fst, ocomp)
 * 
 *     def top_sort(self):             # <<<<<<<<<<<<<<
 *         """fst.top_sort(): topologically sort the nodes of the transducer"""
 *         openfst.TopSort(self.fst)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":672
 *         openfst.TopSort(self.fst)
 * 
 *     def project_input(self):             # <<<<<<<<<<<<<<
 *         """fst.project_input(): project the transducer on the input side"""
 *         openfst.Project(self.fst, openfst.PROJECT_INPUT)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_86project_input(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_85project_input[] = "fst.project_input(): project the transducer on the input side";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_86project_input(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project_input (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_85project_input(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_85project_input(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("project_input", 0);

  /* "openpyfst.pyx":674
 *     def project_input(self):
 *         """fst.project_input(): project the transducer on the input side"""
 *         openfst.Project(self.fst, openfst.PROJECT_INPUT)             # <<<<<<<<<<<<<<
 *         self.osyms = self.isyms
 * 
 */
  fst::Project(__pyx_v_self->fst, fst::PROJECT_INPUT);

  /* "openpyfst.pyx":675
 *         """fst.project_input(): project the transducer on the input side"""
 *         openfst.Project(self.fst, openfst.PROJECT_INPUT)
 *         self.osyms = self.isyms             # <<<<<<<<<<<<<<
 * 
 *     def project_output(self):
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->isyms);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->osyms);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->osyms));
  __pyx_v_self->osyms = ((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "openpyfst.pyx":672
 *         openfst.TopSort(self.fst)
 * 
 *     def project_input(self):             # <<<<<<<<<<<<<<
 *         """fst.project_input(): project the transducer on the input side"""
 *         openfst.Project(self.fst, openfst.PROJECT_INPUT)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":677
 *         self.osyms = self.isyms
 * 
 *     def project_output(self):             # <<<<<<<<<<<<<<
 *         """fst.project_output(): project the transducer on the output side"""
 *         openfst.Project(self.fst, openfst.PROJECT_OUTPUT)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_88project_output(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_87project_output[] = "fst.project_output(): project the transducer on the output side";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_88project_output(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project_output (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_87project_output(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_87project_output(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("project_output", 0);

  /* "openpyfst.pyx":679
 *     def project_output(self):
 *         """fst.project_output(): project the transducer on the output side"""
 *         openfst.Project(self.fst, openfst.PROJECT_OUTPUT)             # <<<<<<<<<<<<<<
 *         self.isyms = self.osyms
 * 
 */
  fst::Project(__pyx_v_self->fst, fst::PROJECT_OUTPUT);

  /* "openpyfst.pyx":680
 *         """fst.project_output(): project the transducer on the output side"""
 *         openfst.Project(self.fst, openfst.PROJECT_OUTPUT)
 *         self.isyms = self.osyms             # <<<<<<<<<<<<<<
 * 
 *     def remove_epsilon(self):
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->osyms);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->isyms);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->isyms));
  __pyx_v_self->isyms = ((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "openpyfst.pyx":677
 *         self.osyms = self.isyms
 * 
 *     def project_output(self):             # <<<<<<<<<<<<<<
 *         """fst.project_output(): project the transducer on the output side"""
 *         openfst.Project(self.fst, openfst.PROJECT_OUTPUT)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":682
 *         self.isyms = self.osyms
 * 
 *     def remove_epsilon(self):             # <<<<<<<<<<<<<<
 *         """fst.remove_epsilon(): remove the epsilon transitions from the transducer"""
 *         openfst.RmEpsilon(self.fst)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_90remove_epsilon(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_89remove_epsilon[] = "fst.remove_epsilon(): remove the epsilon transitions from the transducer";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_90remove_epsilon(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_epsilon (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_89remove_epsilon(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_89remove_epsilon(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_epsilon", 0);

  /* "openpyfst.pyx":684
 *     def remove_epsilon(self):
 *         """fst.remove_epsilon(): remove the epsilon transitions from the transducer"""
 *         openfst.RmEpsilon(self.fst)             # <<<<<<<<<<<<<<
 * 
 *     def _tosym(self, label, io):
 */
  fst::RmEpsilon(__pyx_v_self->fst);

  /* "openpyfst.pyx":682
 *         self.isyms = self.osyms
 * 
 *     def remove_epsilon(self):             # <<<<<<<<<<<<<<
 *         """fst.remove_epsilon(): remove the epsilon transitions from the transducer"""
 *         openfst.RmEpsilon(self.fst)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":686
 *         openfst.RmEpsilon(self.fst)
 * 
 *     def _tosym(self, label, io):             # <<<<<<<<<<<<<<
 *         # If integer label, return integer
 *         if isinstance(label, int):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_92_tosym(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_92_tosym(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_io = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_tosym (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,&__pyx_n_s_io,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_io)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_tosym", 1, 2, 2, 1); __PYX_ERR(0, 686, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_tosym") < 0)) __PYX_ERR(0, 686, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_label = values[0];
    __pyx_v_io = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_tosym", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 686, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.StdVectorFst._tosym", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_91_tosym(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), __pyx_v_label, __pyx_v_io);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_91_tosym(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_label, PyObject *__pyx_v_io) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("_tosym", 0);

  /* "openpyfst.pyx":688
 *     def _tosym(self, label, io):
 *         # If integer label, return integer
 *         if isinstance(label, int):             # <<<<<<<<<<<<<<
 *             return label
 *         # Otherwise, try to convert using symbol tables
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_label); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "openpyfst.pyx":689
 *         # If integer label, return integer
 *         if isinstance(label, int):
 *             return label             # <<<<<<<<<<<<<<
 *         # Otherwise, try to convert using symbol tables
 *         if io and self.isyms is not None:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_label);
    __pyx_r = __pyx_v_label;
    goto __pyx_L0;

    /* "openpyfst.pyx":688
 *     def _tosym(self, label, io):
 *         # If integer label, return integer
 *         if isinstance(label, int):             # <<<<<<<<<<<<<<
 *             return label
 *         # Otherwise, try to convert using symbol tables
 */
  }

  /* "openpyfst.pyx":691
 *             return label
 *         # Otherwise, try to convert using symbol tables
 *         if io and self.isyms is not None:             # <<<<<<<<<<<<<<
 *             return self.isyms[label]
 *         elif not io and self.osyms is not None:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_io); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 691, __pyx_L1_error)
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_1 = (((PyObject *)__pyx_v_self->isyms) != Py_None);
  __pyx_t_3 = (__pyx_t_1 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "openpyfst.pyx":692
 *         # Otherwise, try to convert using symbol tables
 *         if io and self.isyms is not None:
 *             return self.isyms[label]             # <<<<<<<<<<<<<<
 *         elif not io and self.osyms is not None:
 *             return self.osyms[label]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->isyms), __pyx_v_label); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "openpyfst.pyx":691
 *             return label
 *         # Otherwise, try to convert using symbol tables
 *         if io and self.isyms is not None:             # <<<<<<<<<<<<<<
 *             return self.isyms[label]
 *         elif not io and self.osyms is not None:
 */
  }

  /* "openpyfst.pyx":693
 *         if io and self.isyms is not None:
 *             return self.isyms[label]
 *         elif not io and self.osyms is not None:             # <<<<<<<<<<<<<<
 *             return self.osyms[label]
 *         raise TypeError('Cannot convert label "{0}" to symbol'.format(label))
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_io); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 693, __pyx_L1_error)
  __pyx_t_1 = ((!__pyx_t_3) != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_1 = (((PyObject *)__pyx_v_self->osyms) != Py_None);
  __pyx_t_3 = (__pyx_t_1 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_2) {

    /* "openpyfst.pyx":694
 *             return self.isyms[label]
 *         elif not io and self.osyms is not None:
 *             return self.osyms[label]             # <<<<<<<<<<<<<<
 *         raise TypeError('Cannot convert label "{0}" to symbol'.format(label))
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->osyms), __pyx_v_label); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 694, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "openpyfst.pyx":693
 *         if io and self.isyms is not None:
 *             return self.isyms[label]
 *         elif not io and self.osyms is not None:             # <<<<<<<<<<<<<<
 *             return self.osyms[label]
 *         raise TypeError('Cannot convert label "{0}" to symbol'.format(label))
 */
  }

  /* "openpyfst.pyx":695
 *         elif not io and self.osyms is not None:
 *             return self.osyms[label]
 *         raise TypeError('Cannot convert label "{0}" to symbol'.format(label))             # <<<<<<<<<<<<<<
 * 
 *     def relabel(self, imap={}, omap={}):
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Cannot_convert_label_0_to_symbol, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_label) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_label);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_Raise(__pyx_t_5, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __PYX_ERR(0, 695, __pyx_L1_error)

  /* "openpyfst.pyx":686
 *         openfst.RmEpsilon(self.fst)
 * 
 *     def _tosym(self, label, io):             # <<<<<<<<<<<<<<
 *         # If integer label, return integer
 *         if isinstance(label, int):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("openpyfst.StdVectorFst._tosym", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":697
 *         raise TypeError('Cannot convert label "{0}" to symbol'.format(label))
 * 
 *     def relabel(self, imap={}, omap={}):             # <<<<<<<<<<<<<<
 *         """fst.relabel(imap={}, omap={}): relabel the symbols on the arcs of the transducer
 *         imap/omap: (int -> int) or (str -> str) symbol mappings"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_94relabel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_93relabel[] = "fst.relabel(imap={}, omap={}): relabel the symbols on the arcs of the transducer\n        imap/omap: (int -> int) or (str -> str) symbol mappings";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_94relabel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_imap = 0;
  PyObject *__pyx_v_omap = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("relabel (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_imap,&__pyx_n_s_omap,0};
    PyObject* values[2] = {0,0};
    values[0] = __pyx_k__28;
    values[1] = __pyx_k__29;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_imap);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_omap);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "relabel") < 0)) __PYX_ERR(0, 697, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_imap = values[0];
    __pyx_v_omap = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("relabel", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 697, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.StdVectorFst.relabel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_93relabel(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), __pyx_v_imap, __pyx_v_omap);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_93relabel(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_imap, PyObject *__pyx_v_omap) {
  std::vector<std::pair<int,int> >  __pyx_v_ip;
  std::vector<std::pair<int,int> >  __pyx_v_op;
  PyObject *__pyx_v_old = NULL;
  PyObject *__pyx_v_new = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  std::pair<int,int>  __pyx_t_11;
  __Pyx_RefNannySetupContext("relabel", 0);

  /* "openpyfst.pyx":702
 *         cdef vector[pair[int, int]] ip
 *         cdef vector[pair[int, int]] op
 *         for old, new in imap.items():             # <<<<<<<<<<<<<<
 *             ip.push_back(pair[int, int](self._tosym(old, True), self._tosym(new, True)))
 *         for old, new in omap.items():
 */
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_imap == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 702, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_imap, 0, __pyx_n_s_items, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_old, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "openpyfst.pyx":703
 *         cdef vector[pair[int, int]] op
 *         for old, new in imap.items():
 *             ip.push_back(pair[int, int](self._tosym(old, True), self._tosym(new, True)))             # <<<<<<<<<<<<<<
 *         for old, new in omap.items():
 *             op.push_back(pair[int, int](self._tosym(old, False), self._tosym(new, False)))
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_tosym); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_old, Py_True};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 703, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_old, Py_True};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 703, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 703, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_INCREF(__pyx_v_old);
      __Pyx_GIVEREF(__pyx_v_old);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_7, __pyx_v_old);
      __Pyx_INCREF(Py_True);
      __Pyx_GIVEREF(Py_True);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_7, Py_True);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 703, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_tosym); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_v_new, Py_True};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 703, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_v_new, Py_True};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 703, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 703, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_INCREF(__pyx_v_new);
      __Pyx_GIVEREF(__pyx_v_new);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_10, __pyx_v_new);
      __Pyx_INCREF(Py_True);
      __Pyx_GIVEREF(Py_True);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_10, Py_True);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 703, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    try {
      __pyx_t_11 = std::pair<int,int> (__pyx_t_7, __pyx_t_10);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 703, __pyx_L1_error)
    }
    try {
      __pyx_v_ip.push_back(__pyx_t_11);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 703, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openpyfst.pyx":704
 *         for old, new in imap.items():
 *             ip.push_back(pair[int, int](self._tosym(old, True), self._tosym(new, True)))
 *         for old, new in omap.items():             # <<<<<<<<<<<<<<
 *             op.push_back(pair[int, int](self._tosym(old, False), self._tosym(new, False)))
 *         openfst.Relabel(self.fst, ip, op)
 */
  __pyx_t_3 = 0;
  if (unlikely(__pyx_v_omap == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 704, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_dict_iterator(__pyx_v_omap, 0, __pyx_n_s_items, (&__pyx_t_2), (&__pyx_t_4)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_6;
  __pyx_t_6 = 0;
  while (1) {
    __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_2, &__pyx_t_3, &__pyx_t_6, &__pyx_t_5, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_10 == 0)) break;
    if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 704, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_old, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "openpyfst.pyx":705
 *             ip.push_back(pair[int, int](self._tosym(old, True), self._tosym(new, True)))
 *         for old, new in omap.items():
 *             op.push_back(pair[int, int](self._tosym(old, False), self._tosym(new, False)))             # <<<<<<<<<<<<<<
 *         openfst.Relabel(self.fst, ip, op)
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_tosym); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 705, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_old, Py_False};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 705, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_old, Py_False};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 705, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_INCREF(__pyx_v_old);
      __Pyx_GIVEREF(__pyx_v_old);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_10, __pyx_v_old);
      __Pyx_INCREF(Py_False);
      __Pyx_GIVEREF(Py_False);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_10, Py_False);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 705, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_tosym); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 705, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_v_new, Py_False};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 705, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_v_new, Py_False};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 705, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_INCREF(__pyx_v_new);
      __Pyx_GIVEREF(__pyx_v_new);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_new);
      __Pyx_INCREF(Py_False);
      __Pyx_GIVEREF(Py_False);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, Py_False);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 705, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    try {
      __pyx_t_11 = std::pair<int,int> (__pyx_t_10, __pyx_t_7);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 705, __pyx_L1_error)
    }
    try {
      __pyx_v_op.push_back(__pyx_t_11);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 705, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openpyfst.pyx":706
 *         for old, new in omap.items():
 *             op.push_back(pair[int, int](self._tosym(old, False), self._tosym(new, False)))
 *         openfst.Relabel(self.fst, ip, op)             # <<<<<<<<<<<<<<
 * 
 *     def prune(self, threshold):
 */
  fst::Relabel(__pyx_v_self->fst, __pyx_v_ip, __pyx_v_op);

  /* "openpyfst.pyx":697
 *         raise TypeError('Cannot convert label "{0}" to symbol'.format(label))
 * 
 *     def relabel(self, imap={}, omap={}):             # <<<<<<<<<<<<<<
 *         """fst.relabel(imap={}, omap={}): relabel the symbols on the arcs of the transducer
 *         imap/omap: (int -> int) or (str -> str) symbol mappings"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.relabel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_old);
  __Pyx_XDECREF(__pyx_v_new);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":708
 *         openfst.Relabel(self.fst, ip, op)
 * 
 *     def prune(self, threshold):             # <<<<<<<<<<<<<<
 *         """fst.prune(threshold): prune the transducer"""
 *         if not isinstance(threshold, TropicalWeight):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_96prune(PyObject *__pyx_v_self, PyObject *__pyx_v_threshold); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_95prune[] = "fst.prune(threshold): prune the transducer";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_96prune(PyObject *__pyx_v_self, PyObject *__pyx_v_threshold) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_95prune(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), ((PyObject *)__pyx_v_threshold));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_95prune(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_threshold) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("prune", 0);
  __Pyx_INCREF(__pyx_v_threshold);

  /* "openpyfst.pyx":710
 *     def prune(self, threshold):
 *         """fst.prune(threshold): prune the transducer"""
 *         if not isinstance(threshold, TropicalWeight):             # <<<<<<<<<<<<<<
 *             threshold = TropicalWeight(threshold)
 *         openfst.Prune(self.fst, (<TropicalWeight> threshold).weight[0])
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_threshold, __pyx_ptype_9openpyfst_TropicalWeight); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "openpyfst.pyx":711
 *         """fst.prune(threshold): prune the transducer"""
 *         if not isinstance(threshold, TropicalWeight):
 *             threshold = TropicalWeight(threshold)             # <<<<<<<<<<<<<<
 *         openfst.Prune(self.fst, (<TropicalWeight> threshold).weight[0])
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9openpyfst_TropicalWeight), __pyx_v_threshold); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 711, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_threshold, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "openpyfst.pyx":710
 *     def prune(self, threshold):
 *         """fst.prune(threshold): prune the transducer"""
 *         if not isinstance(threshold, TropicalWeight):             # <<<<<<<<<<<<<<
 *             threshold = TropicalWeight(threshold)
 *         openfst.Prune(self.fst, (<TropicalWeight> threshold).weight[0])
 */
  }

  /* "openpyfst.pyx":712
 *         if not isinstance(threshold, TropicalWeight):
 *             threshold = TropicalWeight(threshold)
 *         openfst.Prune(self.fst, (<TropicalWeight> threshold).weight[0])             # <<<<<<<<<<<<<<
 * 
 *     def connect(self):
 */
  fst::Prune(__pyx_v_self->fst, (((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_v_threshold)->weight[0]));

  /* "openpyfst.pyx":708
 *         openfst.Relabel(self.fst, ip, op)
 * 
 *     def prune(self, threshold):             # <<<<<<<<<<<<<<
 *         """fst.prune(threshold): prune the transducer"""
 *         if not isinstance(threshold, TropicalWeight):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.prune", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_threshold);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":714
 *         openfst.Prune(self.fst, (<TropicalWeight> threshold).weight[0])
 * 
 *     def connect(self):             # <<<<<<<<<<<<<<
 *         """fst.connect(): removes states and arcs that are not on successful paths."""
 *         openfst.Connect(self.fst)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_98connect(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_97connect[] = "fst.connect(): removes states and arcs that are not on successful paths.";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_98connect(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("connect (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_97connect(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_97connect(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("connect", 0);

  /* "openpyfst.pyx":716
 *     def connect(self):
 *         """fst.connect(): removes states and arcs that are not on successful paths."""
 *         openfst.Connect(self.fst)             # <<<<<<<<<<<<<<
 * 
 *     def plus_map(self, value):
 */
  fst::Connect(__pyx_v_self->fst);

  /* "openpyfst.pyx":714
 *         openfst.Prune(self.fst, (<TropicalWeight> threshold).weight[0])
 * 
 *     def connect(self):             # <<<<<<<<<<<<<<
 *         """fst.connect(): removes states and arcs that are not on successful paths."""
 *         openfst.Connect(self.fst)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":718
 *         openfst.Connect(self.fst)
 * 
 *     def plus_map(self, value):             # <<<<<<<<<<<<<<
 *         """fst.plus_map(value) -> transducer with weights equal to the original weights
 *         plus the given value"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_100plus_map(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_99plus_map[] = "fst.plus_map(value) -> transducer with weights equal to the original weights\n        plus the given value";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_100plus_map(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("plus_map (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_99plus_map(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_99plus_map(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_value) {
  struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("plus_map", 0);
  __Pyx_INCREF(__pyx_v_value);

  /* "openpyfst.pyx":721
 *         """fst.plus_map(value) -> transducer with weights equal to the original weights
 *         plus the given value"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)             # <<<<<<<<<<<<<<
 *         if not isinstance(value, TropicalWeight):
 *             value = TropicalWeight(value)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_isyms, ((PyObject *)__pyx_v_self->isyms)) < 0) __PYX_ERR(0, 721, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_osyms, ((PyObject *)__pyx_v_self->osyms)) < 0) __PYX_ERR(0, 721, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9openpyfst_StdVectorFst), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "openpyfst.pyx":722
 *         plus the given value"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         if not isinstance(value, TropicalWeight):             # <<<<<<<<<<<<<<
 *             value = TropicalWeight(value)
 *         openfst.ArcMap(self.fst[0], result.fst,
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_9openpyfst_TropicalWeight); 
  __pyx_t_4 = ((!(__pyx_t_3 != 0)) != 0);
  if (__pyx_t_4) {

    /* "openpyfst.pyx":723
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         if not isinstance(value, TropicalWeight):
 *             value = TropicalWeight(value)             # <<<<<<<<<<<<<<
 *         openfst.ArcMap(self.fst[0], result.fst,
 *             openfst.PlusStdArcMapper((<TropicalWeight> value).weight[0]))
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9openpyfst_TropicalWeight), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "openpyfst.pyx":722
 *         plus the given value"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         if not isinstance(value, TropicalWeight):             # <<<<<<<<<<<<<<
 *             value = TropicalWeight(value)
 *         openfst.ArcMap(self.fst[0], result.fst,
 */
  }

  /* "openpyfst.pyx":724
 *         if not isinstance(value, TropicalWeight):
 *             value = TropicalWeight(value)
 *         openfst.ArcMap(self.fst[0], result.fst,             # <<<<<<<<<<<<<<
 *             openfst.PlusStdArcMapper((<TropicalWeight> value).weight[0]))
 *         return result
 */
  fst::ArcMap((__pyx_v_self->fst[0]), __pyx_v_result->fst, fst::PlusMapper<fst::StdArc>((((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_v_value)->weight[0])));

  /* "openpyfst.pyx":726
 *         openfst.ArcMap(self.fst[0], result.fst,
 *             openfst.PlusStdArcMapper((<TropicalWeight> value).weight[0]))
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def times_map(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "openpyfst.pyx":718
 *         openfst.Connect(self.fst)
 * 
 *     def plus_map(self, value):             # <<<<<<<<<<<<<<
 *         """fst.plus_map(value) -> transducer with weights equal to the original weights
 *         plus the given value"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.plus_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":728
 *         return result
 * 
 *     def times_map(self, value):             # <<<<<<<<<<<<<<
 *         """fst.times_map(value) -> transducer with weights equal to the original weights
 *         times the given value"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_102times_map(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_101times_map[] = "fst.times_map(value) -> transducer with weights equal to the original weights\n        times the given value";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_102times_map(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("times_map (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_101times_map(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_101times_map(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_value) {
  struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("times_map", 0);
  __Pyx_INCREF(__pyx_v_value);

  /* "openpyfst.pyx":731
 *         """fst.times_map(value) -> transducer with weights equal to the original weights
 *         times the given value"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)             # <<<<<<<<<<<<<<
 *         if not isinstance(value, TropicalWeight):
 *             value = TropicalWeight(value)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_isyms, ((PyObject *)__pyx_v_self->isyms)) < 0) __PYX_ERR(0, 731, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_osyms, ((PyObject *)__pyx_v_self->osyms)) < 0) __PYX_ERR(0, 731, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9openpyfst_StdVectorFst), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "openpyfst.pyx":732
 *         times the given value"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         if not isinstance(value, TropicalWeight):             # <<<<<<<<<<<<<<
 *             value = TropicalWeight(value)
 *         openfst.ArcMap(self.fst[0], result.fst,
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_9openpyfst_TropicalWeight); 
  __pyx_t_4 = ((!(__pyx_t_3 != 0)) != 0);
  if (__pyx_t_4) {

    /* "openpyfst.pyx":733
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         if not isinstance(value, TropicalWeight):
 *             value = TropicalWeight(value)             # <<<<<<<<<<<<<<
 *         openfst.ArcMap(self.fst[0], result.fst,
 *             openfst.TimesStdArcMapper((<TropicalWeight> value).weight[0]))
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9openpyfst_TropicalWeight), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "openpyfst.pyx":732
 *         times the given value"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         if not isinstance(value, TropicalWeight):             # <<<<<<<<<<<<<<
 *             value = TropicalWeight(value)
 *         openfst.ArcMap(self.fst[0], result.fst,
 */
  }

  /* "openpyfst.pyx":734
 *         if not isinstance(value, TropicalWeight):
 *             value = TropicalWeight(value)
 *         openfst.ArcMap(self.fst[0], result.fst,             # <<<<<<<<<<<<<<
 *             openfst.TimesStdArcMapper((<TropicalWeight> value).weight[0]))
 *         return result
 */
  fst::ArcMap((__pyx_v_self->fst[0]), __pyx_v_result->fst, fst::TimesMapper<fst::StdArc>((((struct __pyx_obj_9openpyfst_TropicalWeight *)__pyx_v_value)->weight[0])));

  /* "openpyfst.pyx":736
 *         openfst.ArcMap(self.fst[0], result.fst,
 *             openfst.TimesStdArcMapper((<TropicalWeight> value).weight[0]))
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def remove_weights(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "openpyfst.pyx":728
 *         return result
 * 
 *     def times_map(self, value):             # <<<<<<<<<<<<<<
 *         """fst.times_map(value) -> transducer with weights equal to the original weights
 *         times the given value"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.times_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":738
 *         return result
 * 
 *     def remove_weights(self):             # <<<<<<<<<<<<<<
 *         """fst.remove_weights() -> transducer with weights removed"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_104remove_weights(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_103remove_weights[] = "fst.remove_weights() -> transducer with weights removed";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_104remove_weights(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_weights (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_103remove_weights(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_103remove_weights(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("remove_weights", 0);

  /* "openpyfst.pyx":740
 *     def remove_weights(self):
 *         """fst.remove_weights() -> transducer with weights removed"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)             # <<<<<<<<<<<<<<
 *         openfst.ArcMap(self.fst[0], result.fst, openfst.RmTropicalWeightMapper())
 *         return result
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_isyms, ((PyObject *)__pyx_v_self->isyms)) < 0) __PYX_ERR(0, 740, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_osyms, ((PyObject *)__pyx_v_self->osyms)) < 0) __PYX_ERR(0, 740, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9openpyfst_StdVectorFst), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "openpyfst.pyx":741
 *         """fst.remove_weights() -> transducer with weights removed"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         openfst.ArcMap(self.fst[0], result.fst, openfst.RmTropicalWeightMapper())             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  fst::ArcMap((__pyx_v_self->fst[0]), __pyx_v_result->fst, fst::RmWeightMapper<fst::StdArc>());

  /* "openpyfst.pyx":742
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         openfst.ArcMap(self.fst[0], result.fst, openfst.RmTropicalWeightMapper())
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def invert_weights(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "openpyfst.pyx":738
 *         return result
 * 
 *     def remove_weights(self):             # <<<<<<<<<<<<<<
 *         """fst.remove_weights() -> transducer with weights removed"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.remove_weights", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":744
 *         return result
 * 
 *     def invert_weights(self):             # <<<<<<<<<<<<<<
 *         """fst.invert_weights() -> transducer with inverted weights"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_106invert_weights(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_105invert_weights[] = "fst.invert_weights() -> transducer with inverted weights";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_106invert_weights(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("invert_weights (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_105invert_weights(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_105invert_weights(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("invert_weights", 0);

  /* "openpyfst.pyx":746
 *     def invert_weights(self):
 *         """fst.invert_weights() -> transducer with inverted weights"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)             # <<<<<<<<<<<<<<
 *         openfst.ArcMap(self.fst[0], result.fst, openfst.InvertTropicalWeightMapper())
 *         return result
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_isyms, ((PyObject *)__pyx_v_self->isyms)) < 0) __PYX_ERR(0, 746, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_osyms, ((PyObject *)__pyx_v_self->osyms)) < 0) __PYX_ERR(0, 746, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9openpyfst_StdVectorFst), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "openpyfst.pyx":747
 *         """fst.invert_weights() -> transducer with inverted weights"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         openfst.ArcMap(self.fst[0], result.fst, openfst.InvertTropicalWeightMapper())             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  fst::ArcMap((__pyx_v_self->fst[0]), __pyx_v_result->fst, fst::InvertWeightMapper<fst::StdArc>());

  /* "openpyfst.pyx":748
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         openfst.ArcMap(self.fst[0], result.fst, openfst.InvertTropicalWeightMapper())
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def replace(self, label_fst_map, epsilon=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "openpyfst.pyx":744
 *         return result
 * 
 *     def invert_weights(self):             # <<<<<<<<<<<<<<
 *         """fst.invert_weights() -> transducer with inverted weights"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.invert_weights", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":750
 *         return result
 * 
 *     def replace(self, label_fst_map, epsilon=False):             # <<<<<<<<<<<<<<
 *         """fst.replace(label_fst_map, epsilon=False) -> transducer with non-terminals replaced
 *         label_fst_map: non-terminals (str) -> fst map
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_108replace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_107replace[] = "fst.replace(label_fst_map, epsilon=False) -> transducer with non-terminals replaced\n        label_fst_map: non-terminals (str) -> fst map\n        epsilon: replace input label by epsilon?";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_108replace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label_fst_map = 0;
  PyObject *__pyx_v_epsilon = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("replace (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label_fst_map,&__pyx_n_s_epsilon,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label_fst_map)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_epsilon);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "replace") < 0)) __PYX_ERR(0, 750, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label_fst_map = values[0];
    __pyx_v_epsilon = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("replace", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 750, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.StdVectorFst.replace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_107replace(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), __pyx_v_label_fst_map, __pyx_v_epsilon);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_107replace(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_label_fst_map, PyObject *__pyx_v_epsilon) {
  struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_result = 0;
  std::vector<std::pair<int,const fst::Fst<fst::StdArc>*> >  __pyx_v_label_fst_pairs;
  struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_fst = 0;
  PyObject *__pyx_v_label = NULL;
  PyObject *__pyx_v_label_id = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  std::pair<int,const fst::Fst<fst::StdArc>*>  __pyx_t_11;
  __Pyx_RefNannySetupContext("replace", 0);

  /* "openpyfst.pyx":754
 *         label_fst_map: non-terminals (str) -> fst map
 *         epsilon: replace input label by epsilon?"""
 *         assert self.osyms # used to encode labels             # <<<<<<<<<<<<<<
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         cdef vector[pair[int, openfst.ConstStdVectorFstPtr]] label_fst_pairs
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self->osyms)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 754, __pyx_L1_error)
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 754, __pyx_L1_error)
    }
  }
  #endif

  /* "openpyfst.pyx":755
 *         epsilon: replace input label by epsilon?"""
 *         assert self.osyms # used to encode labels
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, openfst.ConstStdVectorFstPtr]] label_fst_pairs
 *         cdef StdVectorFst fst
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_isyms, ((PyObject *)__pyx_v_self->isyms)) < 0) __PYX_ERR(0, 755, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_osyms, ((PyObject *)__pyx_v_self->osyms)) < 0) __PYX_ERR(0, 755, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9openpyfst_StdVectorFst), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_result = ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "openpyfst.pyx":758
 *         cdef vector[pair[int, openfst.ConstStdVectorFstPtr]] label_fst_pairs
 *         cdef StdVectorFst fst
 *         label_fst_map['__ROOT__'] = self             # <<<<<<<<<<<<<<
 *         for label, fst in label_fst_map.items():
 *             assert (not fst.osyms or fst.osyms == self.osyms) # output symbols must match
 */
  if (unlikely(PyObject_SetItem(__pyx_v_label_fst_map, __pyx_n_u_ROOT, ((PyObject *)__pyx_v_self)) < 0)) __PYX_ERR(0, 758, __pyx_L1_error)

  /* "openpyfst.pyx":759
 *         cdef StdVectorFst fst
 *         label_fst_map['__ROOT__'] = self
 *         for label, fst in label_fst_map.items():             # <<<<<<<<<<<<<<
 *             assert (not fst.osyms or fst.osyms == self.osyms) # output symbols must match
 *             label_id = self.osyms[label]
 */
  __pyx_t_4 = 0;
  if (unlikely(__pyx_v_label_fst_map == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 759, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_dict_iterator(__pyx_v_label_fst_map, 0, __pyx_n_s_items, (&__pyx_t_5), (&__pyx_t_6)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = __pyx_t_2;
  __pyx_t_2 = 0;
  while (1) {
    __pyx_t_8 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_5, &__pyx_t_4, &__pyx_t_2, &__pyx_t_7, NULL, __pyx_t_6);
    if (unlikely(__pyx_t_8 == 0)) break;
    if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 759, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_t_7);
    if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_9openpyfst_StdVectorFst))))) __PYX_ERR(0, 759, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_label, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_fst, ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_t_7));
    __pyx_t_7 = 0;

    /* "openpyfst.pyx":760
 *         label_fst_map['__ROOT__'] = self
 *         for label, fst in label_fst_map.items():
 *             assert (not fst.osyms or fst.osyms == self.osyms) # output symbols must match             # <<<<<<<<<<<<<<
 *             label_id = self.osyms[label]
 *             label_fst_pairs.push_back(pair[int, openfst.ConstStdVectorFstPtr](label_id, fst.fst))
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_9 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_fst->osyms)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 760, __pyx_L1_error)
      __pyx_t_10 = ((!__pyx_t_9) != 0);
      if (!__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L5_bool_binop_done;
      }
      __pyx_t_7 = PyObject_RichCompare(((PyObject *)__pyx_v_fst->osyms), ((PyObject *)__pyx_v_self->osyms), Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 760, __pyx_L1_error)
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 760, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_1 = __pyx_t_10;
      __pyx_L5_bool_binop_done:;
      if (unlikely(!__pyx_t_1)) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 760, __pyx_L1_error)
      }
    }
    #endif

    /* "openpyfst.pyx":761
 *         for label, fst in label_fst_map.items():
 *             assert (not fst.osyms or fst.osyms == self.osyms) # output symbols must match
 *             label_id = self.osyms[label]             # <<<<<<<<<<<<<<
 *             label_fst_pairs.push_back(pair[int, openfst.ConstStdVectorFstPtr](label_id, fst.fst))
 *         openfst.Replace(label_fst_pairs, result.fst, self.osyms['__ROOT__'], epsilon)
 */
    __pyx_t_7 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->osyms), __pyx_v_label); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_XDECREF_SET(__pyx_v_label_id, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "openpyfst.pyx":762
 *             assert (not fst.osyms or fst.osyms == self.osyms) # output symbols must match
 *             label_id = self.osyms[label]
 *             label_fst_pairs.push_back(pair[int, openfst.ConstStdVectorFstPtr](label_id, fst.fst))             # <<<<<<<<<<<<<<
 *         openfst.Replace(label_fst_pairs, result.fst, self.osyms['__ROOT__'], epsilon)
 *         return result
 */
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_label_id); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 762, __pyx_L1_error)
    try {
      __pyx_t_11 = std::pair<int,const fst::Fst<fst::StdArc>*> (__pyx_t_8, __pyx_v_fst->fst);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 762, __pyx_L1_error)
    }
    try {
      __pyx_v_label_fst_pairs.push_back(__pyx_t_11);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 762, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "openpyfst.pyx":763
 *             label_id = self.osyms[label]
 *             label_fst_pairs.push_back(pair[int, openfst.ConstStdVectorFstPtr](label_id, fst.fst))
 *         openfst.Replace(label_fst_pairs, result.fst, self.osyms['__ROOT__'], epsilon)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->osyms), __pyx_n_u_ROOT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_epsilon); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 763, __pyx_L1_error)
  fst::Replace(__pyx_v_label_fst_pairs, __pyx_v_result->fst, __pyx_t_6, __pyx_t_1);

  /* "openpyfst.pyx":764
 *             label_fst_pairs.push_back(pair[int, openfst.ConstStdVectorFstPtr](label_id, fst.fst))
 *         openfst.Replace(label_fst_pairs, result.fst, self.osyms['__ROOT__'], epsilon)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def random_generate(self, n_path=1, max_len=None, uniform=True, weighted=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "openpyfst.pyx":750
 *         return result
 * 
 *     def replace(self, label_fst_map, epsilon=False):             # <<<<<<<<<<<<<<
 *         """fst.replace(label_fst_map, epsilon=False) -> transducer with non-terminals replaced
 *         label_fst_map: non-terminals (str) -> fst map
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.replace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF((PyObject *)__pyx_v_fst);
  __Pyx_XDECREF(__pyx_v_label);
  __Pyx_XDECREF(__pyx_v_label_id);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":766
 *         return result
 * 
 *     def random_generate(self, n_path=1, max_len=None, uniform=True, weighted=False):             # <<<<<<<<<<<<<<
 *         if uniform:
 *             return self.uniform_generate(n_path, max_len, weighted)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_110random_generate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_110random_generate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_n_path = 0;
  PyObject *__pyx_v_max_len = 0;
  PyObject *__pyx_v_uniform = 0;
  PyObject *__pyx_v_weighted = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("random_generate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n_path,&__pyx_n_s_max_len,&__pyx_n_s_uniform,&__pyx_n_s_weighted,0};
    PyObject* values[4] = {0,0,0,0};
    values[0] = ((PyObject *)__pyx_int_1);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_True);
    values[3] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_path);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_len);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uniform);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weighted);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "random_generate") < 0)) __PYX_ERR(0, 766, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_n_path = values[0];
    __pyx_v_max_len = values[1];
    __pyx_v_uniform = values[2];
    __pyx_v_weighted = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("random_generate", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 766, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.StdVectorFst.random_generate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_109random_generate(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), __pyx_v_n_path, __pyx_v_max_len, __pyx_v_uniform, __pyx_v_weighted);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_109random_generate(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_n_path, PyObject *__pyx_v_max_len, PyObject *__pyx_v_uniform, PyObject *__pyx_v_weighted) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("random_generate", 0);

  /* "openpyfst.pyx":767
 * 
 *     def random_generate(self, n_path=1, max_len=None, uniform=True, weighted=False):
 *         if uniform:             # <<<<<<<<<<<<<<
 *             return self.uniform_generate(n_path, max_len, weighted)
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_uniform); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 767, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "openpyfst.pyx":768
 *     def random_generate(self, n_path=1, max_len=None, uniform=True, weighted=False):
 *         if uniform:
 *             return self.uniform_generate(n_path, max_len, weighted)             # <<<<<<<<<<<<<<
 *         else:
 *             return self.logprob_generate(n_path, max_len, weighted)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_uniform_generate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_n_path, __pyx_v_max_len, __pyx_v_weighted};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 768, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_n_path, __pyx_v_max_len, __pyx_v_weighted};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 768, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 768, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_n_path);
      __Pyx_GIVEREF(__pyx_v_n_path);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_n_path);
      __Pyx_INCREF(__pyx_v_max_len);
      __Pyx_GIVEREF(__pyx_v_max_len);
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_max_len);
      __Pyx_INCREF(__pyx_v_weighted);
      __Pyx_GIVEREF(__pyx_v_weighted);
      PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_weighted);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 768, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "openpyfst.pyx":767
 * 
 *     def random_generate(self, n_path=1, max_len=None, uniform=True, weighted=False):
 *         if uniform:             # <<<<<<<<<<<<<<
 *             return self.uniform_generate(n_path, max_len, weighted)
 *         else:
 */
  }

  /* "openpyfst.pyx":770
 *             return self.uniform_generate(n_path, max_len, weighted)
 *         else:
 *             return self.logprob_generate(n_path, max_len, weighted)             # <<<<<<<<<<<<<<
 * 
 *     def logprob_generate(self, n_path=1, max_len=None, weighted=False):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logprob_generate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_n_path, __pyx_v_max_len, __pyx_v_weighted};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 770, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_n_path, __pyx_v_max_len, __pyx_v_weighted};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 770, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 770, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_INCREF(__pyx_v_n_path);
      __Pyx_GIVEREF(__pyx_v_n_path);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_5, __pyx_v_n_path);
      __Pyx_INCREF(__pyx_v_max_len);
      __Pyx_GIVEREF(__pyx_v_max_len);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_5, __pyx_v_max_len);
      __Pyx_INCREF(__pyx_v_weighted);
      __Pyx_GIVEREF(__pyx_v_weighted);
      PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_5, __pyx_v_weighted);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 770, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "openpyfst.pyx":766
 *         return result
 * 
 *     def random_generate(self, n_path=1, max_len=None, uniform=True, weighted=False):             # <<<<<<<<<<<<<<
 *         if uniform:
 *             return self.uniform_generate(n_path, max_len, weighted)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.random_generate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":772
 *             return self.logprob_generate(n_path, max_len, weighted)
 * 
 *     def logprob_generate(self, n_path=1, max_len=None, weighted=False):             # <<<<<<<<<<<<<<
 *         """fst.logprob_generate(n_path=1) -> n_path random paths
 *         sampled according to weights assumed to encode log probabilities"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_112logprob_generate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_111logprob_generate[] = "fst.logprob_generate(n_path=1) -> n_path random paths\n        sampled according to weights assumed to encode log probabilities";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_112logprob_generate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_n_path = 0;
  PyObject *__pyx_v_max_len = 0;
  PyObject *__pyx_v_weighted = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("logprob_generate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n_path,&__pyx_n_s_max_len,&__pyx_n_s_weighted,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)__pyx_int_1);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_path);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_len);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weighted);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "logprob_generate") < 0)) __PYX_ERR(0, 772, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_n_path = values[0];
    __pyx_v_max_len = values[1];
    __pyx_v_weighted = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("logprob_generate", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 772, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.StdVectorFst.logprob_generate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_111logprob_generate(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), __pyx_v_n_path, __pyx_v_max_len, __pyx_v_weighted);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_111logprob_generate(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_n_path, PyObject *__pyx_v_max_len, PyObject *__pyx_v_weighted) {
  struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_result = 0;
  int __pyx_v_seed;
  fst::LogProbArcSelector<fst::StdArc> *__pyx_v_selector;
  int __pyx_v_maxlen;
  fst::RandGenOptions< fst::LogProbArcSelector<fst::StdArc> > *__pyx_v_options;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("logprob_generate", 0);

  /* "openpyfst.pyx":775
 *         """fst.logprob_generate(n_path=1) -> n_path random paths
 *         sampled according to weights assumed to encode log probabilities"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)             # <<<<<<<<<<<<<<
 *         cdef int seed = random.randint(0, INT_MAX)
 *         cdef openfst.LogProbStdArcSelector* selector = new openfst.LogProbStdArcSelector(seed)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_isyms, ((PyObject *)__pyx_v_self->isyms)) < 0) __PYX_ERR(0, 775, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_osyms, ((PyObject *)__pyx_v_self->osyms)) < 0) __PYX_ERR(0, 775, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9openpyfst_StdVectorFst), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "openpyfst.pyx":776
 *         sampled according to weights assumed to encode log probabilities"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         cdef int seed = random.randint(0, INT_MAX)             # <<<<<<<<<<<<<<
 *         cdef openfst.LogProbStdArcSelector* selector = new openfst.LogProbStdArcSelector(seed)
 *         cdef int maxlen = (INT_MAX if max_len is None else max_len)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_random); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_randint); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(INT_MAX); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_int_0, __pyx_t_1};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_int_0, __pyx_t_1};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_seed = __pyx_t_5;

  /* "openpyfst.pyx":777
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         cdef int seed = random.randint(0, INT_MAX)
 *         cdef openfst.LogProbStdArcSelector* selector = new openfst.LogProbStdArcSelector(seed)             # <<<<<<<<<<<<<<
 *         cdef int maxlen = (INT_MAX if max_len is None else max_len)
 *         cdef openfst.LogProbStdArcRandGenOptions* options = new openfst.LogProbStdArcRandGenOptions(selector[0], maxlen, n_path, weighted)
 */
  __pyx_v_selector = new fst::LogProbArcSelector<fst::StdArc>(__pyx_v_seed);

  /* "openpyfst.pyx":778
 *         cdef int seed = random.randint(0, INT_MAX)
 *         cdef openfst.LogProbStdArcSelector* selector = new openfst.LogProbStdArcSelector(seed)
 *         cdef int maxlen = (INT_MAX if max_len is None else max_len)             # <<<<<<<<<<<<<<
 *         cdef openfst.LogProbStdArcRandGenOptions* options = new openfst.LogProbStdArcRandGenOptions(selector[0], maxlen, n_path, weighted)
 *         openfst.RandGen(self.fst[0], result.fst, options[0])
 */
  __pyx_t_7 = (__pyx_v_max_len == Py_None);
  if ((__pyx_t_7 != 0)) {
    __pyx_t_5 = INT_MAX;
  } else {
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_max_len); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 778, __pyx_L1_error)
    __pyx_t_5 = __pyx_t_8;
  }
  __pyx_v_maxlen = __pyx_t_5;

  /* "openpyfst.pyx":779
 *         cdef openfst.LogProbStdArcSelector* selector = new openfst.LogProbStdArcSelector(seed)
 *         cdef int maxlen = (INT_MAX if max_len is None else max_len)
 *         cdef openfst.LogProbStdArcRandGenOptions* options = new openfst.LogProbStdArcRandGenOptions(selector[0], maxlen, n_path, weighted)             # <<<<<<<<<<<<<<
 *         openfst.RandGen(self.fst[0], result.fst, options[0])
 *         del options, selector
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_n_path); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 779, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_weighted); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 779, __pyx_L1_error)
  __pyx_v_options = new fst::RandGenOptions< fst::LogProbArcSelector<fst::StdArc> >((__pyx_v_selector[0]), __pyx_v_maxlen, __pyx_t_5, __pyx_t_7);

  /* "openpyfst.pyx":780
 *         cdef int maxlen = (INT_MAX if max_len is None else max_len)
 *         cdef openfst.LogProbStdArcRandGenOptions* options = new openfst.LogProbStdArcRandGenOptions(selector[0], maxlen, n_path, weighted)
 *         openfst.RandGen(self.fst[0], result.fst, options[0])             # <<<<<<<<<<<<<<
 *         del options, selector
 *         return result
 */
  fst::RandGen((__pyx_v_self->fst[0]), __pyx_v_result->fst, (__pyx_v_options[0]));

  /* "openpyfst.pyx":781
 *         cdef openfst.LogProbStdArcRandGenOptions* options = new openfst.LogProbStdArcRandGenOptions(selector[0], maxlen, n_path, weighted)
 *         openfst.RandGen(self.fst[0], result.fst, options[0])
 *         del options, selector             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  delete __pyx_v_options;
  delete __pyx_v_selector;

  /* "openpyfst.pyx":782
 *         openfst.RandGen(self.fst[0], result.fst, options[0])
 *         del options, selector
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def uniform_generate(self, n_path=1, max_len=None, weighted=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "openpyfst.pyx":772
 *             return self.logprob_generate(n_path, max_len, weighted)
 * 
 *     def logprob_generate(self, n_path=1, max_len=None, weighted=False):             # <<<<<<<<<<<<<<
 *         """fst.logprob_generate(n_path=1) -> n_path random paths
 *         sampled according to weights assumed to encode log probabilities"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.logprob_generate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":784
 *         return result
 * 
 *     def uniform_generate(self, n_path=1, max_len=None, weighted=False):             # <<<<<<<<<<<<<<
 *         """fst.uniform_generate(n_path=1) -> n_path random paths sampled uniformly"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_114uniform_generate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_113uniform_generate[] = "fst.uniform_generate(n_path=1) -> n_path random paths sampled uniformly";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_114uniform_generate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_n_path = 0;
  PyObject *__pyx_v_max_len = 0;
  PyObject *__pyx_v_weighted = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("uniform_generate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n_path,&__pyx_n_s_max_len,&__pyx_n_s_weighted,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)__pyx_int_1);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_path);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_len);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weighted);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "uniform_generate") < 0)) __PYX_ERR(0, 784, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_n_path = values[0];
    __pyx_v_max_len = values[1];
    __pyx_v_weighted = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("uniform_generate", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 784, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.StdVectorFst.uniform_generate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_113uniform_generate(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), __pyx_v_n_path, __pyx_v_max_len, __pyx_v_weighted);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_113uniform_generate(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_n_path, PyObject *__pyx_v_max_len, PyObject *__pyx_v_weighted) {
  struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_result = 0;
  int __pyx_v_seed;
  fst::UniformArcSelector<fst::StdArc> *__pyx_v_selector;
  int __pyx_v_maxlen;
  fst::RandGenOptions< fst::UniformArcSelector<fst::StdArc> > *__pyx_v_options;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("uniform_generate", 0);

  /* "openpyfst.pyx":786
 *     def uniform_generate(self, n_path=1, max_len=None, weighted=False):
 *         """fst.uniform_generate(n_path=1) -> n_path random paths sampled uniformly"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)             # <<<<<<<<<<<<<<
 *         cdef int seed = random.randint(0, INT_MAX)
 *         cdef openfst.UniformStdArcSelector* selector = new openfst.UniformStdArcSelector(seed)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_isyms, ((PyObject *)__pyx_v_self->isyms)) < 0) __PYX_ERR(0, 786, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_osyms, ((PyObject *)__pyx_v_self->osyms)) < 0) __PYX_ERR(0, 786, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9openpyfst_StdVectorFst), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = ((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "openpyfst.pyx":787
 *         """fst.uniform_generate(n_path=1) -> n_path random paths sampled uniformly"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         cdef int seed = random.randint(0, INT_MAX)             # <<<<<<<<<<<<<<
 *         cdef openfst.UniformStdArcSelector* selector = new openfst.UniformStdArcSelector(seed)
 *         cdef int maxlen = (INT_MAX if max_len is None else max_len)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_random); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_randint); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(INT_MAX); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_int_0, __pyx_t_1};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_int_0, __pyx_t_1};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_seed = __pyx_t_5;

  /* "openpyfst.pyx":788
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         cdef int seed = random.randint(0, INT_MAX)
 *         cdef openfst.UniformStdArcSelector* selector = new openfst.UniformStdArcSelector(seed)             # <<<<<<<<<<<<<<
 *         cdef int maxlen = (INT_MAX if max_len is None else max_len)
 *         cdef openfst.UniformStdArcRandGenOptions* options = new openfst.UniformStdArcRandGenOptions(selector[0], maxlen, n_path, weighted)
 */
  __pyx_v_selector = new fst::UniformArcSelector<fst::StdArc>(__pyx_v_seed);

  /* "openpyfst.pyx":789
 *         cdef int seed = random.randint(0, INT_MAX)
 *         cdef openfst.UniformStdArcSelector* selector = new openfst.UniformStdArcSelector(seed)
 *         cdef int maxlen = (INT_MAX if max_len is None else max_len)             # <<<<<<<<<<<<<<
 *         cdef openfst.UniformStdArcRandGenOptions* options = new openfst.UniformStdArcRandGenOptions(selector[0], maxlen, n_path, weighted)
 *         openfst.RandGen(self.fst[0], result.fst, options[0])
 */
  __pyx_t_7 = (__pyx_v_max_len == Py_None);
  if ((__pyx_t_7 != 0)) {
    __pyx_t_5 = INT_MAX;
  } else {
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_max_len); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 789, __pyx_L1_error)
    __pyx_t_5 = __pyx_t_8;
  }
  __pyx_v_maxlen = __pyx_t_5;

  /* "openpyfst.pyx":790
 *         cdef openfst.UniformStdArcSelector* selector = new openfst.UniformStdArcSelector(seed)
 *         cdef int maxlen = (INT_MAX if max_len is None else max_len)
 *         cdef openfst.UniformStdArcRandGenOptions* options = new openfst.UniformStdArcRandGenOptions(selector[0], maxlen, n_path, weighted)             # <<<<<<<<<<<<<<
 *         openfst.RandGen(self.fst[0], result.fst, options[0])
 *         del options, selector
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_n_path); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 790, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_weighted); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 790, __pyx_L1_error)
  __pyx_v_options = new fst::RandGenOptions< fst::UniformArcSelector<fst::StdArc> >((__pyx_v_selector[0]), __pyx_v_maxlen, __pyx_t_5, __pyx_t_7);

  /* "openpyfst.pyx":791
 *         cdef int maxlen = (INT_MAX if max_len is None else max_len)
 *         cdef openfst.UniformStdArcRandGenOptions* options = new openfst.UniformStdArcRandGenOptions(selector[0], maxlen, n_path, weighted)
 *         openfst.RandGen(self.fst[0], result.fst, options[0])             # <<<<<<<<<<<<<<
 *         del options, selector
 *         return result
 */
  fst::RandGen((__pyx_v_self->fst[0]), __pyx_v_result->fst, (__pyx_v_options[0]));

  /* "openpyfst.pyx":792
 *         cdef openfst.UniformStdArcRandGenOptions* options = new openfst.UniformStdArcRandGenOptions(selector[0], maxlen, n_path, weighted)
 *         openfst.RandGen(self.fst[0], result.fst, options[0])
 *         del options, selector             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  delete __pyx_v_options;
  delete __pyx_v_selector;

  /* "openpyfst.pyx":793
 *         openfst.RandGen(self.fst[0], result.fst, options[0])
 *         del options, selector
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def _visit(self, int stateid, prefix=()):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "openpyfst.pyx":784
 *         return result
 * 
 *     def uniform_generate(self, n_path=1, max_len=None, weighted=False):             # <<<<<<<<<<<<<<
 *         """fst.uniform_generate(n_path=1) -> n_path random paths sampled uniformly"""
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.uniform_generate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9openpyfst_12StdVectorFst_117generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "openpyfst.pyx":795
 *         return result
 * 
 *     def _visit(self, int stateid, prefix=()):             # <<<<<<<<<<<<<<
 *         """fst._visit(stateid, prefix): depth-first search"""
 *         if self[stateid].final:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_116_visit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_115_visit[] = "fst._visit(stateid, prefix): depth-first search";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_116_visit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_stateid;
  PyObject *__pyx_v_prefix = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_visit (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_stateid,&__pyx_n_s_prefix,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_empty_tuple);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stateid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prefix);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_visit") < 0)) __PYX_ERR(0, 795, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_stateid = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_stateid == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 795, __pyx_L3_error)
    __pyx_v_prefix = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_visit", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 795, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.StdVectorFst._visit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_115_visit(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), __pyx_v_stateid, __pyx_v_prefix);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_115_visit(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, int __pyx_v_stateid, PyObject *__pyx_v_prefix) {
  struct __pyx_obj_9openpyfst___pyx_scope_struct_5__visit *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_visit", 0);
  __pyx_cur_scope = (struct __pyx_obj_9openpyfst___pyx_scope_struct_5__visit *)__pyx_tp_new_9openpyfst___pyx_scope_struct_5__visit(__pyx_ptype_9openpyfst___pyx_scope_struct_5__visit, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9openpyfst___pyx_scope_struct_5__visit *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 795, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_stateid = __pyx_v_stateid;
  __pyx_cur_scope->__pyx_v_prefix = __pyx_v_prefix;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_prefix);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_prefix);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9openpyfst_12StdVectorFst_117generator3, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_visit, __pyx_n_s_StdVectorFst__visit, __pyx_n_s_openpyfst); if (unlikely(!gen)) __PYX_ERR(0, 795, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("openpyfst.StdVectorFst._visit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9openpyfst_12StdVectorFst_117generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9openpyfst___pyx_scope_struct_5__visit *__pyx_cur_scope = ((struct __pyx_obj_9openpyfst___pyx_scope_struct_5__visit *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_visit", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L5_resume_from_yield;
    case 2: goto __pyx_L10_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 795, __pyx_L1_error)

  /* "openpyfst.pyx":797
 *     def _visit(self, int stateid, prefix=()):
 *         """fst._visit(stateid, prefix): depth-first search"""
 *         if self[stateid].final:             # <<<<<<<<<<<<<<
 *             yield prefix
 *         for arc in self[stateid]:
 */
  __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_cur_scope->__pyx_v_stateid, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_final); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "openpyfst.pyx":798
 *         """fst._visit(stateid, prefix): depth-first search"""
 *         if self[stateid].final:
 *             yield prefix             # <<<<<<<<<<<<<<
 *         for arc in self[stateid]:
 *             for path in self._visit(arc.nextstate, prefix+(arc,)):
 */
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_prefix);
    __pyx_r = __pyx_cur_scope->__pyx_v_prefix;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L5_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 798, __pyx_L1_error)

    /* "openpyfst.pyx":797
 *     def _visit(self, int stateid, prefix=()):
 *         """fst._visit(stateid, prefix): depth-first search"""
 *         if self[stateid].final:             # <<<<<<<<<<<<<<
 *             yield prefix
 *         for arc in self[stateid]:
 */
  }

  /* "openpyfst.pyx":799
 *         if self[stateid].final:
 *             yield prefix
 *         for arc in self[stateid]:             # <<<<<<<<<<<<<<
 *             for path in self._visit(arc.nextstate, prefix+(arc,)):
 *                 yield path
 */
  __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_cur_scope->__pyx_v_stateid, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 799, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 799, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 799, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 799, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 799, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 799, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_arc);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_arc, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;

    /* "openpyfst.pyx":800
 *             yield prefix
 *         for arc in self[stateid]:
 *             for path in self._visit(arc.nextstate, prefix+(arc,)):             # <<<<<<<<<<<<<<
 *                 yield path
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_visit); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 800, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_arc, __pyx_n_s_nextstate); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 800, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 800, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_arc);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_arc);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_cur_scope->__pyx_v_arc);
    __pyx_t_9 = PyNumber_Add(__pyx_cur_scope->__pyx_v_prefix, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 800, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_7, __pyx_t_9};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 800, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_7, __pyx_t_9};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 800, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    {
      __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 800, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_t_9);
      __pyx_t_7 = 0;
      __pyx_t_9 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 800, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_6 = __pyx_t_2; __Pyx_INCREF(__pyx_t_6); __pyx_t_12 = 0;
      __pyx_t_13 = NULL;
    } else {
      __pyx_t_12 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 800, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_13 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 800, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_13)) {
        if (likely(PyList_CheckExact(__pyx_t_6))) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_12); __Pyx_INCREF(__pyx_t_2); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 800, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_6, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 800, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_12); __Pyx_INCREF(__pyx_t_2); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 800, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_6, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 800, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_13(__pyx_t_6);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 800, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_path);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_path, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "openpyfst.pyx":801
 *         for arc in self[stateid]:
 *             for path in self._visit(arc.nextstate, prefix+(arc,)):
 *                 yield path             # <<<<<<<<<<<<<<
 * 
 *     def paths(self):
 */
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_path);
      __pyx_r = __pyx_cur_scope->__pyx_v_path;
      __Pyx_XGIVEREF(__pyx_t_1);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
      __Pyx_XGIVEREF(__pyx_t_6);
      __pyx_cur_scope->__pyx_t_3 = __pyx_t_6;
      __pyx_cur_scope->__pyx_t_4 = __pyx_t_12;
      __pyx_cur_scope->__pyx_t_5 = __pyx_t_13;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 2;
      return __pyx_r;
      __pyx_L10_resume_from_yield:;
      __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_1);
      __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
      __pyx_t_6 = __pyx_cur_scope->__pyx_t_3;
      __pyx_cur_scope->__pyx_t_3 = 0;
      __Pyx_XGOTREF(__pyx_t_6);
      __pyx_t_12 = __pyx_cur_scope->__pyx_t_4;
      __pyx_t_13 = __pyx_cur_scope->__pyx_t_5;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 801, __pyx_L1_error)

      /* "openpyfst.pyx":800
 *             yield prefix
 *         for arc in self[stateid]:
 *             for path in self._visit(arc.nextstate, prefix+(arc,)):             # <<<<<<<<<<<<<<
 *                 yield path
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "openpyfst.pyx":799
 *         if self[stateid].final:
 *             yield prefix
 *         for arc in self[stateid]:             # <<<<<<<<<<<<<<
 *             for path in self._visit(arc.nextstate, prefix+(arc,)):
 *                 yield path
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "openpyfst.pyx":795
 *         return result
 * 
 *     def _visit(self, int stateid, prefix=()):             # <<<<<<<<<<<<<<
 *         """fst._visit(stateid, prefix): depth-first search"""
 *         if self[stateid].final:
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("_visit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":803
 *                 yield path
 * 
 *     def paths(self):             # <<<<<<<<<<<<<<
 *         """fst.paths() -> iterator over all the paths in the transducer"""
 *         return self._visit(self.start)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_119paths(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9openpyfst_12StdVectorFst_118paths[] = "fst.paths() -> iterator over all the paths in the transducer";
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_119paths(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("paths (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_118paths(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_118paths(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("paths", 0);

  /* "openpyfst.pyx":805
 *     def paths(self):
 *         """fst.paths() -> iterator over all the paths in the transducer"""
 *         return self._visit(self.start)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_visit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_start); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "openpyfst.pyx":803
 *                 yield path
 * 
 *     def paths(self):             # <<<<<<<<<<<<<<
 *         """fst.paths() -> iterator over all the paths in the transducer"""
 *         return self._visit(self.start)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "openpyfst.pyx":342
 * cdef class StdVectorFst(_Fst):
 *     cdef openfst.StdVectorFst* fst
 *     cdef public SymbolTable isyms, osyms             # <<<<<<<<<<<<<<
 *     SEMIRING = TropicalWeight
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_5isyms_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_5isyms_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_5isyms___get__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_5isyms___get__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->isyms));
  __pyx_r = ((PyObject *)__pyx_v_self->isyms);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9openpyfst_12StdVectorFst_5isyms_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9openpyfst_12StdVectorFst_5isyms_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_5isyms_2__set__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9openpyfst_12StdVectorFst_5isyms_2__set__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_9openpyfst_SymbolTable))))) __PYX_ERR(0, 342, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->isyms);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->isyms));
  __pyx_v_self->isyms = ((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.isyms.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9openpyfst_12StdVectorFst_5isyms_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9openpyfst_12StdVectorFst_5isyms_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_5isyms_4__del__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9openpyfst_12StdVectorFst_5isyms_4__del__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->isyms);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->isyms));
  __pyx_v_self->isyms = ((struct __pyx_obj_9openpyfst_SymbolTable *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_5osyms_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_5osyms_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_5osyms___get__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_5osyms___get__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->osyms));
  __pyx_r = ((PyObject *)__pyx_v_self->osyms);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9openpyfst_12StdVectorFst_5osyms_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_9openpyfst_12StdVectorFst_5osyms_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_5osyms_2__set__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9openpyfst_12StdVectorFst_5osyms_2__set__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_9openpyfst_SymbolTable))))) __PYX_ERR(0, 342, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->osyms);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->osyms));
  __pyx_v_self->osyms = ((struct __pyx_obj_9openpyfst_SymbolTable *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.osyms.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_9openpyfst_12StdVectorFst_5osyms_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_9openpyfst_12StdVectorFst_5osyms_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_5osyms_4__del__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9openpyfst_12StdVectorFst_5osyms_4__del__(struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->osyms);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->osyms));
  __pyx_v_self->osyms = ((struct __pyx_obj_9openpyfst_SymbolTable *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_121__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_121__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_120__reduce_cython__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_120__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_123__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9openpyfst_12StdVectorFst_123__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9openpyfst_12StdVectorFst_122__setstate_cython__(((struct __pyx_obj_9openpyfst_StdVectorFst *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_12StdVectorFst_122__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9openpyfst_StdVectorFst *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("openpyfst.StdVectorFst.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle__Fst(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 */

/* Python wrapper */
static PyObject *__pyx_pw_9openpyfst_9__pyx_unpickle__Fst(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9openpyfst_9__pyx_unpickle__Fst = {"__pyx_unpickle__Fst", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9openpyfst_9__pyx_unpickle__Fst, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9openpyfst_9__pyx_unpickle__Fst(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle__Fst (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle__Fst", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle__Fst", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle__Fst") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle__Fst", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("openpyfst.__pyx_unpickle__Fst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9openpyfst_8__pyx_unpickle__Fst(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9openpyfst_8__pyx_unpickle__Fst(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = NULL;
  PyObject *__pyx_v___pyx_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle__Fst", 0);

  /* "(tree fragment)":2
 * def __pyx_unpickle__Fst(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xd41d8cd) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":3
 * def __pyx_unpickle__Fst(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = _Fst.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":4
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = _Fst.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 4, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 4, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 4, __pyx_L1_error)

    /* "(tree fragment)":2
 * def __pyx_unpickle__Fst(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":5
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = _Fst.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle__Fst__set_state(<_Fst> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9openpyfst__Fst), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":6
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = _Fst.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle__Fst__set_state(<_Fst> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":7
 *     __pyx_result = _Fst.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle__Fst__set_state(<_Fst> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle__Fst__set_state(_Fst __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 7, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9openpyfst___pyx_unpickle__Fst__set_state(((struct __pyx_obj_9openpyfst__Fst *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = _Fst.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle__Fst__set_state(<_Fst> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":8
 *     if __pyx_state is not None:
 *         __pyx_unpickle__Fst__set_state(<_Fst> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle__Fst__set_state(_Fst __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle__Fst(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("openpyfst.__pyx_unpickle__Fst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":9
 *         __pyx_unpickle__Fst__set_state(<_Fst> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle__Fst__set_state(_Fst __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_9openpyfst___pyx_unpickle__Fst__set_state(struct __pyx_obj_9openpyfst__Fst *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle__Fst__set_state", 0);

  /* "(tree fragment)":10
 *     return __pyx_result
 * cdef __pyx_unpickle__Fst__set_state(_Fst __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 10, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 10, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":11
 * cdef __pyx_unpickle__Fst__set_state(_Fst __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 11, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":10
 *     return __pyx_result
 * cdef __pyx_unpickle__Fst__set_state(_Fst __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":9
 *         __pyx_unpickle__Fst__set_state(<_Fst> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle__Fst__set_state(_Fst __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("openpyfst.__pyx_unpickle__Fst__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_9openpyfst_SymbolTable(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_9openpyfst_SymbolTable(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_9openpyfst_11SymbolTable_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_9openpyfst_SymbolTable(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_9openpyfst_SymbolTable(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_9openpyfst_11SymbolTable_9__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyMethodDef __pyx_methods_9openpyfst_SymbolTable[] = {
  {"copy", (PyCFunction)__pyx_pw_9openpyfst_11SymbolTable_5copy, METH_NOARGS, __pyx_doc_9openpyfst_11SymbolTable_4copy},
  {"write", (PyCFunction)__pyx_pw_9openpyfst_11SymbolTable_11write, METH_O, __pyx_doc_9openpyfst_11SymbolTable_10write},
  {"find", (PyCFunction)__pyx_pw_9openpyfst_11SymbolTable_13find, METH_O, __pyx_doc_9openpyfst_11SymbolTable_12find},
  {"items", (PyCFunction)__pyx_pw_9openpyfst_11SymbolTable_19items, METH_NOARGS, __pyx_doc_9openpyfst_11SymbolTable_18items},
  {"merge", (PyCFunction)__pyx_pw_9openpyfst_11SymbolTable_26merge, METH_O, __pyx_doc_9openpyfst_11SymbolTable_25merge},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9openpyfst_11SymbolTable_28__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9openpyfst_11SymbolTable_30__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_SymbolTable = {
  __pyx_pw_9openpyfst_11SymbolTable_17__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_9openpyfst_SymbolTable, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  __pyx_pw_9openpyfst_11SymbolTable_15__contains__, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SymbolTable = {
  __pyx_pw_9openpyfst_11SymbolTable_17__len__, /*mp_length*/
  __pyx_pw_9openpyfst_11SymbolTable_7__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_9openpyfst_SymbolTable, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_9openpyfst_SymbolTable = {
  PyVarObject_HEAD_INIT(0, 0)
  "openpyfst.SymbolTable", /*tp_name*/
  sizeof(struct __pyx_obj_9openpyfst_SymbolTable), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9openpyfst_SymbolTable, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_9openpyfst_11SymbolTable_24__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_SymbolTable, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SymbolTable, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_9openpyfst_11SymbolTable_22__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9openpyfst_SymbolTable, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9openpyfst_11SymbolTable_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9openpyfst_SymbolTable, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_9openpyfst__Fst(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_9openpyfst__Fst(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9openpyfst__Fst[] = {
  {"_repr_svg_", (PyCFunction)__pyx_pw_9openpyfst_4_Fst_3_repr_svg_, METH_NOARGS, __pyx_doc_9openpyfst_4_Fst_2_repr_svg_},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9openpyfst_4_Fst_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9openpyfst_4_Fst_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9openpyfst__Fst = {
  PyVarObject_HEAD_INIT(0, 0)
  "openpyfst._Fst", /*tp_name*/
  sizeof(struct __pyx_obj_9openpyfst__Fst), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9openpyfst__Fst, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9openpyfst__Fst, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9openpyfst_4_Fst_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9openpyfst__Fst, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_9openpyfst_TropicalWeight(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_9openpyfst_TropicalWeight(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_9openpyfst_14TropicalWeight_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9openpyfst_TropicalWeight[] = {
  {"approx_equal", (PyCFunction)__pyx_pw_9openpyfst_14TropicalWeight_13approx_equal, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9openpyfst_14TropicalWeight_23__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9openpyfst_14TropicalWeight_25__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_TropicalWeight = {
  __pyx_pw_9openpyfst_14TropicalWeight_15__add__, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pw_9openpyfst_14TropicalWeight_17__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  __pyx_pw_9openpyfst_14TropicalWeight_19__div__, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  __pyx_pw_9openpyfst_14TropicalWeight_9__bool__, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  __pyx_pw_9openpyfst_14TropicalWeight_7__int__, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  __pyx_pw_9openpyfst_14TropicalWeight_7__int__, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pw_9openpyfst_14TropicalWeight_5__float__, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_9openpyfst_TropicalWeight = {
  PyVarObject_HEAD_INIT(0, 0)
  "openpyfst.TropicalWeight", /*tp_name*/
  sizeof(struct __pyx_obj_9openpyfst_TropicalWeight), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9openpyfst_TropicalWeight, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_9openpyfst_14TropicalWeight_21__repr__, /*tp_repr*/
  &__pyx_tp_as_number_TropicalWeight, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_9openpyfst_14TropicalWeight_11__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9openpyfst_TropicalWeight, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9openpyfst_14TropicalWeight_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9openpyfst_TropicalWeight, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_9openpyfst_StdArc(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_9openpyfst_StdArc(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_9openpyfst_6StdArc_ilabel(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9openpyfst_6StdArc_6ilabel_1__get__(o);
}

static int __pyx_setprop_9openpyfst_6StdArc_ilabel(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9openpyfst_6StdArc_6ilabel_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9openpyfst_6StdArc_olabel(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9openpyfst_6StdArc_6olabel_1__get__(o);
}

static int __pyx_setprop_9openpyfst_6StdArc_olabel(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9openpyfst_6StdArc_6olabel_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9openpyfst_6StdArc_nextstate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9openpyfst_6StdArc_9nextstate_1__get__(o);
}

static int __pyx_setprop_9openpyfst_6StdArc_nextstate(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9openpyfst_6StdArc_9nextstate_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9openpyfst_6StdArc_weight(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9openpyfst_6StdArc_6weight_1__get__(o);
}

static int __pyx_setprop_9openpyfst_6StdArc_weight(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9openpyfst_6StdArc_6weight_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_9openpyfst_StdArc[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9openpyfst_6StdArc_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9openpyfst_6StdArc_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9openpyfst_StdArc[] = {
  {(char *)"ilabel", __pyx_getprop_9openpyfst_6StdArc_ilabel, __pyx_setprop_9openpyfst_6StdArc_ilabel, (char *)0, 0},
  {(char *)"olabel", __pyx_getprop_9openpyfst_6StdArc_olabel, __pyx_setprop_9openpyfst_6StdArc_olabel, (char *)0, 0},
  {(char *)"nextstate", __pyx_getprop_9openpyfst_6StdArc_nextstate, __pyx_setprop_9openpyfst_6StdArc_nextstate, (char *)0, 0},
  {(char *)"weight", __pyx_getprop_9openpyfst_6StdArc_weight, __pyx_setprop_9openpyfst_6StdArc_weight, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9openpyfst_StdArc = {
  PyVarObject_HEAD_INIT(0, 0)
  "openpyfst.StdArc", /*tp_name*/
  sizeof(struct __pyx_obj_9openpyfst_StdArc), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9openpyfst_StdArc, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_9openpyfst_6StdArc_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9openpyfst_StdArc, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9openpyfst_StdArc, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9openpyfst_6StdArc_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9openpyfst_StdArc, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_9openpyfst_StdState(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_9openpyfst_StdState(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_9openpyfst_8StdState_arcs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9openpyfst_8StdState_4arcs_1__get__(o);
}

static PyObject *__pyx_getprop_9openpyfst_8StdState_final(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9openpyfst_8StdState_5final_1__get__(o);
}

static int __pyx_setprop_9openpyfst_8StdState_final(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9openpyfst_8StdState_5final_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9openpyfst_8StdState_initial(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9openpyfst_8StdState_7initial_1__get__(o);
}

static int __pyx_setprop_9openpyfst_8StdState_initial(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9openpyfst_8StdState_7initial_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9openpyfst_8StdState_stateid(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9openpyfst_8StdState_7stateid_1__get__(o);
}

static int __pyx_setprop_9openpyfst_8StdState_stateid(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9openpyfst_8StdState_7stateid_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_9openpyfst_StdState[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9openpyfst_8StdState_10__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9openpyfst_8StdState_12__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9openpyfst_StdState[] = {
  {(char *)"arcs", __pyx_getprop_9openpyfst_8StdState_arcs, 0, (char *)"state.arcs: all the arcs starting from this state", 0},
  {(char *)"final", __pyx_getprop_9openpyfst_8StdState_final, __pyx_setprop_9openpyfst_8StdState_final, (char *)0, 0},
  {(char *)"initial", __pyx_getprop_9openpyfst_8StdState_initial, __pyx_setprop_9openpyfst_8StdState_initial, (char *)0, 0},
  {(char *)"stateid", __pyx_getprop_9openpyfst_8StdState_stateid, __pyx_setprop_9openpyfst_8StdState_stateid, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_StdState = {
  __pyx_pw_9openpyfst_8StdState_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_StdState = {
  __pyx_pw_9openpyfst_8StdState_3__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_9openpyfst_StdState = {
  PyVarObject_HEAD_INIT(0, 0)
  "openpyfst.StdState", /*tp_name*/
  sizeof(struct __pyx_obj_9openpyfst_StdState), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9openpyfst_StdState, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_9openpyfst_8StdState_8__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_StdState, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_StdState, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_9openpyfst_8StdState_5__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9openpyfst_StdState, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9openpyfst_StdState, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9openpyfst_8StdState_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9openpyfst_StdState, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_9openpyfst_StdVectorFst(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9openpyfst_StdVectorFst *p;
  PyObject *o = __pyx_tp_new_9openpyfst__Fst(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9openpyfst_StdVectorFst *)o);
  p->isyms = ((struct __pyx_obj_9openpyfst_SymbolTable *)Py_None); Py_INCREF(Py_None);
  p->osyms = ((struct __pyx_obj_9openpyfst_SymbolTable *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9openpyfst_StdVectorFst(PyObject *o) {
  struct __pyx_obj_9openpyfst_StdVectorFst *p = (struct __pyx_obj_9openpyfst_StdVectorFst *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_9openpyfst_12StdVectorFst_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->isyms);
  Py_CLEAR(p->osyms);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9openpyfst__Fst(o);
}

static int __pyx_tp_traverse_9openpyfst_StdVectorFst(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9openpyfst_StdVectorFst *p = (struct __pyx_obj_9openpyfst_StdVectorFst *)o;
  e = ((likely(__pyx_ptype_9openpyfst__Fst)) ? ((__pyx_ptype_9openpyfst__Fst->tp_traverse) ? __pyx_ptype_9openpyfst__Fst->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9openpyfst_StdVectorFst)); if (e) return e;
  if (p->isyms) {
    e = (*v)(((PyObject *)p->isyms), a); if (e) return e;
  }
  if (p->osyms) {
    e = (*v)(((PyObject *)p->osyms), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9openpyfst_StdVectorFst(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9openpyfst_StdVectorFst *p = (struct __pyx_obj_9openpyfst_StdVectorFst *)o;
  if (likely(__pyx_ptype_9openpyfst__Fst)) { if (__pyx_ptype_9openpyfst__Fst->tp_clear) __pyx_ptype_9openpyfst__Fst->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9openpyfst_StdVectorFst);
  tmp = ((PyObject*)p->isyms);
  p->isyms = ((struct __pyx_obj_9openpyfst_SymbolTable *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->osyms);
  p->osyms = ((struct __pyx_obj_9openpyfst_SymbolTable *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_9openpyfst_StdVectorFst(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_9openpyfst_12StdVectorFst_states(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9openpyfst_12StdVectorFst_6states_1__get__(o);
}

static PyObject *__pyx_getprop_9openpyfst_12StdVectorFst_start(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9openpyfst_12StdVectorFst_5start_1__get__(o);
}

static int __pyx_setprop_9openpyfst_12StdVectorFst_start(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9openpyfst_12StdVectorFst_5start_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9openpyfst_12StdVectorFst_input_deterministic(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9openpyfst_12StdVectorFst_19input_deterministic_1__get__(o);
}

static PyObject *__pyx_getprop_9openpyfst_12StdVectorFst_output_deterministic(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9openpyfst_12StdVectorFst_20output_deterministic_1__get__(o);
}

static PyObject *__pyx_getprop_9openpyfst_12StdVectorFst_acceptor(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9openpyfst_12StdVectorFst_8acceptor_1__get__(o);
}

static PyObject *__pyx_getprop_9openpyfst_12StdVectorFst_isyms(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9openpyfst_12StdVectorFst_5isyms_1__get__(o);
}

static int __pyx_setprop_9openpyfst_12StdVectorFst_isyms(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9openpyfst_12StdVectorFst_5isyms_3__set__(o, v);
  }
  else {
    return __pyx_pw_9openpyfst_12StdVectorFst_5isyms_5__del__(o);
  }
}

static PyObject *__pyx_getprop_9openpyfst_12StdVectorFst_osyms(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9openpyfst_12StdVectorFst_5osyms_1__get__(o);
}

static int __pyx_setprop_9openpyfst_12StdVectorFst_osyms(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9openpyfst_12StdVectorFst_5osyms_3__set__(o, v);
  }
  else {
    return __pyx_pw_9openpyfst_12StdVectorFst_5osyms_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_9openpyfst_StdVectorFst[] = {
  {"_init_tables", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_5_init_tables, METH_NOARGS, 0},
  {"num_arcs", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_9num_arcs, METH_NOARGS, __pyx_doc_9openpyfst_12StdVectorFst_8num_arcs},
  {"copy", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_13copy, METH_NOARGS, __pyx_doc_9openpyfst_12StdVectorFst_12copy},
  {"add_arc", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9openpyfst_12StdVectorFst_20add_arc, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9openpyfst_12StdVectorFst_19add_arc},
  {"add_state", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_22add_state, METH_NOARGS, __pyx_doc_9openpyfst_12StdVectorFst_21add_state},
  {"write", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9openpyfst_12StdVectorFst_26write, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9openpyfst_12StdVectorFst_25write},
  {"determinize", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_28determinize, METH_NOARGS, __pyx_doc_9openpyfst_12StdVectorFst_27determinize},
  {"compose", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_30compose, METH_O, __pyx_doc_9openpyfst_12StdVectorFst_29compose},
  {"intersect", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_34intersect, METH_O, __pyx_doc_9openpyfst_12StdVectorFst_33intersect},
  {"set_union", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_38set_union, METH_O, __pyx_doc_9openpyfst_12StdVectorFst_37set_union},
  {"union", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_40union, METH_O, __pyx_doc_9openpyfst_12StdVectorFst_39union},
  {"concatenate", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_44concatenate, METH_O, __pyx_doc_9openpyfst_12StdVectorFst_43concatenate},
  {"concatenation", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_46concatenation, METH_O, __pyx_doc_9openpyfst_12StdVectorFst_45concatenation},
  {"difference", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_50difference, METH_O, __pyx_doc_9openpyfst_12StdVectorFst_49difference},
  {"set_closure", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9openpyfst_12StdVectorFst_54set_closure, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9openpyfst_12StdVectorFst_53set_closure},
  {"closure", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_56closure, METH_NOARGS, __pyx_doc_9openpyfst_12StdVectorFst_55closure},
  {"closure_plus", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_58closure_plus, METH_NOARGS, __pyx_doc_9openpyfst_12StdVectorFst_57closure_plus},
  {"invert", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_60invert, METH_NOARGS, __pyx_doc_9openpyfst_12StdVectorFst_59invert},
  {"inverse", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_62inverse, METH_NOARGS, __pyx_doc_9openpyfst_12StdVectorFst_61inverse},
  {"reverse", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_64reverse, METH_NOARGS, __pyx_doc_9openpyfst_12StdVectorFst_63reverse},
  {"shortest_distance", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9openpyfst_12StdVectorFst_66shortest_distance, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9openpyfst_12StdVectorFst_65shortest_distance},
  {"shortest_path", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9openpyfst_12StdVectorFst_68shortest_path, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9openpyfst_12StdVectorFst_67shortest_path},
  {"push", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9openpyfst_12StdVectorFst_70push, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9openpyfst_12StdVectorFst_69push},
  {"push_weights", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9openpyfst_12StdVectorFst_72push_weights, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9openpyfst_12StdVectorFst_71push_weights},
  {"push_labels", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9openpyfst_12StdVectorFst_74push_labels, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9openpyfst_12StdVectorFst_73push_labels},
  {"reweight", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9openpyfst_12StdVectorFst_76reweight, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9openpyfst_12StdVectorFst_75reweight},
  {"minimize", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_78minimize, METH_NOARGS, __pyx_doc_9openpyfst_12StdVectorFst_77minimize},
  {"arc_sort_input", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_80arc_sort_input, METH_NOARGS, __pyx_doc_9openpyfst_12StdVectorFst_79arc_sort_input},
  {"arc_sort_output", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_82arc_sort_output, METH_NOARGS, __pyx_doc_9openpyfst_12StdVectorFst_81arc_sort_output},
  {"top_sort", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_84top_sort, METH_NOARGS, __pyx_doc_9openpyfst_12StdVectorFst_83top_sort},
  {"project_input", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_86project_input, METH_NOARGS, __pyx_doc_9openpyfst_12StdVectorFst_85project_input},
  {"project_output", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_88project_output, METH_NOARGS, __pyx_doc_9openpyfst_12StdVectorFst_87project_output},
  {"remove_epsilon", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_90remove_epsilon, METH_NOARGS, __pyx_doc_9openpyfst_12StdVectorFst_89remove_epsilon},
  {"_tosym", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9openpyfst_12StdVectorFst_92_tosym, METH_VARARGS|METH_KEYWORDS, 0},
  {"relabel", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9openpyfst_12StdVectorFst_94relabel, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9openpyfst_12StdVectorFst_93relabel},
  {"prune", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_96prune, METH_O, __pyx_doc_9openpyfst_12StdVectorFst_95prune},
  {"connect", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_98connect, METH_NOARGS, __pyx_doc_9openpyfst_12StdVectorFst_97connect},
  {"plus_map", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_100plus_map, METH_O, __pyx_doc_9openpyfst_12StdVectorFst_99plus_map},
  {"times_map", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_102times_map, METH_O, __pyx_doc_9openpyfst_12StdVectorFst_101times_map},
  {"remove_weights", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_104remove_weights, METH_NOARGS, __pyx_doc_9openpyfst_12StdVectorFst_103remove_weights},
  {"invert_weights", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_106invert_weights, METH_NOARGS, __pyx_doc_9openpyfst_12StdVectorFst_105invert_weights},
  {"replace", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9openpyfst_12StdVectorFst_108replace, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9openpyfst_12StdVectorFst_107replace},
  {"random_generate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9openpyfst_12StdVectorFst_110random_generate, METH_VARARGS|METH_KEYWORDS, 0},
  {"logprob_generate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9openpyfst_12StdVectorFst_112logprob_generate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9openpyfst_12StdVectorFst_111logprob_generate},
  {"uniform_generate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9openpyfst_12StdVectorFst_114uniform_generate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9openpyfst_12StdVectorFst_113uniform_generate},
  {"_visit", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9openpyfst_12StdVectorFst_116_visit, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9openpyfst_12StdVectorFst_115_visit},
  {"paths", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_119paths, METH_NOARGS, __pyx_doc_9openpyfst_12StdVectorFst_118paths},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_121__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9openpyfst_12StdVectorFst_123__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9openpyfst_StdVectorFst[] = {
  {(char *)"states", __pyx_getprop_9openpyfst_12StdVectorFst_states, 0, (char *)0, 0},
  {(char *)"start", __pyx_getprop_9openpyfst_12StdVectorFst_start, __pyx_setprop_9openpyfst_12StdVectorFst_start, (char *)0, 0},
  {(char *)"input_deterministic", __pyx_getprop_9openpyfst_12StdVectorFst_input_deterministic, 0, (char *)0, 0},
  {(char *)"output_deterministic", __pyx_getprop_9openpyfst_12StdVectorFst_output_deterministic, 0, (char *)0, 0},
  {(char *)"acceptor", __pyx_getprop_9openpyfst_12StdVectorFst_acceptor, 0, (char *)0, 0},
  {(char *)"isyms", __pyx_getprop_9openpyfst_12StdVectorFst_isyms, __pyx_setprop_9openpyfst_12StdVectorFst_isyms, (char *)0, 0},
  {(char *)"osyms", __pyx_getprop_9openpyfst_12StdVectorFst_osyms, __pyx_setprop_9openpyfst_12StdVectorFst_osyms, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_StdVectorFst = {
  __pyx_pw_9openpyfst_12StdVectorFst_48__add__, /*nb_add*/
  __pyx_pw_9openpyfst_12StdVectorFst_52__sub__, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  __pyx_pw_9openpyfst_12StdVectorFst_32__rshift__, /*nb_rshift*/
  __pyx_pw_9openpyfst_12StdVectorFst_36__and__, /*nb_and*/
  0, /*nb_xor*/
  __pyx_pw_9openpyfst_12StdVectorFst_42__or__, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_StdVectorFst = {
  __pyx_pw_9openpyfst_12StdVectorFst_7__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_9openpyfst_StdVectorFst, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_StdVectorFst = {
  __pyx_pw_9openpyfst_12StdVectorFst_7__len__, /*mp_length*/
  __pyx_pw_9openpyfst_12StdVectorFst_15__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_9openpyfst_StdVectorFst = {
  PyVarObject_HEAD_INIT(0, 0)
  "openpyfst.StdVectorFst", /*tp_name*/
  sizeof(struct __pyx_obj_9openpyfst_StdVectorFst), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9openpyfst_StdVectorFst, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_9openpyfst_12StdVectorFst_11__repr__, /*tp_repr*/
  &__pyx_tp_as_number_StdVectorFst, /*tp_as_number*/
  &__pyx_tp_as_sequence_StdVectorFst, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_StdVectorFst, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9openpyfst_StdVectorFst, /*tp_traverse*/
  __pyx_tp_clear_9openpyfst_StdVectorFst, /*tp_clear*/
  __pyx_pw_9openpyfst_12StdVectorFst_24__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_9openpyfst_12StdVectorFst_17__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9openpyfst_StdVectorFst, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9openpyfst_StdVectorFst, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9openpyfst_12StdVectorFst_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9openpyfst_StdVectorFst, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_9openpyfst___pyx_scope_struct__items *__pyx_freelist_9openpyfst___pyx_scope_struct__items[8];
static int __pyx_freecount_9openpyfst___pyx_scope_struct__items = 0;

static PyObject *__pyx_tp_new_9openpyfst___pyx_scope_struct__items(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9openpyfst___pyx_scope_struct__items > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9openpyfst___pyx_scope_struct__items)))) {
    o = (PyObject*)__pyx_freelist_9openpyfst___pyx_scope_struct__items[--__pyx_freecount_9openpyfst___pyx_scope_struct__items];
    memset(o, 0, sizeof(struct __pyx_obj_9openpyfst___pyx_scope_struct__items));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9openpyfst___pyx_scope_struct__items(PyObject *o) {
  struct __pyx_obj_9openpyfst___pyx_scope_struct__items *p = (struct __pyx_obj_9openpyfst___pyx_scope_struct__items *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9openpyfst___pyx_scope_struct__items < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9openpyfst___pyx_scope_struct__items)))) {
    __pyx_freelist_9openpyfst___pyx_scope_struct__items[__pyx_freecount_9openpyfst___pyx_scope_struct__items++] = ((struct __pyx_obj_9openpyfst___pyx_scope_struct__items *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9openpyfst___pyx_scope_struct__items(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9openpyfst___pyx_scope_struct__items *p = (struct __pyx_obj_9openpyfst___pyx_scope_struct__items *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_9openpyfst___pyx_scope_struct__items = {
  PyVarObject_HEAD_INIT(0, 0)
  "openpyfst.__pyx_scope_struct__items", /*tp_name*/
  sizeof(struct __pyx_obj_9openpyfst___pyx_scope_struct__items), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9openpyfst___pyx_scope_struct__items, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9openpyfst___pyx_scope_struct__items, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9openpyfst___pyx_scope_struct__items, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_9openpyfst___pyx_scope_struct_1___iter__ *__pyx_freelist_9openpyfst___pyx_scope_struct_1___iter__[8];
static int __pyx_freecount_9openpyfst___pyx_scope_struct_1___iter__ = 0;

static PyObject *__pyx_tp_new_9openpyfst___pyx_scope_struct_1___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9openpyfst___pyx_scope_struct_1___iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9openpyfst___pyx_scope_struct_1___iter__)))) {
    o = (PyObject*)__pyx_freelist_9openpyfst___pyx_scope_struct_1___iter__[--__pyx_freecount_9openpyfst___pyx_scope_struct_1___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_9openpyfst___pyx_scope_struct_1___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9openpyfst___pyx_scope_struct_1___iter__(PyObject *o) {
  struct __pyx_obj_9openpyfst___pyx_scope_struct_1___iter__ *p = (struct __pyx_obj_9openpyfst___pyx_scope_struct_1___iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_arc);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9openpyfst___pyx_scope_struct_1___iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9openpyfst___pyx_scope_struct_1___iter__)))) {
    __pyx_freelist_9openpyfst___pyx_scope_struct_1___iter__[__pyx_freecount_9openpyfst___pyx_scope_struct_1___iter__++] = ((struct __pyx_obj_9openpyfst___pyx_scope_struct_1___iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9openpyfst___pyx_scope_struct_1___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9openpyfst___pyx_scope_struct_1___iter__ *p = (struct __pyx_obj_9openpyfst___pyx_scope_struct_1___iter__ *)o;
  if (p->__pyx_v_arc) {
    e = (*v)(((PyObject *)p->__pyx_v_arc), a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_9openpyfst___pyx_scope_struct_1___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "openpyfst.__pyx_scope_struct_1___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_9openpyfst___pyx_scope_struct_1___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9openpyfst___pyx_scope_struct_1___iter__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9openpyfst___pyx_scope_struct_1___iter__, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9openpyfst___pyx_scope_struct_1___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_9openpyfst___pyx_scope_struct_2_num_arcs *__pyx_freelist_9openpyfst___pyx_scope_struct_2_num_arcs[8];
static int __pyx_freecount_9openpyfst___pyx_scope_struct_2_num_arcs = 0;

static PyObject *__pyx_tp_new_9openpyfst___pyx_scope_struct_2_num_arcs(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9openpyfst___pyx_scope_struct_2_num_arcs > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9openpyfst___pyx_scope_struct_2_num_arcs)))) {
    o = (PyObject*)__pyx_freelist_9openpyfst___pyx_scope_struct_2_num_arcs[--__pyx_freecount_9openpyfst___pyx_scope_struct_2_num_arcs];
    memset(o, 0, sizeof(struct __pyx_obj_9openpyfst___pyx_scope_struct_2_num_arcs));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9openpyfst___pyx_scope_struct_2_num_arcs(PyObject *o) {
  struct __pyx_obj_9openpyfst___pyx_scope_struct_2_num_arcs *p = (struct __pyx_obj_9openpyfst___pyx_scope_struct_2_num_arcs *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9openpyfst___pyx_scope_struct_2_num_arcs < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9openpyfst___pyx_scope_struct_2_num_arcs)))) {
    __pyx_freelist_9openpyfst___pyx_scope_struct_2_num_arcs[__pyx_freecount_9openpyfst___pyx_scope_struct_2_num_arcs++] = ((struct __pyx_obj_9openpyfst___pyx_scope_struct_2_num_arcs *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9openpyfst___pyx_scope_struct_2_num_arcs(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9openpyfst___pyx_scope_struct_2_num_arcs *p = (struct __pyx_obj_9openpyfst___pyx_scope_struct_2_num_arcs *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9openpyfst___pyx_scope_struct_2_num_arcs(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9openpyfst___pyx_scope_struct_2_num_arcs *p = (struct __pyx_obj_9openpyfst___pyx_scope_struct_2_num_arcs *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_9openpyfst_StdVectorFst *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_9openpyfst___pyx_scope_struct_2_num_arcs = {
  PyVarObject_HEAD_INIT(0, 0)
  "openpyfst.__pyx_scope_struct_2_num_arcs", /*tp_name*/
  sizeof(struct __pyx_obj_9openpyfst___pyx_scope_struct_2_num_arcs), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9openpyfst___pyx_scope_struct_2_num_arcs, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9openpyfst___pyx_scope_struct_2_num_arcs, /*tp_traverse*/
  __pyx_tp_clear_9openpyfst___pyx_scope_struct_2_num_arcs, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9openpyfst___pyx_scope_struct_2_num_arcs, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_9openpyfst___pyx_scope_struct_3_genexpr *__pyx_freelist_9openpyfst___pyx_scope_struct_3_genexpr[8];
static int __pyx_freecount_9openpyfst___pyx_scope_struct_3_genexpr = 0;

static PyObject *__pyx_tp_new_9openpyfst___pyx_scope_struct_3_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9openpyfst___pyx_scope_struct_3_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9openpyfst___pyx_scope_struct_3_genexpr)))) {
    o = (PyObject*)__pyx_freelist_9openpyfst___pyx_scope_struct_3_genexpr[--__pyx_freecount_9openpyfst___pyx_scope_struct_3_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_9openpyfst___pyx_scope_struct_3_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9openpyfst___pyx_scope_struct_3_genexpr(PyObject *o) {
  struct __pyx_obj_9openpyfst___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_9openpyfst___pyx_scope_struct_3_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_state);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9openpyfst___pyx_scope_struct_3_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9openpyfst___pyx_scope_struct_3_genexpr)))) {
    __pyx_freelist_9openpyfst___pyx_scope_struct_3_genexpr[__pyx_freecount_9openpyfst___pyx_scope_struct_3_genexpr++] = ((struct __pyx_obj_9openpyfst___pyx_scope_struct_3_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9openpyfst___pyx_scope_struct_3_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9openpyfst___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_9openpyfst___pyx_scope_struct_3_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_state) {
    e = (*v)(p->__pyx_v_state, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_9openpyfst___pyx_scope_struct_3_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "openpyfst.__pyx_scope_struct_3_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_9openpyfst___pyx_scope_struct_3_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9openpyfst___pyx_scope_struct_3_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9openpyfst___pyx_scope_struct_3_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9openpyfst___pyx_scope_struct_3_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_9openpyfst___pyx_scope_struct_4___iter__ *__pyx_freelist_9openpyfst___pyx_scope_struct_4___iter__[8];
static int __pyx_freecount_9openpyfst___pyx_scope_struct_4___iter__ = 0;

static PyObject *__pyx_tp_new_9openpyfst___pyx_scope_struct_4___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9openpyfst___pyx_scope_struct_4___iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9openpyfst___pyx_scope_struct_4___iter__)))) {
    o = (PyObject*)__pyx_freelist_9openpyfst___pyx_scope_struct_4___iter__[--__pyx_freecount_9openpyfst___pyx_scope_struct_4___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_9openpyfst___pyx_scope_struct_4___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9openpyfst___pyx_scope_struct_4___iter__(PyObject *o) {
  struct __pyx_obj_9openpyfst___pyx_scope_struct_4___iter__ *p = (struct __pyx_obj_9openpyfst___pyx_scope_struct_4___iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9openpyfst___pyx_scope_struct_4___iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9openpyfst___pyx_scope_struct_4___iter__)))) {
    __pyx_freelist_9openpyfst___pyx_scope_struct_4___iter__[__pyx_freecount_9openpyfst___pyx_scope_struct_4___iter__++] = ((struct __pyx_obj_9openpyfst___pyx_scope_struct_4___iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9openpyfst___pyx_scope_struct_4___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9openpyfst___pyx_scope_struct_4___iter__ *p = (struct __pyx_obj_9openpyfst___pyx_scope_struct_4___iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_9openpyfst___pyx_scope_struct_4___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "openpyfst.__pyx_scope_struct_4___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_9openpyfst___pyx_scope_struct_4___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9openpyfst___pyx_scope_struct_4___iter__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9openpyfst___pyx_scope_struct_4___iter__, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9openpyfst___pyx_scope_struct_4___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_9openpyfst___pyx_scope_struct_5__visit *__pyx_freelist_9openpyfst___pyx_scope_struct_5__visit[8];
static int __pyx_freecount_9openpyfst___pyx_scope_struct_5__visit = 0;

static PyObject *__pyx_tp_new_9openpyfst___pyx_scope_struct_5__visit(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9openpyfst___pyx_scope_struct_5__visit > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9openpyfst___pyx_scope_struct_5__visit)))) {
    o = (PyObject*)__pyx_freelist_9openpyfst___pyx_scope_struct_5__visit[--__pyx_freecount_9openpyfst___pyx_scope_struct_5__visit];
    memset(o, 0, sizeof(struct __pyx_obj_9openpyfst___pyx_scope_struct_5__visit));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9openpyfst___pyx_scope_struct_5__visit(PyObject *o) {
  struct __pyx_obj_9openpyfst___pyx_scope_struct_5__visit *p = (struct __pyx_obj_9openpyfst___pyx_scope_struct_5__visit *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_arc);
  Py_CLEAR(p->__pyx_v_path);
  Py_CLEAR(p->__pyx_v_prefix);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_3);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9openpyfst___pyx_scope_struct_5__visit < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9openpyfst___pyx_scope_struct_5__visit)))) {
    __pyx_freelist_9openpyfst___pyx_scope_struct_5__visit[__pyx_freecount_9openpyfst___pyx_scope_struct_5__visit++] = ((struct __pyx_obj_9openpyfst___pyx_scope_struct_5__visit *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9openpyfst___pyx_scope_struct_5__visit(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9openpyfst___pyx_scope_struct_5__visit *p = (struct __pyx_obj_9openpyfst___pyx_scope_struct_5__visit *)o;
  if (p->__pyx_v_arc) {
    e = (*v)(p->__pyx_v_arc, a); if (e) return e;
  }
  if (p->__pyx_v_path) {
    e = (*v)(p->__pyx_v_path, a); if (e) return e;
  }
  if (p->__pyx_v_prefix) {
    e = (*v)(p->__pyx_v_prefix, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_9openpyfst___pyx_scope_struct_5__visit = {
  PyVarObject_HEAD_INIT(0, 0)
  "openpyfst.__pyx_scope_struct_5__visit", /*tp_name*/
  sizeof(struct __pyx_obj_9openpyfst___pyx_scope_struct_5__visit), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9openpyfst___pyx_scope_struct_5__visit, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9openpyfst___pyx_scope_struct_5__visit, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9openpyfst___pyx_scope_struct_5__visit, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_openpyfst(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_openpyfst},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "openpyfst",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_C_Users_user_source_repos_openfs, __pyx_k_C_Users_user_source_repos_openfs, sizeof(__pyx_k_C_Users_user_source_repos_openfs), 0, 0, 1, 0},
  {&__pyx_kp_u_Cannot_convert_0_to_bytestring, __pyx_k_Cannot_convert_0_to_bytestring, sizeof(__pyx_k_Cannot_convert_0_to_bytestring), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_convert_label_0_to_symbol, __pyx_k_Cannot_convert_label_0_to_symbol, sizeof(__pyx_k_Cannot_convert_label_0_to_symbol), 0, 1, 0, 0},
  {&__pyx_n_s_EPSILON, __pyx_k_EPSILON, sizeof(__pyx_k_EPSILON), 0, 0, 1, 1},
  {&__pyx_n_s_EPSILON_ID, __pyx_k_EPSILON_ID, sizeof(__pyx_k_EPSILON_ID), 0, 0, 1, 1},
  {&__pyx_n_s_Fst, __pyx_k_Fst, sizeof(__pyx_k_Fst), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_k_Incompatible_checksums_s_vs_0xd4, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xd4), 0, 0, 1, 0},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s_ONE, __pyx_k_ONE, sizeof(__pyx_k_ONE), 0, 0, 1, 1},
  {&__pyx_n_s_OSError, __pyx_k_OSError, sizeof(__pyx_k_OSError), 0, 0, 1, 1},
  {&__pyx_n_s_PIPE, __pyx_k_PIPE, sizeof(__pyx_k_PIPE), 0, 0, 1, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_Popen, __pyx_k_Popen, sizeof(__pyx_k_Popen), 0, 0, 1, 1},
  {&__pyx_n_u_ROOT, __pyx_k_ROOT, sizeof(__pyx_k_ROOT), 0, 1, 0, 1},
  {&__pyx_n_s_SEMIRING, __pyx_k_SEMIRING, sizeof(__pyx_k_SEMIRING), 0, 0, 1, 1},
  {&__pyx_n_s_StdArc, __pyx_k_StdArc, sizeof(__pyx_k_StdArc), 0, 0, 1, 1},
  {&__pyx_kp_u_StdArc_0_1_2_3, __pyx_k_StdArc_0_1_2_3, sizeof(__pyx_k_StdArc_0_1_2_3), 0, 1, 0, 0},
  {&__pyx_n_s_StdState, __pyx_k_StdState, sizeof(__pyx_k_StdState), 0, 0, 1, 1},
  {&__pyx_kp_u_StdState_0_with_1_arcs, __pyx_k_StdState_0_with_1_arcs, sizeof(__pyx_k_StdState_0_with_1_arcs), 0, 1, 0, 0},
  {&__pyx_n_s_StdState___iter, __pyx_k_StdState___iter, sizeof(__pyx_k_StdState___iter), 0, 0, 1, 1},
  {&__pyx_n_s_StdVectorFst, __pyx_k_StdVectorFst, sizeof(__pyx_k_StdVectorFst), 0, 0, 1, 1},
  {&__pyx_n_s_StdVectorFst___iter, __pyx_k_StdVectorFst___iter, sizeof(__pyx_k_StdVectorFst___iter), 0, 0, 1, 1},
  {&__pyx_n_s_StdVectorFst__visit, __pyx_k_StdVectorFst__visit, sizeof(__pyx_k_StdVectorFst__visit), 0, 0, 1, 1},
  {&__pyx_kp_u_StdVectorFst_with_0_states, __pyx_k_StdVectorFst_with_0_states, sizeof(__pyx_k_StdVectorFst_with_0_states), 0, 1, 0, 0},
  {&__pyx_n_s_SymbolTable, __pyx_k_SymbolTable, sizeof(__pyx_k_SymbolTable), 0, 0, 1, 1},
  {&__pyx_kp_u_SymbolTable_0, __pyx_k_SymbolTable_0, sizeof(__pyx_k_SymbolTable_0), 0, 1, 0, 0},
  {&__pyx_n_s_SymbolTable_items, __pyx_k_SymbolTable_items, sizeof(__pyx_k_SymbolTable_items), 0, 0, 1, 1},
  {&__pyx_kp_u_SymbolTable_of_size_0, __pyx_k_SymbolTable_of_size_0, sizeof(__pyx_k_SymbolTable_of_size_0), 0, 1, 0, 0},
  {&__pyx_n_s_TropicalWeight, __pyx_k_TropicalWeight, sizeof(__pyx_k_TropicalWeight), 0, 0, 1, 1},
  {&__pyx_kp_u_TropicalWeight_0, __pyx_k_TropicalWeight_0, sizeof(__pyx_k_TropicalWeight_0), 0, 1, 0, 0},
  {&__pyx_kp_u_Tsvg, __pyx_k_Tsvg, sizeof(__pyx_k_Tsvg), 0, 1, 0, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_u_Weight_needs_to_have_the_path_pr, __pyx_k_Weight_needs_to_have_the_path_pr, sizeof(__pyx_k_Weight_needs_to_have_the_path_pr), 0, 1, 0, 0},
  {&__pyx_n_s_ZERO, __pyx_k_ZERO, sizeof(__pyx_k_ZERO), 0, 0, 1, 1},
  {&__pyx_kp_u__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 0},
  {&__pyx_n_u__32, __pyx_k__32, sizeof(__pyx_k__32), 0, 1, 0, 1},
  {&__pyx_n_s_acceptor, __pyx_k_acceptor, sizeof(__pyx_k_acceptor), 0, 0, 1, 1},
  {&__pyx_n_s_arc_type, __pyx_k_arc_type, sizeof(__pyx_k_arc_type), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_u_ascii, __pyx_k_ascii, sizeof(__pyx_k_ascii), 0, 1, 0, 1},
  {&__pyx_kp_u_both_transducers_need_to_be_acce, __pyx_k_both_transducers_need_to_be_acce, sizeof(__pyx_k_both_transducers_need_to_be_acce), 0, 1, 0, 0},
  {&__pyx_kp_u_cannot_create_independent_arc, __pyx_k_cannot_create_independent_arc, sizeof(__pyx_k_cannot_create_independent_arc), 0, 1, 0, 0},
  {&__pyx_kp_u_cannot_create_independent_state, __pyx_k_cannot_create_independent_state, sizeof(__pyx_k_cannot_create_independent_state), 0, 1, 0, 0},
  {&__pyx_kp_u_cannot_find_the_dot_binary, __pyx_k_cannot_find_the_dot_binary, sizeof(__pyx_k_cannot_find_the_dot_binary), 0, 1, 0, 0},
  {&__pyx_kp_u_cannot_read_transducer_with_arcs, __pyx_k_cannot_read_transducer_with_arcs, sizeof(__pyx_k_cannot_read_transducer_with_arcs), 0, 1, 0, 0},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_communicate, __pyx_k_communicate, sizeof(__pyx_k_communicate), 0, 0, 1, 1},
  {&__pyx_kp_u_comparison_not_implemented_for_S, __pyx_k_comparison_not_implemented_for_S, sizeof(__pyx_k_comparison_not_implemented_for_S), 0, 1, 0, 0},
  {&__pyx_kp_u_comparison_not_implemented_for_S_2, __pyx_k_comparison_not_implemented_for_S_2, sizeof(__pyx_k_comparison_not_implemented_for_S_2), 0, 1, 0, 0},
  {&__pyx_kp_u_comparison_not_implemented_for_T, __pyx_k_comparison_not_implemented_for_T, sizeof(__pyx_k_comparison_not_implemented_for_T), 0, 1, 0, 0},
  {&__pyx_n_s_compose, __pyx_k_compose, sizeof(__pyx_k_compose), 0, 0, 1, 1},
  {&__pyx_n_s_concatenate, __pyx_k_concatenate, sizeof(__pyx_k_concatenate), 0, 0, 1, 1},
  {&__pyx_n_s_concatenation, __pyx_k_concatenation, sizeof(__pyx_k_concatenation), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_dest, __pyx_k_dest, sizeof(__pyx_k_dest), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_difference, __pyx_k_difference, sizeof(__pyx_k_difference), 0, 0, 1, 1},
  {&__pyx_n_u_dot, __pyx_k_dot, sizeof(__pyx_k_dot), 0, 1, 0, 1},
  {&__pyx_n_s_draw, __pyx_k_draw, sizeof(__pyx_k_draw), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_epsilon, __pyx_k_epsilon, sizeof(__pyx_k_epsilon), 0, 0, 1, 1},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_final, __pyx_k_final, sizeof(__pyx_k_final), 0, 0, 1, 1},
  {&__pyx_n_s_find, __pyx_k_find, sizeof(__pyx_k_find), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fst, __pyx_k_fst, sizeof(__pyx_k_fst), 0, 0, 1, 1},
  {&__pyx_n_s_fstream, __pyx_k_fstream, sizeof(__pyx_k_fstream), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_header, __pyx_k_header, sizeof(__pyx_k_header), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_ilabel, __pyx_k_ilabel, sizeof(__pyx_k_ilabel), 0, 0, 1, 1},
  {&__pyx_n_s_imap, __pyx_k_imap, sizeof(__pyx_k_imap), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_kp_u_incompatible_symbol_tables, __pyx_k_incompatible_symbol_tables, sizeof(__pyx_k_incompatible_symbol_tables), 0, 1, 0, 0},
  {&__pyx_n_s_init_tables, __pyx_k_init_tables, sizeof(__pyx_k_init_tables), 0, 0, 1, 1},
  {&__pyx_n_s_input_deterministic, __pyx_k_input_deterministic, sizeof(__pyx_k_input_deterministic), 0, 0, 1, 1},
  {&__pyx_n_s_intersect, __pyx_k_intersect, sizeof(__pyx_k_intersect), 0, 0, 1, 1},
  {&__pyx_kp_u_invalid_desination_state_id_0_1, __pyx_k_invalid_desination_state_id_0_1, sizeof(__pyx_k_invalid_desination_state_id_0_1), 0, 1, 0, 0},
  {&__pyx_kp_u_invalid_source_state_id_0_1, __pyx_k_invalid_source_state_id_0_1, sizeof(__pyx_k_invalid_source_state_id_0_1), 0, 1, 0, 0},
  {&__pyx_n_s_invert, __pyx_k_invert, sizeof(__pyx_k_invert), 0, 0, 1, 1},
  {&__pyx_n_s_io, __pyx_k_io, sizeof(__pyx_k_io), 0, 0, 1, 1},
  {&__pyx_n_s_isyms, __pyx_k_isyms, sizeof(__pyx_k_isyms), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_iter, __pyx_k_iter, sizeof(__pyx_k_iter), 0, 0, 1, 1},
  {&__pyx_n_s_keep_isyms, __pyx_k_keep_isyms, sizeof(__pyx_k_keep_isyms), 0, 0, 1, 1},
  {&__pyx_n_s_keep_osyms, __pyx_k_keep_osyms, sizeof(__pyx_k_keep_osyms), 0, 0, 1, 1},
  {&__pyx_n_s_label, __pyx_k_label, sizeof(__pyx_k_label), 0, 0, 1, 1},
  {&__pyx_n_s_label_fst_map, __pyx_k_label_fst_map, sizeof(__pyx_k_label_fst_map), 0, 0, 1, 1},
  {&__pyx_n_s_labels, __pyx_k_labels, sizeof(__pyx_k_labels), 0, 0, 1, 1},
  {&__pyx_n_b_log, __pyx_k_log, sizeof(__pyx_k_log), 0, 0, 0, 1},
  {&__pyx_kp_u_log_machines_currently_not_suppo, __pyx_k_log_machines_currently_not_suppo, sizeof(__pyx_k_log_machines_currently_not_suppo), 0, 1, 0, 0},
  {&__pyx_n_s_logprob_generate, __pyx_k_logprob_generate, sizeof(__pyx_k_logprob_generate), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max_len, __pyx_k_max_len, sizeof(__pyx_k_max_len), 0, 0, 1, 1},
  {&__pyx_n_s_merge, __pyx_k_merge, sizeof(__pyx_k_merge), 0, 0, 1, 1},
  {&__pyx_n_s_merge_tables, __pyx_k_merge_tables, sizeof(__pyx_k_merge_tables), 0, 0, 1, 1},
  {&__pyx_n_s_merged, __pyx_k_merged, sizeof(__pyx_k_merged), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_n_path, __pyx_k_n_path, sizeof(__pyx_k_n_path), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_nextstate, __pyx_k_nextstate, sizeof(__pyx_k_nextstate), 0, 0, 1, 1},
  {&__pyx_n_s_num_arcs_locals_genexpr, __pyx_k_num_arcs_locals_genexpr, sizeof(__pyx_k_num_arcs_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_olabel, __pyx_k_olabel, sizeof(__pyx_k_olabel), 0, 0, 1, 1},
  {&__pyx_n_s_omap, __pyx_k_omap, sizeof(__pyx_k_omap), 0, 0, 1, 1},
  {&__pyx_n_s_openpyfst, __pyx_k_openpyfst, sizeof(__pyx_k_openpyfst), 0, 0, 1, 1},
  {&__pyx_n_s_osyms, __pyx_k_osyms, sizeof(__pyx_k_osyms), 0, 0, 1, 1},
  {&__pyx_n_s_other_symbol, __pyx_k_other_symbol, sizeof(__pyx_k_other_symbol), 0, 0, 1, 1},
  {&__pyx_n_s_other_value, __pyx_k_other_value, sizeof(__pyx_k_other_value), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_plus, __pyx_k_plus, sizeof(__pyx_k_plus), 0, 0, 1, 1},
  {&__pyx_kp_u_potential_list_of_invalid_length, __pyx_k_potential_list_of_invalid_length, sizeof(__pyx_k_potential_list_of_invalid_length), 0, 1, 0, 0},
  {&__pyx_n_s_potentials, __pyx_k_potentials, sizeof(__pyx_k_potentials), 0, 0, 1, 1},
  {&__pyx_n_s_prefix, __pyx_k_prefix, sizeof(__pyx_k_prefix), 0, 0, 1, 1},
  {&__pyx_n_s_push, __pyx_k_push, sizeof(__pyx_k_push), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle__Fst, __pyx_k_pyx_unpickle__Fst, sizeof(__pyx_k_pyx_unpickle__Fst), 0, 0, 1, 1},
  {&__pyx_n_s_randint, __pyx_k_randint, sizeof(__pyx_k_randint), 0, 0, 1, 1},
  {&__pyx_n_s_random, __pyx_k_random, sizeof(__pyx_k_random), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_re, __pyx_k_re, sizeof(__pyx_k_re), 0, 0, 1, 1},
  {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
  {&__pyx_n_s_read_std, __pyx_k_read_std, sizeof(__pyx_k_read_std), 0, 0, 1, 1},
  {&__pyx_n_s_read_symbols, __pyx_k_read_symbols, sizeof(__pyx_k_read_symbols), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_reverse, __pyx_k_reverse, sizeof(__pyx_k_reverse), 0, 0, 1, 1},
  {&__pyx_kp_s_self_arc_cannot_be_converted_to, __pyx_k_self_arc_cannot_be_converted_to, sizeof(__pyx_k_self_arc_cannot_be_converted_to), 0, 0, 1, 0},
  {&__pyx_kp_s_self_fst_cannot_be_converted_to, __pyx_k_self_fst_cannot_be_converted_to, sizeof(__pyx_k_self_fst_cannot_be_converted_to), 0, 0, 1, 0},
  {&__pyx_kp_s_self_table_cannot_be_converted_t, __pyx_k_self_table_cannot_be_converted_t, sizeof(__pyx_k_self_table_cannot_be_converted_t), 0, 0, 1, 0},
  {&__pyx_kp_s_self_weight_cannot_be_converted, __pyx_k_self_weight_cannot_be_converted, sizeof(__pyx_k_self_weight_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_set_closure, __pyx_k_set_closure, sizeof(__pyx_k_set_closure), 0, 0, 1, 1},
  {&__pyx_n_s_set_union, __pyx_k_set_union, sizeof(__pyx_k_set_union), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_source, __pyx_k_source, sizeof(__pyx_k_source), 0, 0, 1, 1},
  {&__pyx_n_b_standard, __pyx_k_standard, sizeof(__pyx_k_standard), 0, 0, 0, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_kp_u_state_index_out_of_range, __pyx_k_state_index_out_of_range, sizeof(__pyx_k_state_index_out_of_range), 0, 1, 0, 0},
  {&__pyx_n_s_stateid, __pyx_k_stateid, sizeof(__pyx_k_stateid), 0, 0, 1, 1},
  {&__pyx_n_s_stderr, __pyx_k_stderr, sizeof(__pyx_k_stderr), 0, 0, 1, 1},
  {&__pyx_n_s_stdin, __pyx_k_stdin, sizeof(__pyx_k_stdin), 0, 0, 1, 1},
  {&__pyx_n_s_stdout, __pyx_k_stdout, sizeof(__pyx_k_stdout), 0, 0, 1, 1},
  {&__pyx_n_s_stream, __pyx_k_stream, sizeof(__pyx_k_stream), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_subprocess, __pyx_k_subprocess, sizeof(__pyx_k_subprocess), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_symbol, __pyx_k_symbol, sizeof(__pyx_k_symbol), 0, 0, 1, 1},
  {&__pyx_n_s_syms1, __pyx_k_syms1, sizeof(__pyx_k_syms1), 0, 0, 1, 1},
  {&__pyx_n_s_syms2, __pyx_k_syms2, sizeof(__pyx_k_syms2), 0, 0, 1, 1},
  {&__pyx_n_s_table, __pyx_k_table, sizeof(__pyx_k_table), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_tosym, __pyx_k_tosym, sizeof(__pyx_k_tosym), 0, 0, 1, 1},
  {&__pyx_kp_u_transducer_is_not_input_determin, __pyx_k_transducer_is_not_input_determin, sizeof(__pyx_k_transducer_is_not_input_determin), 0, 1, 0, 0},
  {&__pyx_kp_u_transducer_symbol_tables_are_not, __pyx_k_transducer_symbol_tables_are_not, sizeof(__pyx_k_transducer_symbol_tables_are_not), 0, 1, 0, 0},
  {&__pyx_kp_u_transducers_must_use_shared_inpu, __pyx_k_transducers_must_use_shared_inpu, sizeof(__pyx_k_transducers_must_use_shared_inpu), 0, 1, 0, 0},
  {&__pyx_kp_u_transducers_must_use_shared_outp, __pyx_k_transducers_must_use_shared_outp, sizeof(__pyx_k_transducers_must_use_shared_outp), 0, 1, 0, 0},
  {&__pyx_n_s_uniform, __pyx_k_uniform, sizeof(__pyx_k_uniform), 0, 0, 1, 1},
  {&__pyx_n_s_uniform_generate, __pyx_k_uniform_generate, sizeof(__pyx_k_uniform_generate), 0, 0, 1, 1},
  {&__pyx_n_s_union, __pyx_k_union, sizeof(__pyx_k_union), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_kp_u_use_StdVectorFst_or_LogVectorFst, __pyx_k_use_StdVectorFst_or_LogVectorFst, sizeof(__pyx_k_use_StdVectorFst_or_LogVectorFst), 0, 1, 0, 0},
  {&__pyx_n_u_utf8, __pyx_k_utf8, sizeof(__pyx_k_utf8), 0, 1, 0, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_visit, __pyx_k_visit, sizeof(__pyx_k_visit), 0, 0, 1, 1},
  {&__pyx_n_s_weight, __pyx_k_weight, sizeof(__pyx_k_weight), 0, 0, 1, 1},
  {&__pyx_n_s_weighted, __pyx_k_weighted, sizeof(__pyx_k_weighted), 0, 0, 1, 1},
  {&__pyx_n_s_weights, __pyx_k_weights, sizeof(__pyx_k_weights), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 26, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(0, 74, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(0, 103, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 134, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 157, __pyx_L1_error)
  __pyx_builtin_OSError = __Pyx_GetBuiltinName(__pyx_n_s_OSError); if (!__pyx_builtin_OSError) __PYX_ERR(0, 178, __pyx_L1_error)
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) __PYX_ERR(0, 384, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 409, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "openpyfst.pyx":41
 *     elif arc_type == b'log':
 *         # return read_log(filename)
 *         raise TypeError('log machines currently not supported')             # <<<<<<<<<<<<<<
 *     raise TypeError('cannot read transducer with arcs of type {0}'.format(arc_type))
 * 
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_log_machines_currently_not_suppo); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "openpyfst.pyx":134
 *         elif op == 3: # !=
 *             return not (x == y)
 *         raise NotImplementedError('comparison not implemented for SymbolTable')             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_comparison_not_implemented_for_S); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.table cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.table cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_self_table_cannot_be_converted_t); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("self.table cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.table cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_self_table_cannot_be_converted_t); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "openpyfst.pyx":157
 *             other_symbol = syms2.find(value)
 *             if other_symbol != symbol:
 *                 raise ValueError('incompatible symbol tables')             # <<<<<<<<<<<<<<
 *         except KeyError:
 *             pass
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u_incompatible_symbol_tables); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "openpyfst.pyx":163
 *             other_value = syms2.find(symbol)
 *             if other_value != value:
 *                 raise ValueError('incompatible symbol tables')             # <<<<<<<<<<<<<<
 *         except KeyError:
 *             pass
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u_incompatible_symbol_tables); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "openpyfst.pyx":171
 * cdef class _Fst:
 *     def __init__(self):
 *         raise NotImplementedError('use StdVectorFst or LogVectorFst to create a transducer')             # <<<<<<<<<<<<<<
 * 
 *     def _repr_svg_(self):
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_u_use_StdVectorFst_or_LogVectorFst); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "openpyfst.pyx":179
 *                 stdout=subprocess.PIPE, stderr=subprocess.PIPE)
 *         except OSError:
 *             raise Exception('cannot find the dot binary')             # <<<<<<<<<<<<<<
 *         out, err = process.communicate(self.draw())
 *         if err:
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_cannot_find_the_dot_binary); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "openpyfst.pyx":218
 *         elif op == 3: # !=
 *             return not (x == y)
 *         raise NotImplementedError('comparison not implemented for TropicalWeight')             # <<<<<<<<<<<<<<
 * 
 *     def approx_equal(self, TropicalWeight other):
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_comparison_not_implemented_for_T); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.weight cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.weight cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_self_weight_cannot_be_converted); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":4
 *     raise TypeError("self.weight cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.weight cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_self_weight_cannot_be_converted); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "openpyfst.pyx":249
 *     def __init__(self):
 *         """A StdVectorFst arc (with a tropical weight)"""
 *         raise NotImplementedError('cannot create independent arc')             # <<<<<<<<<<<<<<
 * 
 *     property ilabel:
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_cannot_create_independent_arc); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.arc cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.arc cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_self_arc_cannot_be_converted_to); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":4
 *     raise TypeError("self.arc cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.arc cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_self_arc_cannot_be_converted_to); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "openpyfst.pyx":293
 *     def __init__(self):
 *         """A StdVectorFst state (with StdArc arcs)"""
 *         raise NotImplementedError('cannot create independent state')             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_u_cannot_create_independent_state); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_self_fst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":4
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_self_fst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "openpyfst.pyx":402
 *     def __getitem__(self, int stateid):
 *         if not (0 <= stateid < len(self)):
 *             raise KeyError('state index out of range')             # <<<<<<<<<<<<<<
 *         cdef StdState state = StdState.__new__(StdState)
 *         state.stateid = stateid
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_u_state_index_out_of_range); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "openpyfst.pyx":448
 *         elif op == 3: # !=
 *             return not (x == y)
 *         raise NotImplementedError('comparison not implemented for StdVectorFst')             # <<<<<<<<<<<<<<
 * 
 *     def write(self, filename, keep_isyms=False, keep_osyms=False):
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_u_comparison_not_implemented_for_S_2); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "openpyfst.pyx":487
 *         Shortcut: fst >> other"""
 *         if (self.osyms or other.isyms) and (self.osyms != other.isyms):
 *             raise ValueError('transducer symbol tables are not compatible for composition')             # <<<<<<<<<<<<<<
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=other.osyms)
 *         openfst.Compose(self.fst[0], other.fst[0], result.fst)
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_u_transducer_symbol_tables_are_not); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "openpyfst.pyx":499
 *         Shortcut: fst & other"""
 *         if not (self.acceptor and other.acceptor):
 *             raise ValueError('both transducers need to be acceptors for intersection')             # <<<<<<<<<<<<<<
 *         # TODO check and merge symbol tables (intersection)
 *         if self.isyms and (self.isyms != other.isyms):
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_u_both_transducers_need_to_be_acce); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "openpyfst.pyx":502
 *         # TODO check and merge symbol tables (intersection)
 *         if self.isyms and (self.isyms != other.isyms):
 *             raise ValueError('transducers must use shared input symbol table')             # <<<<<<<<<<<<<<
 *         if self.osyms and (self.osyms != other.osyms):
 *             raise ValueError('transducers must use shared output symbol table')
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_u_transducers_must_use_shared_inpu); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "openpyfst.pyx":504
 *             raise ValueError('transducers must use shared input symbol table')
 *         if self.osyms and (self.osyms != other.osyms):
 *             raise ValueError('transducers must use shared output symbol table')             # <<<<<<<<<<<<<<
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         openfst.Intersect(self.fst[0], other.fst[0], result.fst)
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_u_transducers_must_use_shared_outp); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "openpyfst.pyx":554
 *         # TODO merge symbol tables (union)
 *         if self.isyms and (self.isyms != other.isyms):
 *             raise ValueError('transducers must use shared input symbol table')             # <<<<<<<<<<<<<<
 *         if self.osyms and (self.osyms != other.osyms):
 *             raise ValueError('transducers must use shared output symbol table')
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_u_transducers_must_use_shared_inpu); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "openpyfst.pyx":556
 *             raise ValueError('transducers must use shared input symbol table')
 *         if self.osyms and (self.osyms != other.osyms):
 *             raise ValueError('transducers must use shared output symbol table')             # <<<<<<<<<<<<<<
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         openfst.Difference(self.fst[0], other.fst[0], result.fst)
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_u_transducers_must_use_shared_outp); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "openpyfst.pyx":610
 *         """fst.shortest_path(int n=1) -> transducer containing the n shortest paths"""
 *         if not isinstance(self, StdVectorFst):
 *             raise TypeError('Weight needs to have the path property and be right distributive')             # <<<<<<<<<<<<<<
 *         cdef StdVectorFst result = StdVectorFst(isyms=self.isyms, osyms=self.osyms)
 *         openfst.ShortestPath(self.fst[0], result.fst, n)
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_u_Weight_needs_to_have_the_path_pr); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "openpyfst.pyx":642
 *         potentials in direction of initial (default) or final state"""
 *         if not len(potentials) == len(self):
 *             raise ValueError('potential list of invalid length')             # <<<<<<<<<<<<<<
 *         cdef rtype = (openfst.REWEIGHT_TO_FINAL if final else
 *                 openfst.REWEIGHT_TO_INITIAL)
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_u_potential_list_of_invalid_length); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "openpyfst.pyx":655
 *         """fst.minimize(): minimize the transducer"""
 *         if not self.input_deterministic:
 *             raise ValueError('transducer is not input deterministic')             # <<<<<<<<<<<<<<
 *         openfst.Minimize(self.fst)
 * 
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_u_transducer_is_not_input_determin); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_self_fst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "(tree fragment)":4
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.fst cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_self_fst_cannot_be_converted_to); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "openpyfst.pyx":28
 *     raise TypeError('Cannot convert {0} to bytestring'.format(type(data)))
 * 
 * def read(filename):             # <<<<<<<<<<<<<<
 *     """read(filename) -> transducer read from the binary file
 *     Detect arc type (LogArc or TropicalArc) and produce specific transducer."""
 */
  __pyx_tuple__33 = PyTuple_Pack(4, __pyx_n_s_filename, __pyx_n_s_stream, __pyx_n_s_header, __pyx_n_s_arc_type); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_user_source_repos_openfs, __pyx_n_s_read, 28, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(0, 28, __pyx_L1_error)

  /* "openpyfst.pyx":44
 *     raise TypeError('cannot read transducer with arcs of type {0}'.format(arc_type))
 * 
 * def read_std(filename):             # <<<<<<<<<<<<<<
 *     """read_std(filename) -> StdVectorFst read from the binary file"""
 *     cdef StdVectorFst fst = StdVectorFst.__new__(StdVectorFst)
 */
  __pyx_tuple__35 = PyTuple_Pack(2, __pyx_n_s_filename, __pyx_n_s_fst); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_user_source_repos_openfs, __pyx_n_s_read_std, 44, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) __PYX_ERR(0, 44, __pyx_L1_error)

  /* "openpyfst.pyx":58
 * #    return fst
 * 
 * def read_symbols(filename):             # <<<<<<<<<<<<<<
 *     """read_symbols(filename) -> SymbolTable read from the binary file"""
 *     filename = as_str(filename)
 */
  __pyx_tuple__37 = PyTuple_Pack(3, __pyx_n_s_filename, __pyx_n_s_fstream, __pyx_n_s_table); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_user_source_repos_openfs, __pyx_n_s_read_symbols, 58, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(0, 58, __pyx_L1_error)

  /* "openpyfst.pyx":148
 * 
 * 
 * def _merge_tables(SymbolTable syms1, SymbolTable syms2, SymbolTable merged):             # <<<<<<<<<<<<<<
 *     """
 *     Merge tables `syms1` and `syms2` into `merged` if they are compatible.
 */
  __pyx_tuple__39 = PyTuple_Pack(7, __pyx_n_s_syms1, __pyx_n_s_syms2, __pyx_n_s_merged, __pyx_n_s_symbol, __pyx_n_s_value, __pyx_n_s_other_symbol, __pyx_n_s_other_value); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(3, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_C_Users_user_source_repos_openfs, __pyx_n_s_merge_tables, 148, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(0, 148, __pyx_L1_error)

  /* "openpyfst.pyx":189
 *     cdef openfst.TropicalWeight* weight
 * 
 *     ZERO = TropicalWeight(False)             # <<<<<<<<<<<<<<
 *     ONE = TropicalWeight(True)
 * 
 */
  __pyx_tuple__41 = PyTuple_Pack(1, Py_False); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "openpyfst.pyx":190
 * 
 *     ZERO = TropicalWeight(False)
 *     ONE = TropicalWeight(True)             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, value):
 */
  __pyx_tuple__42 = PyTuple_Pack(1, Py_True); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "(tree fragment)":1
 * def __pyx_unpickle__Fst(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 */
  __pyx_tuple__43 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__43, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle__Fst, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_222419149 = PyInt_FromLong(222419149L); if (unlikely(!__pyx_int_222419149)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_9openpyfst_SymbolTable) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  __pyx_type_9openpyfst_SymbolTable.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9openpyfst_SymbolTable.tp_dictoffset && __pyx_type_9openpyfst_SymbolTable.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9openpyfst_SymbolTable.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_9openpyfst_SymbolTable, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 68, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_9openpyfst_11SymbolTable___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_9openpyfst_11SymbolTable___init__.doc = __pyx_doc_9openpyfst_11SymbolTable___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_9openpyfst_11SymbolTable___init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SymbolTable, (PyObject *)&__pyx_type_9openpyfst_SymbolTable) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9openpyfst_SymbolTable) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  __pyx_ptype_9openpyfst_SymbolTable = &__pyx_type_9openpyfst_SymbolTable;
  if (PyType_Ready(&__pyx_type_9openpyfst__Fst) < 0) __PYX_ERR(0, 169, __pyx_L1_error)
  __pyx_type_9openpyfst__Fst.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9openpyfst__Fst.tp_dictoffset && __pyx_type_9openpyfst__Fst.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9openpyfst__Fst.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Fst, (PyObject *)&__pyx_type_9openpyfst__Fst) < 0) __PYX_ERR(0, 169, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9openpyfst__Fst) < 0) __PYX_ERR(0, 169, __pyx_L1_error)
  __pyx_ptype_9openpyfst__Fst = &__pyx_type_9openpyfst__Fst;
  if (PyType_Ready(&__pyx_type_9openpyfst_TropicalWeight) < 0) __PYX_ERR(0, 186, __pyx_L1_error)
  __pyx_type_9openpyfst_TropicalWeight.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9openpyfst_TropicalWeight.tp_dictoffset && __pyx_type_9openpyfst_TropicalWeight.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9openpyfst_TropicalWeight.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_9openpyfst_TropicalWeight, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 186, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_9openpyfst_14TropicalWeight___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_9openpyfst_14TropicalWeight___init__.doc = __pyx_doc_9openpyfst_14TropicalWeight___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_9openpyfst_14TropicalWeight___init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_TropicalWeight, (PyObject *)&__pyx_type_9openpyfst_TropicalWeight) < 0) __PYX_ERR(0, 186, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9openpyfst_TropicalWeight) < 0) __PYX_ERR(0, 186, __pyx_L1_error)
  __pyx_ptype_9openpyfst_TropicalWeight = &__pyx_type_9openpyfst_TropicalWeight;
  if (PyType_Ready(&__pyx_type_9openpyfst_StdArc) < 0) __PYX_ERR(0, 243, __pyx_L1_error)
  __pyx_type_9openpyfst_StdArc.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9openpyfst_StdArc.tp_dictoffset && __pyx_type_9openpyfst_StdArc.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9openpyfst_StdArc.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_9openpyfst_StdArc, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 243, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_9openpyfst_6StdArc___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_9openpyfst_6StdArc___init__.doc = __pyx_doc_9openpyfst_6StdArc___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_9openpyfst_6StdArc___init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StdArc, (PyObject *)&__pyx_type_9openpyfst_StdArc) < 0) __PYX_ERR(0, 243, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9openpyfst_StdArc) < 0) __PYX_ERR(0, 243, __pyx_L1_error)
  __pyx_ptype_9openpyfst_StdArc = &__pyx_type_9openpyfst_StdArc;
  if (PyType_Ready(&__pyx_type_9openpyfst_StdState) < 0) __PYX_ERR(0, 286, __pyx_L1_error)
  __pyx_type_9openpyfst_StdState.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9openpyfst_StdState.tp_dictoffset && __pyx_type_9openpyfst_StdState.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9openpyfst_StdState.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_9openpyfst_StdState, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 286, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_9openpyfst_8StdState___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_9openpyfst_8StdState___init__.doc = __pyx_doc_9openpyfst_8StdState___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_9openpyfst_8StdState___init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StdState, (PyObject *)&__pyx_type_9openpyfst_StdState) < 0) __PYX_ERR(0, 286, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9openpyfst_StdState) < 0) __PYX_ERR(0, 286, __pyx_L1_error)
  __pyx_ptype_9openpyfst_StdState = &__pyx_type_9openpyfst_StdState;
  __pyx_type_9openpyfst_StdVectorFst.tp_base = __pyx_ptype_9openpyfst__Fst;
  if (PyType_Ready(&__pyx_type_9openpyfst_StdVectorFst) < 0) __PYX_ERR(0, 340, __pyx_L1_error)
  __pyx_type_9openpyfst_StdVectorFst.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9openpyfst_StdVectorFst.tp_dictoffset && __pyx_type_9openpyfst_StdVectorFst.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9openpyfst_StdVectorFst.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_9openpyfst_StdVectorFst, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 340, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_9openpyfst_12StdVectorFst___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_9openpyfst_12StdVectorFst___init__.doc = __pyx_doc_9openpyfst_12StdVectorFst___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_9openpyfst_12StdVectorFst___init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StdVectorFst, (PyObject *)&__pyx_type_9openpyfst_StdVectorFst) < 0) __PYX_ERR(0, 340, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9openpyfst_StdVectorFst) < 0) __PYX_ERR(0, 340, __pyx_L1_error)
  __pyx_ptype_9openpyfst_StdVectorFst = &__pyx_type_9openpyfst_StdVectorFst;
  if (PyType_Ready(&__pyx_type_9openpyfst___pyx_scope_struct__items) < 0) __PYX_ERR(0, 119, __pyx_L1_error)
  __pyx_type_9openpyfst___pyx_scope_struct__items.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9openpyfst___pyx_scope_struct__items.tp_dictoffset && __pyx_type_9openpyfst___pyx_scope_struct__items.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9openpyfst___pyx_scope_struct__items.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_9openpyfst___pyx_scope_struct__items = &__pyx_type_9openpyfst___pyx_scope_struct__items;
  if (PyType_Ready(&__pyx_type_9openpyfst___pyx_scope_struct_1___iter__) < 0) __PYX_ERR(0, 298, __pyx_L1_error)
  __pyx_type_9openpyfst___pyx_scope_struct_1___iter__.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9openpyfst___pyx_scope_struct_1___iter__.tp_dictoffset && __pyx_type_9openpyfst___pyx_scope_struct_1___iter__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9openpyfst___pyx_scope_struct_1___iter__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_9openpyfst___pyx_scope_struct_1___iter__ = &__pyx_type_9openpyfst___pyx_scope_struct_1___iter__;
  if (PyType_Ready(&__pyx_type_9openpyfst___pyx_scope_struct_2_num_arcs) < 0) __PYX_ERR(0, 382, __pyx_L1_error)
  __pyx_type_9openpyfst___pyx_scope_struct_2_num_arcs.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9openpyfst___pyx_scope_struct_2_num_arcs.tp_dictoffset && __pyx_type_9openpyfst___pyx_scope_struct_2_num_arcs.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9openpyfst___pyx_scope_struct_2_num_arcs.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_9openpyfst___pyx_scope_struct_2_num_arcs = &__pyx_type_9openpyfst___pyx_scope_struct_2_num_arcs;
  if (PyType_Ready(&__pyx_type_9openpyfst___pyx_scope_struct_3_genexpr) < 0) __PYX_ERR(0, 384, __pyx_L1_error)
  __pyx_type_9openpyfst___pyx_scope_struct_3_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9openpyfst___pyx_scope_struct_3_genexpr.tp_dictoffset && __pyx_type_9openpyfst___pyx_scope_struct_3_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9openpyfst___pyx_scope_struct_3_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_9openpyfst___pyx_scope_struct_3_genexpr = &__pyx_type_9openpyfst___pyx_scope_struct_3_genexpr;
  if (PyType_Ready(&__pyx_type_9openpyfst___pyx_scope_struct_4___iter__) < 0) __PYX_ERR(0, 408, __pyx_L1_error)
  __pyx_type_9openpyfst___pyx_scope_struct_4___iter__.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9openpyfst___pyx_scope_struct_4___iter__.tp_dictoffset && __pyx_type_9openpyfst___pyx_scope_struct_4___iter__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9openpyfst___pyx_scope_struct_4___iter__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_9openpyfst___pyx_scope_struct_4___iter__ = &__pyx_type_9openpyfst___pyx_scope_struct_4___iter__;
  if (PyType_Ready(&__pyx_type_9openpyfst___pyx_scope_struct_5__visit) < 0) __PYX_ERR(0, 795, __pyx_L1_error)
  __pyx_type_9openpyfst___pyx_scope_struct_5__visit.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9openpyfst___pyx_scope_struct_5__visit.tp_dictoffset && __pyx_type_9openpyfst___pyx_scope_struct_5__visit.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9openpyfst___pyx_scope_struct_5__visit.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_9openpyfst___pyx_scope_struct_5__visit = &__pyx_type_9openpyfst___pyx_scope_struct_5__visit;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initopenpyfst(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initopenpyfst(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_openpyfst(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_openpyfst(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_openpyfst(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'openpyfst' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_openpyfst(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("openpyfst", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_openpyfst) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "openpyfst")) {
      if (unlikely(PyDict_SetItemString(modules, "openpyfst", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "openpyfst.pyx":7
 * cimport sym
 * 
 * import subprocess             # <<<<<<<<<<<<<<
 * import random
 * import re
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_subprocess, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_subprocess, __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openpyfst.pyx":8
 * 
 * import subprocess
 * import random             # <<<<<<<<<<<<<<
 * import re
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_random, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_random, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openpyfst.pyx":9
 * import subprocess
 * import random
 * import re             # <<<<<<<<<<<<<<
 * 
 * from libcpp.vector cimport vector
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_re, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_re, __pyx_t_1) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openpyfst.pyx":18
 * from util cimport ifstream, ostringstream
 * 
 * EPSILON_ID = 0             # <<<<<<<<<<<<<<
 * EPSILON = u'\u03b5'
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EPSILON_ID, __pyx_int_0) < 0) __PYX_ERR(0, 18, __pyx_L1_error)

  /* "openpyfst.pyx":19
 * 
 * EPSILON_ID = 0
 * EPSILON = u'\u03b5'             # <<<<<<<<<<<<<<
 * 
 * cdef bytes as_str(data):
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EPSILON, __pyx_n_u__32) < 0) __PYX_ERR(0, 19, __pyx_L1_error)

  /* "openpyfst.pyx":28
 *     raise TypeError('Cannot convert {0} to bytestring'.format(type(data)))
 * 
 * def read(filename):             # <<<<<<<<<<<<<<
 *     """read(filename) -> transducer read from the binary file
 *     Detect arc type (LogArc or TropicalArc) and produce specific transducer."""
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_9openpyfst_1read, NULL, __pyx_n_s_openpyfst); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_read, __pyx_t_1) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openpyfst.pyx":44
 *     raise TypeError('cannot read transducer with arcs of type {0}'.format(arc_type))
 * 
 * def read_std(filename):             # <<<<<<<<<<<<<<
 *     """read_std(filename) -> StdVectorFst read from the binary file"""
 *     cdef StdVectorFst fst = StdVectorFst.__new__(StdVectorFst)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_9openpyfst_3read_std, NULL, __pyx_n_s_openpyfst); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_read_std, __pyx_t_1) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openpyfst.pyx":58
 * #    return fst
 * 
 * def read_symbols(filename):             # <<<<<<<<<<<<<<
 *     """read_symbols(filename) -> SymbolTable read from the binary file"""
 *     filename = as_str(filename)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_9openpyfst_5read_symbols, NULL, __pyx_n_s_openpyfst); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_read_symbols, __pyx_t_1) < 0) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openpyfst.pyx":71
 *     cdef sym.SymbolTable* table
 * 
 *     def __init__(self, epsilon=EPSILON):             # <<<<<<<<<<<<<<
 *         """SymbolTable() -> new symbol table with \u03b5 <-> 0
 *         SymbolTable(epsilon) -> new symbol table with epsilon <-> 0"""
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_EPSILON); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__2 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "openpyfst.pyx":148
 * 
 * 
 * def _merge_tables(SymbolTable syms1, SymbolTable syms2, SymbolTable merged):             # <<<<<<<<<<<<<<
 *     """
 *     Merge tables `syms1` and `syms2` into `merged` if they are compatible.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_9openpyfst_7_merge_tables, NULL, __pyx_n_s_openpyfst); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_merge_tables, __pyx_t_1) < 0) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openpyfst.pyx":189
 *     cdef openfst.TropicalWeight* weight
 * 
 *     ZERO = TropicalWeight(False)             # <<<<<<<<<<<<<<
 *     ONE = TropicalWeight(True)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9openpyfst_TropicalWeight), __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9openpyfst_TropicalWeight->tp_dict, __pyx_n_s_ZERO, __pyx_t_1) < 0) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_9openpyfst_TropicalWeight);

  /* "openpyfst.pyx":190
 * 
 *     ZERO = TropicalWeight(False)
 *     ONE = TropicalWeight(True)             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, value):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9openpyfst_TropicalWeight), __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9openpyfst_TropicalWeight->tp_dict, __pyx_n_s_ONE, __pyx_t_1) < 0) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_9openpyfst_TropicalWeight);

  /* "openpyfst.pyx":245
 * cdef class StdArc:
 *     cdef openfst.StdArc* arc
 *     SEMIRING = TropicalWeight             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9openpyfst_StdArc->tp_dict, __pyx_n_s_SEMIRING, ((PyObject *)__pyx_ptype_9openpyfst_TropicalWeight)) < 0) __PYX_ERR(0, 245, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_9openpyfst_StdArc);

  /* "openpyfst.pyx":289
 *     cdef public int stateid
 *     cdef openfst.StdVectorFst* fst
 *     SEMIRING = TropicalWeight             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9openpyfst_StdState->tp_dict, __pyx_n_s_SEMIRING, ((PyObject *)__pyx_ptype_9openpyfst_TropicalWeight)) < 0) __PYX_ERR(0, 289, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_9openpyfst_StdState);

  /* "openpyfst.pyx":343
 *     cdef openfst.StdVectorFst* fst
 *     cdef public SymbolTable isyms, osyms
 *     SEMIRING = TropicalWeight             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, source=None, isyms=None, osyms=None):
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9openpyfst_StdVectorFst->tp_dict, __pyx_n_s_SEMIRING, ((PyObject *)__pyx_ptype_9openpyfst_TropicalWeight)) < 0) __PYX_ERR(0, 343, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_9openpyfst_StdVectorFst);

  /* "openpyfst.pyx":697
 *         raise TypeError('Cannot convert label "{0}" to symbol'.format(label))
 * 
 *     def relabel(self, imap={}, omap={}):             # <<<<<<<<<<<<<<
 *         """fst.relabel(imap={}, omap={}): relabel the symbols on the arcs of the transducer
 *         imap/omap: (int -> int) or (str -> str) symbol mappings"""
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__28 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__29 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle__Fst(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_9openpyfst_9__pyx_unpickle__Fst, NULL, __pyx_n_s_openpyfst); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle__Fst, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "openpyfst.pyx":1
 * #!python             # <<<<<<<<<<<<<<
 * #cython: language_level=3
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init openpyfst", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init openpyfst");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* decode_c_bytes */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* pyobject_as_double */
static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    PyObject* float_value;
#if !CYTHON_USE_TYPE_SLOTS
    float_value = PyNumber_Float(obj);  if (0) goto bad;
#else
    PyNumberMethods *nb = Py_TYPE(obj)->tp_as_number;
    if (likely(nb) && likely(nb->nb_float)) {
        float_value = nb->nb_float(obj);
        if (likely(float_value) && unlikely(!PyFloat_Check(float_value))) {
            PyErr_Format(PyExc_TypeError,
                "__float__ returned non-float (type %.200s)",
                Py_TYPE(float_value)->tp_name);
            Py_DECREF(float_value);
            goto bad;
        }
    } else if (PyUnicode_CheckExact(obj) || PyBytes_CheckExact(obj)) {
#if PY_MAJOR_VERSION >= 3
        float_value = PyFloat_FromString(obj);
#else
        float_value = PyFloat_FromString(obj, 0);
#endif
    } else {
        PyObject* args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        PyTuple_SET_ITEM(args, 0, obj);
        float_value = PyObject_Call((PyObject*)&PyFloat_Type, args, 0);
        PyTuple_SET_ITEM(args, 0, 0);
        Py_DECREF(args);
    }
#endif
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
bad:
    return (double)-1;
}

/* PyIntFromDouble */
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE PyObject* __Pyx_PyInt_FromDouble(double value) {
    if (value >= (double)LONG_MIN && value <= (double)LONG_MAX) {
        return PyInt_FromLong((long)value);
    }
    return PyLong_FromDouble(value);
}
#endif

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value) {
    const uint64_t neg_one = (uint64_t) ((uint64_t) 0 - (uint64_t) 1), const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__fst_3a__3a_ReweightType(enum fst::ReweightType value) {
    const enum fst::ReweightType neg_one = (enum fst::ReweightType) ((enum fst::ReweightType) 0 - (enum fst::ReweightType) 1), const_zero = (enum fst::ReweightType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum fst::ReweightType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum fst::ReweightType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum fst::ReweightType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum fst::ReweightType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum fst::ReweightType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum fst::ReweightType),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) ((unsigned int) 0 - (unsigned int) 1), const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE enum fst::ReweightType __Pyx_PyInt_As_enum__fst_3a__3a_ReweightType(PyObject *x) {
    const enum fst::ReweightType neg_one = (enum fst::ReweightType) ((enum fst::ReweightType) 0 - (enum fst::ReweightType) 1), const_zero = (enum fst::ReweightType) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum fst::ReweightType) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum fst::ReweightType, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum fst::ReweightType) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum fst::ReweightType) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum fst::ReweightType, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum fst::ReweightType) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum fst::ReweightType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum fst::ReweightType) >= 2 * PyLong_SHIFT) {
                            return (enum fst::ReweightType) (((((enum fst::ReweightType)digits[1]) << PyLong_SHIFT) | (enum fst::ReweightType)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum fst::ReweightType) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum fst::ReweightType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum fst::ReweightType) >= 3 * PyLong_SHIFT) {
                            return (enum fst::ReweightType) (((((((enum fst::ReweightType)digits[2]) << PyLong_SHIFT) | (enum fst::ReweightType)digits[1]) << PyLong_SHIFT) | (enum fst::ReweightType)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum fst::ReweightType) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum fst::ReweightType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum fst::ReweightType) >= 4 * PyLong_SHIFT) {
                            return (enum fst::ReweightType) (((((((((enum fst::ReweightType)digits[3]) << PyLong_SHIFT) | (enum fst::ReweightType)digits[2]) << PyLong_SHIFT) | (enum fst::ReweightType)digits[1]) << PyLong_SHIFT) | (enum fst::ReweightType)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum fst::ReweightType) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum fst::ReweightType) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum fst::ReweightType, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum fst::ReweightType) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum fst::ReweightType, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum fst::ReweightType) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum fst::ReweightType, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum fst::ReweightType,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum fst::ReweightType) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum fst::ReweightType, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum fst::ReweightType) - 1 > 2 * PyLong_SHIFT) {
                            return (enum fst::ReweightType) (((enum fst::ReweightType)-1)*(((((enum fst::ReweightType)digits[1]) << PyLong_SHIFT) | (enum fst::ReweightType)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum fst::ReweightType) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum fst::ReweightType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum fst::ReweightType) - 1 > 2 * PyLong_SHIFT) {
                            return (enum fst::ReweightType) ((((((enum fst::ReweightType)digits[1]) << PyLong_SHIFT) | (enum fst::ReweightType)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum fst::ReweightType) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum fst::ReweightType, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum fst::ReweightType) - 1 > 3 * PyLong_SHIFT) {
                            return (enum fst::ReweightType) (((enum fst::ReweightType)-1)*(((((((enum fst::ReweightType)digits[2]) << PyLong_SHIFT) | (enum fst::ReweightType)digits[1]) << PyLong_SHIFT) | (enum fst::ReweightType)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum fst::ReweightType) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum fst::ReweightType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum fst::ReweightType) - 1 > 3 * PyLong_SHIFT) {
                            return (enum fst::ReweightType) ((((((((enum fst::ReweightType)digits[2]) << PyLong_SHIFT) | (enum fst::ReweightType)digits[1]) << PyLong_SHIFT) | (enum fst::ReweightType)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum fst::ReweightType) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum fst::ReweightType, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum fst::ReweightType) - 1 > 4 * PyLong_SHIFT) {
                            return (enum fst::ReweightType) (((enum fst::ReweightType)-1)*(((((((((enum fst::ReweightType)digits[3]) << PyLong_SHIFT) | (enum fst::ReweightType)digits[2]) << PyLong_SHIFT) | (enum fst::ReweightType)digits[1]) << PyLong_SHIFT) | (enum fst::ReweightType)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum fst::ReweightType) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum fst::ReweightType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum fst::ReweightType) - 1 > 4 * PyLong_SHIFT) {
                            return (enum fst::ReweightType) ((((((((((enum fst::ReweightType)digits[3]) << PyLong_SHIFT) | (enum fst::ReweightType)digits[2]) << PyLong_SHIFT) | (enum fst::ReweightType)digits[1]) << PyLong_SHIFT) | (enum fst::ReweightType)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum fst::ReweightType) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum fst::ReweightType, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum fst::ReweightType) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum fst::ReweightType, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum fst::ReweightType val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum fst::ReweightType) -1;
        }
    } else {
        enum fst::ReweightType val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum fst::ReweightType) -1;
        val = __Pyx_PyInt_As_enum__fst_3a__3a_ReweightType(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum fst::ReweightType");
    return (enum fst::ReweightType) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum fst::ReweightType");
    return (enum fst::ReweightType) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if (0) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if (0) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
